%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: qcd-9.4.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/13/12
%%BoundingBox: 0 0 258 275
%%HiResBoundingBox: 0 0 257.2627 274.9858
%%CropBox: 0 0 257.2627 274.9858
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2012-06-13T18:23:37-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-06-13T18:23:37-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-13T18:23:37-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>240</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADwAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXgH/OSOg+b9R13&#xA;TpdLs728tv0ZPDpX1JZH9HVTcwuj/u/7pvSXZ2psDv1xVS/MuG585+ZdEthp13qN/wCXZzaT6RqG&#xA;k3P6Pv5fWhS7lhv4/giXjxZXdQvHfvQqvWfO3mbVNHurKCxktolnhuLiZriGSclbeS3D8AksFOMU&#xA;zyGp/Zpt1xVMfqnnT/q66b/3Dp/+y7FXfVPOn/V103/uHT/9l2Ku+qedP+rrpv8A3Dp/+y7FXfVP&#xA;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&#xA;4q7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:AA7957289E216811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:AA7957289E216811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:380e3c4c-1000-b64f-9575-493e86d43ff1</stRef:instanceID>
            <stRef:documentID>xmp.did:FC7F117407206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-11T18:01:14-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AA7957289E216811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-13T18:23:37-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.673611</stDim:w>
            <stDim:h>3.951389</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=100 K=24 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>24.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=27 M=100 Y=100 K=30 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>26.645302</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>30.307495</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=42 M=95 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>42.206501</xmpG:cyan>
                           <xmpG:magenta>94.857697</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>89.999405</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998795</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999702</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>59.999104</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999401</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>29.998802</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>19.999701</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>9.999103</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>4.998803</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Brights</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=60 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>60.000004</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.003099</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -274.986 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 274.986 li
257.263 274.986 li
257.263 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
198.066 205.976 mo
203.949 208.671 li
209.356 210.731 li
219.056 213.268 li
226.688 215.011 li
233.049 216.122 li
232.89 222.304 li
220.646 221.669 li
211.105 220.877 li
203.313 220.084 li
198.066 218.619 li
198.066 205.976 li
cp
eclp
gsave
194.129 208.847 mo
199.031 208.847 li
199.031 203.96 li
194.129 203.96 li
194.129 208.847 li
cp
clp
194.129 203.96 mo
194.129 208.848 li
199.031 208.848 li
199.031 203.96 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 194.129 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
199.031 208.847 mo
203.934 208.847 li
203.934 203.96 li
199.031 203.96 li
199.031 208.847 li
cp
clp
199.031 203.96 mo
199.031 208.848 li
203.933 208.848 li
203.933 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 199.031 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
203.934 208.847 mo
208.836 208.847 li
208.836 203.96 li
203.934 203.96 li
203.934 208.847 li
cp
clp
203.934 203.96 mo
203.934 208.848 li
208.836 208.848 li
208.836 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 203.934 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
208.836 208.847 mo
213.738 208.847 li
213.738 203.96 li
208.836 203.96 li
208.836 208.847 li
cp
clp
208.836 203.96 mo
208.836 208.848 li
213.738 208.848 li
213.738 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 208.836 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
213.737 208.847 mo
218.64 208.847 li
218.64 203.96 li
213.737 203.96 li
213.737 208.847 li
cp
clp
213.737 203.96 mo
213.737 208.848 li
218.639 208.848 li
218.639 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 213.737 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
218.64 208.847 mo
223.542 208.847 li
223.542 203.96 li
218.64 203.96 li
218.64 208.847 li
cp
clp
218.64 203.96 mo
218.64 208.848 li
223.542 208.848 li
223.542 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 218.64 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
223.542 208.847 mo
228.443 208.847 li
228.443 203.96 li
223.542 203.96 li
223.542 208.847 li
cp
clp
223.542 203.96 mo
223.542 208.848 li
228.444 208.848 li
228.444 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 223.542 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
228.443 208.847 mo
233.346 208.847 li
233.346 203.96 li
228.443 203.96 li
228.443 208.847 li
cp
clp
228.443 203.96 mo
228.443 208.848 li
233.345 208.848 li
233.345 203.96 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 228.443 66.1383 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
194.129 213.735 mo
199.031 213.735 li
199.031 208.847 li
194.129 208.847 li
194.129 213.735 li
cp
clp
194.129 208.847 mo
194.129 213.734 li
199.031 213.734 li
199.031 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 194.129 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
199.031 213.735 mo
203.934 213.735 li
203.934 208.847 li
199.031 208.847 li
199.031 213.735 li
cp
clp
199.031 208.847 mo
199.031 213.734 li
203.933 213.734 li
203.933 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 199.031 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
203.934 213.735 mo
208.836 213.735 li
208.836 208.847 li
203.934 208.847 li
203.934 213.735 li
cp
clp
203.934 208.847 mo
203.934 213.734 li
208.836 213.734 li
208.836 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 203.934 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
208.836 213.735 mo
213.738 213.735 li
213.738 208.847 li
208.836 208.847 li
208.836 213.735 li
cp
clp
208.836 208.847 mo
208.836 213.734 li
213.738 213.734 li
213.738 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 208.836 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
213.737 213.735 mo
218.64 213.735 li
218.64 208.847 li
213.737 208.847 li
213.737 213.735 li
cp
clp
213.737 208.847 mo
213.737 213.734 li
218.639 213.734 li
218.639 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 213.737 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
218.64 213.735 mo
223.542 213.735 li
223.542 208.847 li
218.64 208.847 li
218.64 213.735 li
cp
clp
218.64 208.847 mo
218.64 213.734 li
223.542 213.734 li
223.542 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 218.64 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
223.542 213.735 mo
228.443 213.735 li
228.443 208.847 li
223.542 208.847 li
223.542 213.735 li
cp
clp
223.542 208.847 mo
223.542 213.734 li
228.444 213.734 li
228.444 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 223.542 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
228.443 213.735 mo
233.346 213.735 li
233.346 208.847 li
228.443 208.847 li
228.443 213.735 li
cp
clp
228.443 208.847 mo
228.443 213.734 li
233.345 213.734 li
233.345 208.847 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 228.443 61.2516 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
194.129 218.622 mo
199.031 218.622 li
199.031 213.734 li
194.129 213.734 li
194.129 218.622 li
cp
clp
194.129 213.734 mo
194.129 218.621 li
199.031 218.621 li
199.031 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 194.129 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
199.031 218.622 mo
203.934 218.622 li
203.934 213.734 li
199.031 213.734 li
199.031 218.622 li
cp
clp
199.031 213.734 mo
199.031 218.621 li
203.933 218.621 li
203.933 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 199.031 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
203.934 218.622 mo
208.836 218.622 li
208.836 213.734 li
203.934 213.734 li
203.934 218.622 li
cp
clp
203.934 213.734 mo
203.934 218.621 li
208.836 218.621 li
208.836 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 203.934 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
208.836 218.622 mo
213.738 218.622 li
213.738 213.734 li
208.836 213.734 li
208.836 218.622 li
cp
clp
208.836 213.734 mo
208.836 218.621 li
213.738 218.621 li
213.738 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 208.836 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
213.737 218.622 mo
218.64 218.622 li
218.64 213.734 li
213.737 213.734 li
213.737 218.622 li
cp
clp
213.737 213.734 mo
213.737 218.621 li
218.639 218.621 li
218.639 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 213.737 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
218.64 218.622 mo
223.542 218.622 li
223.542 213.734 li
218.64 213.734 li
218.64 218.622 li
cp
clp
218.64 213.734 mo
218.64 218.621 li
223.542 218.621 li
223.542 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 218.64 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
223.542 218.622 mo
228.443 218.622 li
228.443 213.734 li
223.542 213.734 li
223.542 218.622 li
cp
clp
223.542 213.734 mo
223.542 218.621 li
228.444 218.621 li
228.444 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 223.542 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
228.443 218.622 mo
233.346 218.622 li
233.346 213.734 li
228.443 213.734 li
228.443 218.622 li
cp
clp
228.443 213.734 mo
228.443 218.621 li
233.345 218.621 li
233.345 213.734 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 228.443 56.3648 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
194.129 223.508 mo
199.031 223.508 li
199.031 218.622 li
194.129 218.622 li
194.129 223.508 li
cp
clp
194.129 218.622 mo
194.129 223.509 li
199.031 223.509 li
199.031 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 194.129 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
199.031 223.508 mo
203.934 223.508 li
203.934 218.622 li
199.031 218.622 li
199.031 223.508 li
cp
clp
199.031 218.622 mo
199.031 223.509 li
203.933 223.509 li
203.933 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 199.031 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
203.934 223.508 mo
208.836 223.508 li
208.836 218.622 li
203.934 218.622 li
203.934 223.508 li
cp
clp
203.934 218.622 mo
203.934 223.509 li
208.836 223.509 li
208.836 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 203.934 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
208.836 223.508 mo
213.738 223.508 li
213.738 218.622 li
208.836 218.622 li
208.836 223.508 li
cp
clp
208.836 218.622 mo
208.836 223.509 li
213.738 223.509 li
213.738 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 208.836 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
213.737 223.508 mo
218.64 223.508 li
218.64 218.622 li
213.737 218.622 li
213.737 223.508 li
cp
clp
213.737 218.622 mo
213.737 223.509 li
218.639 223.509 li
218.639 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 213.737 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
218.64 223.508 mo
223.542 223.508 li
223.542 218.622 li
218.64 218.622 li
218.64 223.508 li
cp
clp
218.64 218.622 mo
218.64 223.509 li
223.542 223.509 li
223.542 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 218.64 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
223.542 223.508 mo
228.443 223.508 li
228.443 218.622 li
223.542 218.622 li
223.542 223.508 li
cp
clp
223.542 218.622 mo
223.542 223.509 li
228.444 223.509 li
228.444 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 223.542 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
gsave
228.443 223.508 mo
233.346 223.508 li
233.346 218.622 li
228.443 218.622 li
228.443 223.508 li
cp
clp
228.443 218.622 mo
228.443 223.509 li
233.345 223.509 li
233.345 218.622 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[4.90212 0 0 4.88711 228.443 51.4771 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~i;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#Xi;`iXi;`iX!9!nX!9!nX!!(sX!!(sX!!!#X!!!#X
~>
<~VuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"tVuQetVuQet!2okt!2okt!!&qt!!&qt!!!"t!!!"t
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
]
/O 3
>>
%%BeginBinary:
img
%%EndBinary
grestore
np
grestore
grestore
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
198.065 205.976 mo
203.948 208.671 li
209.354 210.731 li
219.055 213.268 li
226.686 215.011 li
233.047 216.122 li
232.889 222.303 li
220.645 221.669 li
211.104 220.876 li
203.313 220.084 li
198.065 218.619 li
198.065 205.976 li
cp
false sop
1 0 0 0 cmyk
@
212.259 218.024 mo
220.805 218.024 li
220.805 209.463 li
212.259 209.463 li
212.259 218.024 li
cp
0 0 0 0 cmyk
ef
gsave
111.726 98.9756 mo
119.518 100.084 li
119.358 106.268 li
111.885 105.792 li
111.726 98.9756 li
cp
eclp
gsave
110.793 106.218 mo
130.402 106.218 li
130.402 86.6699 li
110.793 86.6699 li
110.793 106.218 li
cp
clp
110.793 86.6699 mo
110.793 106.218 li
130.402 106.218 li
130.402 86.6699 li
cp
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[19.6085 0 0 19.5484 110.793 168.768 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 8 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary:
sepimg
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#us8W&u
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!ri6#!W`9#rVuru
rVururVururVururVururVururVurur;ZitrVururVururVururVururVururVururVurur;ZitrVuru
rVururVururVururVururVururVurur;ZitrVururVururVururVururVururW!!!!<3'!s8Duus8Duu
s8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duu
s8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8E#us8Duus8Duus8Duu
s8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duu
s8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8E#us8Duus8Duus8Duus8Duu
s8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duu
s8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8E!"rr<$"!<<#us8W&u!<<#u!<<#u!<<#u!<<#u
!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u
!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!WN-$!!*&u!<<)u!!*&u!!*&u!!*&u!!*&u!!*&u
!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u
!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*%L~>

%%EndBinary
grestore
np
grestore
gsave
110.793 125.767 mo
130.402 125.767 li
130.402 106.218 li
110.793 106.218 li
110.793 125.767 li
cp
clp
110.793 106.218 mo
110.793 125.767 li
130.402 125.767 li
130.402 106.218 li
cp
1 /0 /CSD get_res sepcs
gsave
clp
[1 0 0 -1 0 274.986 ]ct
[19.6085 0 0 19.5484 110.793 149.219 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 32 
/M[32 0 0 -32 0 32 ]
/BC 8 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary:
sepimg
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#us8W&u
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u
!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!ri6#!W`9#rVuru
rVururVururVururVururVururVurur;ZitrVururVururVururVururVururVururVurur;ZitrVuru
rVururVururVururVururVururVurur;ZitrVururVururVururVururVururW!!!!<3'!s8Duus8Duu
s8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duu
s8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8E#us8Duus8Duus8Duu
s8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duu
s8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8E#us8Duus8Duus8Duus8Duu
s8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duu
s8Duus8Duus8Duus8;ots8Duus8Duus8Duus8Duus8E!"rr<$"!<<#us8W&u!<<#u!<<#u!<<#u!<<#u
!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u
!<<#u!<<#u!<;ut!<<#u!<<#u!<<#u!<<#u!<<#u!WN-$!!*&u!<<)u!!*&u!!*&u!!*&u!!*&u!!*&u
!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u
!!*&u!!*&t!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*&u!!*%L~>

%%EndBinary
grestore
np
grestore
grestore
.611831 lw
0 lj
11.5 ml
111.726 98.9756 mo
119.517 100.085 li
119.357 106.268 li
111.885 105.792 li
111.726 98.9756 li
cp
1 0 0 0 cmyk
@
126.467 104.872 mo
126.651 104.992 126.869 105.052 127.121 105.052 cv
127.509 105.052 127.84 104.86 128.114 104.476 cv
128.39 104.091 128.526 103.556 128.526 102.87 cv
128.526 102.212 128.384 101.72 128.099 101.395 cv
127.813 101.069 127.481 100.907 127.104 100.907 cv
126.839 100.907 126.597 100.988 126.378 101.151 cv
126.158 101.313 126.049 101.474 126.049 101.631 cv
126.049 104.328 li
126.143 104.571 126.281 104.752 126.467 104.872 cv
cp
124.342 107.538 mo
124.677 107.516 124.891 107.445 124.981 107.323 cv
125.072 107.201 125.117 107.01 125.117 106.749 cv
125.117 101.594 li
125.117 101.322 125.084 101.147 125.018 101.071 cv
124.951 100.994 124.826 100.955 124.644 100.955 cv
124.604 100.955 124.567 100.957 124.533 100.96 cv
124.499 100.964 124.449 100.971 124.385 100.982 cv
124.385 100.805 li
124.896 100.638 li
124.915 100.635 125.275 100.511 125.979 100.268 cv
125.997 100.268 126.011 100.276 126.02 100.292 cv
126.028 100.308 126.033 100.327 126.033 100.349 cv
126.033 101.073 li
126.27 100.837 126.479 100.662 126.658 100.547 cv
126.98 100.347 127.313 100.247 127.654 100.247 cv
128.149 100.247 128.576 100.457 128.934 100.876 cv
129.29 101.297 129.469 101.872 129.469 102.601 cv
129.469 103.316 129.255 103.965 128.825 104.548 cv
128.396 105.131 127.856 105.422 127.207 105.422 cv
127.006 105.422 126.832 105.397 126.685 105.347 cv
126.455 105.272 126.243 105.134 126.049 104.934 cv
126.049 106.695 li
126.049 107.056 126.108 107.278 126.227 107.36 cv
126.346 107.443 126.604 107.499 127.002 107.527 cv
127.002 107.715 li
124.342 107.715 li
124.342 107.538 li
cp
f
131.981 104.872 mo
132.166 104.992 132.384 105.052 132.636 105.052 cv
133.023 105.052 133.354 104.86 133.629 104.476 cv
133.904 104.091 134.041 103.556 134.041 102.87 cv
134.041 102.212 133.898 101.72 133.613 101.395 cv
133.327 101.069 132.996 100.907 132.619 100.907 cv
132.354 100.907 132.111 100.988 131.893 101.151 cv
131.673 101.313 131.563 101.474 131.563 101.631 cv
131.563 104.328 li
131.657 104.571 131.796 104.752 131.981 104.872 cv
cp
129.856 107.538 mo
130.191 107.516 130.405 107.445 130.496 107.323 cv
130.587 107.201 130.632 107.01 130.632 106.749 cv
130.632 101.594 li
130.632 101.322 130.599 101.147 130.532 101.071 cv
130.466 100.994 130.341 100.955 130.158 100.955 cv
130.118 100.955 130.082 100.957 130.048 100.96 cv
130.014 100.964 129.964 100.971 129.899 100.982 cv
129.899 100.805 li
130.411 100.638 li
130.43 100.635 130.79 100.511 131.494 100.268 cv
131.512 100.268 131.525 100.276 131.534 100.292 cv
131.543 100.308 131.548 100.327 131.548 100.349 cv
131.548 101.073 li
131.784 100.837 131.993 100.662 132.173 100.547 cv
132.495 100.347 132.827 100.247 133.169 100.247 cv
133.664 100.247 134.091 100.457 134.448 100.876 cv
134.805 101.297 134.983 101.872 134.983 102.601 cv
134.983 103.316 134.77 103.965 134.34 104.548 cv
133.911 105.131 133.371 105.422 132.722 105.422 cv
132.521 105.422 132.347 105.397 132.199 105.347 cv
131.97 105.272 131.758 105.134 131.563 104.934 cv
131.563 106.695 li
131.563 107.056 131.623 107.278 131.741 107.36 cv
131.86 107.443 132.118 107.499 132.517 107.527 cv
132.517 107.715 li
129.856 107.715 li
129.856 107.538 li
cp
f
143.611 102.577 mo
143.611 103.108 li
138.048 103.108 li
138.048 102.577 li
143.611 102.577 li
cp
f
143.687 100.483 mo
143.687 99.6694 li
149.665 102.392 li
149.665 102.687 li
143.687 105.409 li
143.687 104.595 li
148.233 102.53 li
143.687 100.483 li
cp
f
153.941 97.9907 mo
154.05 97.8804 154.183 97.8252 154.34 97.8252 cv
154.494 97.8252 154.627 97.8804 154.736 97.9907 cv
154.846 98.1011 154.9 98.2329 154.9 98.3862 cv
154.9 98.5391 154.846 98.6704 154.736 98.7788 cv
154.627 98.8877 154.494 98.9419 154.34 98.9419 cv
154.183 98.9419 154.05 98.8877 153.941 98.7788 cv
153.834 98.6704 153.78 98.5391 153.78 98.3862 cv
153.78 98.2329 153.834 98.1011 153.941 97.9907 cv
cp
152.921 107.02 mo
153.099 107.243 153.256 107.355 153.393 107.355 cv
153.618 107.355 153.771 107.225 153.851 106.963 cv
153.896 106.806 153.922 106.543 153.926 106.175 cv
153.929 106.043 153.931 105.717 153.931 105.199 cv
153.931 101.669 li
153.931 101.426 153.907 101.246 153.861 101.13 cv
153.814 101.013 153.706 100.955 153.538 100.955 cv
153.487 100.955 153.422 100.964 153.341 100.982 cv
153.261 101 153.177 101.021 153.091 101.046 cv
153.091 100.88 li
153.549 100.729 li
153.66 100.694 153.805 100.645 153.982 100.582 cv
154.16 100.52 154.329 100.458 154.491 100.397 cv
154.814 100.284 li
154.828 100.306 154.836 100.331 154.836 100.359 cv
154.836 105.32 li
154.836 105.939 154.757 106.423 154.599 106.77 cv
154.312 107.407 153.762 107.726 152.951 107.726 cv
152.685 107.726 152.449 107.672 152.242 107.564 cv
152.036 107.457 151.933 107.314 151.933 107.135 cv
151.933 107.017 151.975 106.912 152.057 106.821 cv
152.14 106.729 152.245 106.684 152.374 106.684 cv
152.562 106.684 152.743 106.796 152.921 107.02 cv
cp
f
156.909 101.218 mo
156.794 101.412 156.712 101.655 156.661 101.949 cv
158.935 101.949 li
158.895 101.591 158.826 101.324 158.729 101.148 cv
158.554 100.833 158.259 100.676 157.847 100.676 cv
157.437 100.676 157.125 100.857 156.909 101.218 cv
cp
159.489 100.808 mo
159.869 101.157 160.06 101.651 160.06 102.292 cv
156.64 102.292 li
156.676 103.121 156.864 103.724 157.205 104.103 cv
157.547 104.481 157.95 104.67 158.417 104.67 cv
158.794 104.67 159.112 104.572 159.37 104.376 cv
159.629 104.18 159.868 103.901 160.087 103.54 cv
160.275 103.604 li
160.128 104.06 159.853 104.481 159.448 104.868 cv
159.045 105.256 158.55 105.449 157.965 105.449 cv
157.29 105.449 156.769 105.195 156.4 104.687 cv
156.032 104.179 155.849 103.593 155.849 102.931 cv
155.849 102.211 156.062 101.591 156.489 101.068 cv
156.916 100.545 157.473 100.284 158.158 100.284 cv
158.665 100.284 159.108 100.458 159.489 100.808 cv
cp
f
163.334 100.37 mo
163.334 100.756 li
162.235 100.756 li
162.225 103.849 li
162.225 104.121 162.248 104.327 162.295 104.467 cv
162.381 104.713 162.55 104.837 162.801 104.837 cv
162.931 104.837 163.043 104.807 163.138 104.746 cv
163.232 104.685 163.342 104.588 163.464 104.456 cv
163.604 104.574 li
163.485 104.735 li
163.298 104.986 163.101 105.163 162.893 105.267 cv
162.685 105.371 162.483 105.422 162.289 105.422 cv
161.865 105.422 161.578 105.234 161.428 104.858 cv
161.345 104.654 161.304 104.372 161.304 104.01 cv
161.304 100.756 li
160.717 100.756 li
160.699 100.746 160.686 100.735 160.677 100.724 cv
160.667 100.713 160.663 100.699 160.663 100.681 cv
160.663 100.646 160.671 100.618 160.688 100.598 cv
160.703 100.579 160.755 100.533 160.841 100.461 cv
161.089 100.257 161.267 100.092 161.377 99.9644 cv
161.486 99.8374 161.743 99.502 162.149 98.958 cv
162.196 98.958 162.224 98.9614 162.232 98.9688 cv
162.242 98.9761 162.246 99.0024 162.246 99.0493 cv
162.246 100.37 li
163.334 100.37 li
cp
f
164.169 103.629 mo
164.347 103.629 li
164.429 104.037 164.54 104.351 164.68 104.569 cv
164.931 104.97 165.298 105.17 165.781 105.17 cv
166.05 105.17 166.262 105.096 166.418 104.947 cv
166.574 104.799 166.651 104.606 166.651 104.37 cv
166.651 104.22 166.606 104.075 166.518 103.935 cv
166.428 103.795 166.27 103.66 166.043 103.527 cv
165.44 103.184 li
164.999 102.947 164.674 102.709 164.466 102.469 cv
164.257 102.229 164.153 101.947 164.153 101.621 cv
164.153 101.22 164.297 100.891 164.584 100.633 cv
164.871 100.375 165.231 100.247 165.666 100.247 cv
165.856 100.247 166.065 100.282 166.294 100.354 cv
166.521 100.425 166.65 100.461 166.679 100.461 cv
166.743 100.461 166.79 100.452 166.818 100.435 cv
166.848 100.417 166.873 100.388 166.895 100.349 cv
167.023 100.349 li
167.062 101.847 li
166.895 101.847 li
166.822 101.5 166.726 101.229 166.604 101.036 cv
166.381 100.678 166.06 100.499 165.64 100.499 cv
165.388 100.499 165.19 100.576 165.047 100.729 cv
164.903 100.884 164.831 101.064 164.831 101.272 cv
164.831 101.602 165.079 101.895 165.574 102.152 cv
166.285 102.534 li
167.051 102.949 167.433 103.432 167.433 103.983 cv
167.433 104.406 167.274 104.751 166.957 105.02 cv
166.64 105.288 166.225 105.422 165.712 105.422 cv
165.497 105.422 165.254 105.387 164.981 105.315 cv
164.709 105.243 164.548 105.208 164.497 105.208 cv
164.454 105.208 164.417 105.223 164.385 105.253 cv
164.352 105.284 164.327 105.32 164.309 105.363 cv
164.169 105.363 li
164.169 103.629 li
cp
f
171.906 100.623 mo
172.264 100.174 172.686 99.8135 173.172 99.5405 cv
173.251 99.6787 li
172.802 100.035 172.48 100.381 172.288 100.718 cv
171.95 101.306 171.781 102.088 171.781 103.065 cv
171.781 103.789 171.845 104.386 171.974 104.857 cv
172.2 105.681 172.626 106.297 173.251 106.707 cv
173.143 106.845 li
172.799 106.68 172.428 106.359 172.028 105.88 cv
171.366 105.086 171.035 104.185 171.035 103.174 cv
171.035 102.205 171.326 101.354 171.906 100.623 cv
cp
f
173.595 105.162 mo
173.949 105.125 174.177 105.045 174.277 104.922 cv
174.378 104.798 174.428 104.511 174.428 104.06 cv
174.428 100.292 li
174.311 100.154 li
174.185 100.007 174.078 99.916 173.99 99.8809 cv
173.902 99.8462 173.771 99.8262 173.595 99.8203 cv
173.595 99.6616 li
175.059 99.6616 li
178.37 103.754 li
178.37 100.912 li
178.37 100.444 178.3 100.14 178.16 99.999 cv
178.068 99.9077 177.864 99.8481 177.549 99.8203 cv
177.549 99.6616 li
179.563 99.6616 li
179.563 99.8203 li
179.236 99.854 179.019 99.9331 178.91 100.059 cv
178.801 100.184 178.747 100.471 178.747 100.919 cv
178.747 105.42 li
178.6 105.42 li
174.805 100.731 li
174.805 104.06 li
174.805 104.527 174.873 104.832 175.01 104.974 cv
175.1 105.066 175.299 105.128 175.609 105.162 cv
175.609 105.32 li
173.595 105.32 li
173.595 105.162 li
cp
f
179.79 105.162 mo
180.105 105.128 180.31 105.072 180.403 104.994 cv
180.497 104.915 180.544 104.714 180.544 104.393 cv
180.544 100.589 li
180.544 100.286 180.498 100.087 180.405 99.9937 cv
180.313 99.9004 180.108 99.8428 179.79 99.8203 cv
179.79 99.6616 li
182.211 99.6616 li
182.211 99.8203 li
181.896 99.8374 181.684 99.8887 181.576 99.9751 cv
181.469 100.062 181.415 100.247 181.415 100.53 cv
181.415 104.64 li
181.415 104.734 181.431 104.809 181.463 104.863 cv
181.495 104.917 181.566 104.952 181.675 104.965 cv
181.739 104.974 181.807 104.979 181.878 104.982 cv
181.949 104.985 182.083 104.986 182.279 104.986 cv
183.042 104.986 183.558 104.924 183.826 104.798 cv
184.095 104.673 184.354 104.353 184.606 103.838 cv
184.824 103.838 li
184.405 105.32 li
179.79 105.32 li
179.79 105.162 li
cp
f
186.693 104.487 mo
187.049 104.917 187.484 105.132 188.002 105.132 cv
188.508 105.132 188.94 104.923 189.3 104.504 cv
189.659 104.085 189.839 103.415 189.839 102.493 cv
189.839 101.561 189.657 100.887 189.294 100.472 cv
188.93 100.057 188.5 99.8496 188.002 99.8496 cv
187.487 99.8496 187.052 100.065 186.695 100.495 cv
186.339 100.925 186.161 101.591 186.161 102.493 cv
186.161 103.393 186.339 104.057 186.693 104.487 cv
cp
186.052 100.296 mo
186.58 99.793 187.229 99.5405 188 99.5405 cv
188.773 99.5405 189.424 99.7939 189.952 100.301 cv
190.524 100.849 190.811 101.58 190.811 102.493 cv
190.811 103.42 190.515 104.158 189.923 104.707 cv
189.392 105.196 188.751 105.441 188 105.441 cv
187.195 105.441 186.528 105.17 185.997 104.627 cv
185.459 104.073 185.189 103.362 185.189 102.493 cv
185.189 101.58 185.477 100.848 186.052 100.296 cv
cp
f
193.407 104.393 mo
193.299 104.764 193.14 105.113 192.93 105.441 cv
192.709 105.792 192.415 106.119 192.046 106.423 cv
191.804 106.623 191.6 106.764 191.435 106.845 cv
191.355 106.707 li
191.785 106.381 192.1 106.048 192.298 105.708 cv
192.649 105.107 192.825 104.313 192.825 103.324 cv
192.825 102.525 192.744 101.873 192.582 101.366 cv
192.356 100.65 191.947 100.088 191.355 99.6787 cv
191.464 99.5405 li
191.905 99.7856 192.315 100.156 192.695 100.651 cv
193.279 101.415 193.571 102.269 193.571 103.216 cv
193.571 103.63 193.517 104.023 193.407 104.393 cv
cp
f
129.853 99.4512 mo
134.145 99.4512 li
.871094 .363281 .0625 0 cmyk
@
227.205 219.292 mo
232.412 219.292 li
232.412 214.061 li
227.205 214.061 li
227.205 219.292 li
cp
0 0 0 0 cmyk
ef
227.203 214.061 mo
232.411 214.061 li
232.411 219.292 li
227.203 219.292 li
227.203 214.061 li
cp
@
.45887 lw
14.3 ml
39.6401 11.5889 mo
40.751 18.8198 li
42.5278 30.5898 li
43.416 36.1382 li
44.3047 41.3511 li
45.1929 45.7227 li
46.9697 54.1304 li
47.6367 57.9976 li
48.5249 61.6968 li
49.1909 64.8921 li
50.0791 68.0874 li
50.7451 71.2813 li
51.4111 74.1401 li
52.0781 76.6621 li
52.9668 79.353 li
54.2998 84.0605 li
54.9648 86.2471 li
55.187 87.4243 li
55.6318 88.4331 li
55.9141 87.0073 li
56.2979 88.6006 li
56.52 89.4414 li
56.9639 90.2822 li
57.4082 91.9634 li
58.7402 95.3271 li
59.4077 96.8398 li
59.8511 98.3535 li
60.5171 99.8672 li
60.9619 101.212 li
61.6279 102.557 li
62.0728 103.902 li
62.7388 105.248 li
63.1821 106.425 li
63.8491 107.602 li
64.7378 109.956 li
65.4038 110.964 li
65.8481 112.142 li
66.292 113.151 li
66.958 114.159 li
67.8462 116.177 li
68.291 117.018 li
68.7349 118.026 li
71.8447 123.913 li
72.7329 125.257 li
73.1777 126.098 li
73.6211 126.771 li
73.8438 127.443 li
76.064 130.806 li
76.731 131.983 li
77.1748 132.656 li
77.8418 133.833 li
81.6162 139.549 li
82.2832 140.391 li
82.9492 141.399 li
85.6147 144.762 li
86.0591 145.436 li
86.7251 146.276 li
87.1689 146.95 li
87.835 147.622 li
88.502 148.461 li
88.9458 149.135 li
89.6128 149.807 li
90.2788 150.649 li
90.9448 151.321 li
91.3892 151.993 li
92.0552 152.498 li
92.499 153.17 li
93.832 154.852 li
94.498 155.356 li
95.165 156.03 li
95.8311 156.87 li
96.4971 157.542 li
100.118 160.877 li
101.072 161.194 li
101.549 161.75 li
103.934 163.81 li
106.955 166.188 li
113.235 171.26 li
115.819 173.18 li
117.818 174.694 li
118.707 175.198 li
119.373 175.702 li
120.262 176.206 li
120.928 176.71 li
121.815 177.215 li
125.814 179.738 li
126.48 180.243 li
127.369 180.747 li
128.924 181.588 li
130.479 182.428 li
131.145 182.933 li
133.587 184.278 li
134.477 184.782 li
136.03 185.623 li
137.585 186.463 li
139.141 187.304 li
140.916 188.145 li
143.359 189.322 li
144.914 190.163 li
147.357 191.34 li
150.021 192.517 li
152.466 193.694 li
156.02 195.207 li
159.572 196.72 li
177.341 203.615 li
178.229 203.783 li
180.895 204.792 li
181.782 204.96 li
185.336 206.305 li
186.225 206.474 li
188.001 207.146 li
188.89 207.314 li
190.666 207.987 li
191.555 208.155 li
192.442 208.491 li
193.331 208.66 li
195.107 209.333 li
195.996 209.5 li
196.885 209.836 li
197.772 210.004 li
198.661 210.34 li
199.55 210.508 li
200.439 210.845 li
201.327 211.014 li
202.215 211.349 li
203.104 211.518 li
203.992 211.854 li
205.77 212.191 li
206.656 212.527 li
207.546 212.695 li
208.435 213.032 li
209.322 213.2 li
210.211 213.536 li
211.987 213.872 li
212.876 214.208 li
214.652 214.544 li
215.541 214.88 li
218.206 215.385 li
219.095 215.721 li
220.871 216.058 li
221.76 216.394 li
224.425 216.899 li
225.313 217.235 li
228.866 217.907 li
229.755 218.244 li
233.31 218.917 li
234.197 219.253 li
242.192 220.766 li
243.081 221.102 li
255.519 223.457 li
255.963 223.625 li
.835938 .71875 .71875 .929688 cmyk
@
41.6035 4.49658 mo
41.9219 6.55762 li
42.9556 15.1973 li
43.6304 19.8345 li
44.6641 26.0166 li
45.5381 31.2476 li
46.1353 34.854 li
47.1289 40.8379 li
48.0029 45.5146 li
48.8774 49.3979 li
49.5146 52.8853 li
50.4678 56.8481 li
50.9443 59.7021 li
51.5806 62.8721 li
53.0117 68.6582 li
53.6475 70.5605 li
54.2837 73.1763 li
54.7612 75.395 li
55.4766 77.2183 li
55.4463 74.1836 li
55.7949 76.0298 li
56.4312 78.645 li
58.8154 86.0166 li
60.0083 89.3457 li
61.2002 92.4355 li
62.1548 95.5269 li
63.1094 97.9053 li
64.7788 101.79 li
65.7334 104.088 li
66.9248 106.862 li
69.0723 111.458 li
70.8208 114.866 li
72.1719 117.482 li
73.6685 120.216 li
74.7158 122.397 li
75.7495 124.458 li
77.1016 126.835 li
78.3735 128.817 li
79.8838 131.353 li
80.9185 133.018 li
82.8252 135.791 li
84.5752 138.327 li
86.562 141.102 li
88.2314 143.321 li
90.1123 145.601 li
91.2231 146.956 li
93.7178 150.295 li
97.4146 154.616 li
100.118 157.549 li
101.47 158.42 li
102.86 159.966 li
103.854 160.797 li
105.207 161.987 li
106.976 163.381 li
110.096 165.752 li
110.778 166.396 li
112.111 167.412 li
112.777 167.771 li
113.753 168.684 li
121 173.864 li
124.555 176.233 li
126.999 177.756 li
128.554 178.602 li
129.889 179.618 li
131.666 180.633 li
132.332 181.141 li
133.222 181.479 li
133.888 181.987 li
135.665 183.002 li
136.332 183.51 li
137.221 183.848 li
137.888 184.357 li
138.776 184.695 li
139.442 185.203 li
140.332 185.541 li
140.998 186.049 li
141.888 186.387 li
142.775 186.895 li
143.665 187.233 li
144.331 187.742 li
145.221 188.08 li
145.888 188.587 li
147.665 189.264 li
148.331 189.771 li
149.221 190.111 li
149.887 190.618 li
152.554 191.633 li
153.22 192.142 li
154.998 192.819 li
155.664 193.326 li
156.553 193.495 li
157.22 194.002 li
160.775 195.357 li
161.664 195.864 li
165.219 197.218 li
166.108 197.726 li
180.33 203.142 li
181.219 203.311 li
183.885 204.326 li
184.774 204.496 li
188.329 205.85 li
189.218 206.018 li
190.995 206.696 li
191.885 206.865 li
193.662 207.542 li
194.552 207.71 li
196.33 208.388 li
197.218 208.556 li
198.107 208.896 li
198.996 209.065 li
200.773 209.742 li
201.663 209.911 li
202.551 210.25 li
203.439 210.418 li
204.329 210.757 li
206.106 211.095 li
206.995 211.434 li
207.885 211.604 li
208.772 211.941 li
209.662 212.111 li
210.551 212.45 li
211.439 212.619 li
212.328 212.957 li
214.105 213.295 li
214.995 213.633 li
216.772 213.972 li
217.661 214.311 li
219.439 214.649 li
220.328 214.988 li
222.106 215.326 li
222.994 215.665 li
224.772 216.003 li
225.661 216.341 li
229.217 217.018 li
230.105 217.357 li
233.661 218.034 li
234.549 218.373 li
238.104 219.049 li
238.994 219.388 li
248.771 221.25 li
249.66 221.588 li
255.882 222.773 li
.753906 .640625 .636719 .695312 cmyk
@
.611831 lw
40.4907 7.11279 mo
41.3799 13.332 li
42.2705 20.0552 li
43.1597 26.2734 li
44.0498 31.8198 li
44.9395 36.8623 li
46.7192 45.938 li
47.3862 50.1406 li
48.2754 54.1743 li
48.9434 57.7041 li
49.833 61.2339 li
50.5 64.5957 li
51.168 67.6211 li
51.835 70.3096 li
52.7251 73.335 li
53.3921 75.8564 li
54.0596 78.5459 li
54.7275 80.731 li
54.9497 81.9067 li
55.3945 83.083 li
55.6167 82.0757 li
56.0615 83.083 li
56.2837 84.0928 li
56.7285 85.1011 li
57.1743 86.7813 li
57.8413 88.6294 li
59.1763 91.9912 li
59.6206 93.5044 li
60.2881 95.1855 li
60.7324 96.5293 li
61.4004 98.042 li
61.8452 99.5547 li
62.5122 100.9 li
62.957 102.245 li
63.625 103.421 li
64.5142 105.774 li
65.1821 106.951 li
65.627 108.127 li
66.0718 109.135 li
66.7388 110.313 li
68.5186 114.346 li
68.9629 115.186 li
69.4077 116.195 li
69.8535 117.035 li
70.2983 118.043 li
70.7427 118.716 li
72.0776 121.237 li
72.5225 121.91 li
73.4131 123.59 li
73.6343 124.263 li
74.5244 125.607 li
74.9692 126.448 li
75.8594 127.792 li
76.5269 128.969 li
76.9712 129.641 li
77.1938 130.313 li
78.083 131.49 li
78.751 132.666 li
81.8647 137.373 li
82.5327 138.212 li
83.1997 139.221 li
83.8667 140.061 li
84.9795 141.743 li
86.3135 143.423 li
86.7593 144.263 li
87.4263 144.936 li
88.0933 145.777 li
88.5391 146.449 li
89.2061 147.121 li
90.0952 148.465 li
90.7632 149.137 li
91.208 149.809 li
91.875 150.314 li
92.3198 150.987 li
92.9878 151.827 li
93.4326 152.5 li
94.0996 153.004 li
94.7676 153.844 li
95.4346 154.516 li
95.8794 155.188 li
97.8813 157.206 li
99.8833 159.222 li
101.227 159.887 li
102.775 161.407 li
104.777 163.256 li
106.112 164.264 li
108.549 166.231 li
117.012 172.668 li
118.735 173.846 li
120.964 175.352 li
123.605 176.889 li
125.83 178.234 li
127.729 179.477 li
130.119 181.012 li
132.344 182.357 li
135.03 183.929 li
139.587 186.376 li
143.726 188.438 li
146.113 189.866 li
148.376 190.821 li
150.823 191.998 li
152.381 192.669 li
154.827 193.846 li
158.387 195.359 li
159.944 196.031 li
167.457 199.001 li
179.541 203.678 li
184.635 205.276 li
188.194 206.452 li
190.863 207.292 li
193.532 208.133 li
195.313 208.637 li
197.982 209.477 li
199.761 209.981 li
201.541 210.486 li
203.32 210.99 li
205.989 211.663 li
207.77 212.167 li
208.659 212.502 li
211.328 213.175 li
213.998 213.847 li
216.668 214.52 li
220.227 215.36 li
222.896 216.032 li
226.455 216.873 li
231.794 218.05 li
235.353 218.889 li
245.141 220.907 li
253.954 222.701 li
256.04 223.092 li
.605469 .5 .5 .335938 cmyk
@
73.6733 243.486 mo
74.1299 244.039 74.6904 244.316 75.3555 244.316 cv
76.0063 244.316 76.5625 244.046 77.0244 243.507 cv
77.4863 242.969 77.7173 242.107 77.7173 240.922 cv
77.7173 239.723 77.4834 238.857 77.0161 238.324 cv
76.5488 237.791 75.9956 237.524 75.3555 237.524 cv
74.6943 237.524 74.1343 237.8 73.6763 238.353 cv
73.2178 238.906 72.9888 239.762 72.9888 240.922 cv
72.9888 242.079 73.2168 242.933 73.6733 243.486 cv
cp
72.8486 238.098 mo
73.5273 237.451 74.3618 237.126 75.353 237.126 cv
76.3296 237.126 77.1587 237.447 77.8413 238.087 cv
78.5913 238.792 78.9668 239.738 78.9668 240.922 cv
78.9668 241.86 78.728 242.653 78.251 243.3 cv
77.7344 243.999 77.0029 244.439 76.0557 244.622 cv
76.5005 245.26 77.0386 245.713 77.6699 245.981 cv
78.0249 246.131 78.5039 246.242 79.1069 246.313 cv
79.1069 246.517 li
78.6548 246.517 li
78.0591 246.517 77.5303 246.468 77.0693 246.372 cv
76.6084 246.275 76.1895 246.128 75.8125 245.931 cv
75.4355 245.739 75.0864 245.47 74.7656 245.126 cv
74.4443 244.783 74.2656 244.602 74.23 244.583 cv
74.0898 244.52 li
73.4785 244.237 73.0063 243.915 72.6719 243.553 cv
72.0498 242.884 71.7393 242.006 71.7393 240.922 cv
71.7393 239.749 72.1089 238.807 72.8486 238.098 cv
cp
.835938 .71875 .71875 .929688 cmyk
f
84.686 237.331 mo
85.1064 237.449 85.3413 237.507 85.3916 237.507 cv
85.4956 237.507 85.5947 237.479 85.688 237.421 cv
85.7813 237.365 85.8457 237.275 85.8818 237.153 cv
86.1133 237.153 li
86.2158 239.623 li
85.9624 239.623 li
85.8154 239.132 85.6235 238.737 85.3862 238.436 cv
84.9341 237.871 84.3252 237.588 83.5605 237.588 cv
82.7886 237.588 82.1577 237.892 81.6675 238.5 cv
81.1772 239.109 80.9326 239.947 80.9326 241.013 cv
80.9326 241.995 81.1899 242.777 81.7051 243.363 cv
82.2202 243.948 82.873 244.241 83.6631 244.241 cv
84.2339 244.241 84.7598 244.104 85.2407 243.833 cv
85.5176 243.678 85.8208 243.446 86.1509 243.134 cv
86.356 243.338 li
86.1113 243.646 85.8081 243.917 85.4458 244.149 cv
84.8281 244.542 84.1582 244.74 83.4365 244.74 cv
82.252 244.74 81.311 244.362 80.6147 243.607 cv
79.9722 242.909 79.6509 242.038 79.6509 240.992 cv
79.6509 239.921 79.9897 239.023 80.6685 238.296 cv
81.3828 237.535 82.313 237.153 83.4585 237.153 cv
83.8569 237.153 84.2661 237.212 84.686 237.331 cv
cp
f
89.1323 244.063 mo
89.2202 244.121 89.4023 244.149 89.6787 244.149 cv
90.5405 244.149 91.2495 243.979 91.8062 243.638 cv
92.6606 243.116 93.0879 242.222 93.0879 240.958 cv
93.0879 239.829 92.7358 238.98 92.0322 238.41 cv
91.4292 237.923 90.6304 237.679 89.6357 237.679 cv
89.3882 237.679 89.2202 237.707 89.1323 237.76 cv
89.0439 237.814 89.0005 237.932 89.0005 238.115 cv
89.0005 243.708 li
89.0005 243.887 89.0439 244.005 89.1323 244.063 cv
cp
86.9106 244.353 mo
87.3125 244.31 87.5747 244.239 87.6968 244.137 cv
87.8188 244.036 87.8799 243.778 87.8799 243.365 cv
87.8799 238.474 li
87.8799 238.073 87.8208 237.815 87.7021 237.701 cv
87.584 237.586 87.3198 237.515 86.9106 237.486 cv
86.9106 237.282 li
89.8833 237.282 li
90.8853 237.282 91.7324 237.447 92.4253 237.776 cv
93.6748 238.367 94.2998 239.422 94.2998 240.944 cv
94.2998 241.492 94.1875 242.012 93.9629 242.506 cv
93.7388 243 93.4004 243.417 92.9478 243.757 cv
92.6606 243.972 92.3628 244.135 92.0537 244.246 cv
91.4902 244.454 90.7974 244.557 89.9751 244.557 cv
86.9106 244.557 li
86.9106 244.353 li
cp
f
110.505 241.526 mo
110.428 240.975 110.306 240.118 110.02 239.656 cv
109.843 239.37 109.545 239.083 109.225 238.984 cv
108.574 238.797 108.375 238.984 108.133 239.292 cv
107.857 239.644 107.725 240.118 107.647 240.701 cv
107.57 241.305 107.614 241.921 107.725 242.538 cv
107.78 242.857 107.89 243.208 108.155 243.473 cv
108.397 243.715 108.541 243.781 108.839 243.803 cv
109.026 243.814 109.28 243.715 109.523 243.506 cv
109.744 243.319 110.042 242.78 110.174 242.428 cv
110.505 241.526 li
cp
112.49 238.622 mo
111.222 242.109 li
111.31 242.637 111.464 242.945 111.674 243.154 cv
111.784 243.252 112.071 243.539 112.413 243.198 cv
112.645 242.967 112.656 242.615 112.678 242.472 cv
112.877 242.472 li
112.854 243.121 li
112.844 243.33 112.733 243.759 112.436 244.001 cv
112.138 244.243 111.895 244.155 111.696 243.968 cv
111.432 243.715 111.255 243.33 110.99 242.615 cv
110.803 242.934 110.56 243.693 109.578 244.012 cv
109.07 244.177 108.53 244.298 107.802 243.979 cv
107.394 243.792 107.085 243.528 106.864 243.154 cv
106.577 242.659 106.356 241.921 106.522 240.69 cv
106.632 239.886 106.93 239.314 107.725 238.775 cv
108.066 238.544 108.717 238.423 109.181 238.5 cv
109.699 238.588 110.119 238.94 110.373 239.358 cv
110.582 239.71 110.736 240.151 110.792 240.58 cv
110.813 240.58 li
111.52 238.622 li
112.49 238.622 li
cp
f
121.689 246.081 mo
121.458 246.102 120.223 245.057 119.682 244.023 cv
119.284 243.264 119.075 242.329 119.075 241.328 cv
119.075 240.327 119.284 239.391 119.682 238.632 cv
120.223 237.598 121.458 236.553 121.689 236.575 cv
121.8 236.762 li
120.509 237.796 120.398 238.666 120.256 239.149 cv
120.067 239.754 120.002 240.492 120.002 241.328 cv
120.002 242.164 120.067 242.901 120.256 243.506 cv
120.398 243.99 120.509 244.859 121.8 245.893 cv
121.689 246.081 li
cp
f
124.689 236.575 mo
127.271 242.186 li
129.742 236.575 li
131.927 236.575 li
131.927 236.773 li
131.606 236.773 130.956 236.63 130.956 237.411 cv
130.956 243.077 li
130.956 243.682 131.342 243.781 131.948 243.781 cv
131.948 243.979 li
128.815 243.979 li
128.815 243.781 li
129.422 243.781 129.809 243.682 129.809 243.077 cv
129.809 237.686 li
127.105 243.979 li
126.907 243.979 li
124.038 238.005 li
124.038 243.077 li
124.038 243.594 124.469 243.781 125.031 243.781 cv
125.031 243.979 li
122.505 243.979 li
122.505 243.781 li
123.067 243.781 123.498 243.594 123.498 243.077 cv
123.498 237.598 li
123.498 236.872 123.344 236.839 122.472 236.773 cv
122.472 236.575 li
124.689 236.575 li
cp
f
137.815 245.893 mo
139.106 244.859 139.217 243.99 139.359 243.506 cv
139.548 242.901 139.613 242.164 139.613 241.328 cv
139.613 240.492 139.548 239.754 139.359 239.149 cv
139.217 238.666 139.106 237.796 137.815 236.762 cv
137.926 236.575 li
138.157 236.553 139.393 237.598 139.934 238.632 cv
140.331 239.391 140.54 240.327 140.54 241.328 cv
140.54 242.329 140.331 243.264 139.934 244.023 cv
139.393 245.057 138.157 246.102 137.926 246.081 cv
137.815 245.893 li
cp
f
149.839 242.428 mo
144.036 242.428 li
144.036 241.823 li
149.839 241.823 li
149.839 242.428 li
cp
149.839 240.293 mo
144.036 240.293 li
144.036 239.688 li
149.839 239.688 li
149.839 240.293 li
cp
f
154.416 242.956 mo
154.637 243.451 155.078 243.759 155.453 243.759 cv
155.828 243.759 156.27 243.451 156.49 242.967 cv
157.152 241.493 156.888 238.17 156.49 237.51 cv
156.182 237.026 155.784 236.85 155.453 236.85 cv
155.122 236.85 154.726 237.026 154.416 237.51 cv
154.02 238.17 153.755 241.493 154.416 242.956 cv
cp
155.453 236.443 mo
156.071 236.443 156.645 236.696 156.998 237.114 cv
158.079 238.457 158.344 241.449 157.086 243.297 cv
156.667 243.913 156.049 244.167 155.453 244.167 cv
154.857 244.167 154.24 243.913 153.82 243.297 cv
152.563 241.449 152.828 238.457 153.92 237.103 cv
154.262 236.696 154.836 236.443 155.453 236.443 cv
cp
f
159.004 243.55 mo
159.004 243.208 159.28 242.934 159.622 242.934 cv
159.964 242.934 160.24 243.208 160.24 243.55 cv
160.24 243.891 159.964 244.167 159.622 244.167 cv
159.28 244.167 159.004 243.891 159.004 243.55 cv
cp
f
164.277 242.989 mo
164.277 243.77 165.16 243.781 165.304 243.781 cv
165.304 243.979 li
162.325 243.979 li
162.325 243.781 li
162.468 243.781 163.351 243.77 163.351 242.989 cv
163.351 237.774 li
163.351 237.554 163.229 237.411 162.921 237.521 cv
162.292 237.752 li
162.292 237.554 li
164.079 236.575 li
164.277 236.575 li
164.277 242.989 li
cp
f
169.792 242.989 mo
169.792 243.77 170.675 243.781 170.818 243.781 cv
170.818 243.979 li
167.84 243.979 li
167.84 243.781 li
167.982 243.781 168.865 243.77 168.865 242.989 cv
168.865 237.774 li
168.865 237.554 168.744 237.411 168.436 237.521 cv
167.807 237.752 li
167.807 237.554 li
169.594 236.575 li
169.792 236.575 li
169.792 242.989 li
cp
f
174.865 239.612 mo
175.098 239.491 175.34 239.249 175.517 239.05 cv
175.825 238.698 176.289 237.565 175.396 237.015 cv
175.02 236.784 174.347 236.806 174.027 237.015 cv
173.663 237.246 173.432 237.665 173.542 238.148 cv
173.607 238.445 173.905 238.973 174.369 239.282 cv
174.865 239.612 li
cp
174.413 240.546 mo
173.861 240.811 173.52 241.526 173.465 241.965 cv
173.398 242.494 173.641 243.473 174.402 243.715 cv
174.965 243.902 176.223 243.726 176.023 242.318 cv
175.936 241.647 175.483 241.294 175.285 241.163 cv
174.413 240.546 li
cp
173.476 239.677 mo
172.99 239.27 172.328 238.027 173.155 237.07 cv
173.972 236.135 175.958 236.3 176.51 237.202 cv
176.906 237.851 176.631 238.599 176.477 238.819 cv
176.167 239.249 175.892 239.535 175.229 239.909 cv
175.494 240.062 175.814 240.337 176.167 240.678 cv
177.105 241.591 176.995 242.669 176.619 243.297 cv
176.046 244.243 174.094 244.617 173.034 243.44 cv
172.395 242.736 172.648 241.867 172.869 241.47 cv
173.232 240.789 173.553 240.569 174.016 240.239 cv
173.476 239.677 li
cp
f
180.832 237.796 mo
178.207 241.459 li
180.832 241.459 li
180.832 237.796 li
cp
182.719 242.23 mo
181.759 242.23 li
181.759 243.979 li
180.832 243.979 li
180.832 242.23 li
177.722 242.23 li
177.722 241.449 li
181.208 236.443 li
181.759 236.443 li
181.759 241.459 li
182.719 241.459 li
182.719 242.23 li
cp
f
185.928 243.979 mo
185.928 243.374 li
191.764 243.374 li
191.764 243.979 li
185.928 243.979 li
cp
188.542 239.491 mo
188.542 236.883 li
189.149 236.883 li
189.149 239.491 li
191.764 239.491 li
191.764 240.095 li
189.149 240.095 li
189.149 242.703 li
188.542 242.703 li
188.542 240.095 li
185.928 240.095 li
185.928 239.491 li
188.542 239.491 li
cp
f
196.318 242.956 mo
196.539 243.451 196.98 243.759 197.355 243.759 cv
197.73 243.759 198.172 243.451 198.393 242.967 cv
199.055 241.493 198.79 238.17 198.393 237.51 cv
198.084 237.026 197.687 236.85 197.355 236.85 cv
197.024 236.85 196.628 237.026 196.318 237.51 cv
195.922 238.17 195.657 241.493 196.318 242.956 cv
cp
197.355 236.443 mo
197.974 236.443 198.547 236.696 198.9 237.114 cv
199.981 238.457 200.246 241.449 198.988 243.297 cv
198.569 243.913 197.951 244.167 197.355 244.167 cv
196.76 244.167 196.143 243.913 195.723 243.297 cv
194.466 241.449 194.73 238.457 195.822 237.103 cv
196.164 236.696 196.738 236.443 197.355 236.443 cv
cp
f
200.906 243.55 mo
200.906 243.208 201.183 242.934 201.524 242.934 cv
201.866 242.934 202.143 243.208 202.143 243.55 cv
202.143 243.891 201.866 244.167 201.524 244.167 cv
201.183 244.167 200.906 243.891 200.906 243.55 cv
cp
f
204.591 242.956 mo
204.812 243.451 205.253 243.759 205.628 243.759 cv
206.003 243.759 206.444 243.451 206.665 242.967 cv
207.327 241.493 207.063 238.17 206.665 237.51 cv
206.356 237.026 205.959 236.85 205.628 236.85 cv
205.297 236.85 204.9 237.026 204.591 237.51 cv
204.194 238.17 203.93 241.493 204.591 242.956 cv
cp
205.628 236.443 mo
206.246 236.443 206.819 236.696 207.173 237.114 cv
208.254 238.457 208.519 241.449 207.261 243.297 cv
206.842 243.913 206.224 244.167 205.628 244.167 cv
205.032 244.167 204.415 243.913 203.995 243.297 cv
202.738 241.449 203.003 238.457 204.095 237.103 cv
204.437 236.696 205.011 236.443 205.628 236.443 cv
cp
f
210.105 242.956 mo
210.326 243.451 210.768 243.759 211.143 243.759 cv
211.518 243.759 211.959 243.451 212.18 242.967 cv
212.842 241.493 212.577 238.17 212.18 237.51 cv
211.871 237.026 211.474 236.85 211.143 236.85 cv
210.812 236.85 210.415 237.026 210.105 237.51 cv
209.709 238.17 209.444 241.493 210.105 242.956 cv
cp
211.143 236.443 mo
211.761 236.443 212.334 236.696 212.688 237.114 cv
213.769 238.457 214.033 241.449 212.775 243.297 cv
212.356 243.913 211.738 244.167 211.143 244.167 cv
210.547 244.167 209.93 243.913 209.51 243.297 cv
208.253 241.449 208.518 238.457 209.609 237.103 cv
209.951 236.696 210.525 236.443 211.143 236.443 cv
cp
f
215.62 242.956 mo
215.841 243.451 216.282 243.759 216.657 243.759 cv
217.032 243.759 217.474 243.451 217.694 242.967 cv
218.356 241.493 218.092 238.17 217.694 237.51 cv
217.386 237.026 216.988 236.85 216.657 236.85 cv
216.326 236.85 215.93 237.026 215.62 237.51 cv
215.224 238.17 214.959 241.493 215.62 242.956 cv
cp
216.657 236.443 mo
217.275 236.443 217.849 236.696 218.202 237.114 cv
219.283 238.457 219.548 241.449 218.29 243.297 cv
217.871 243.913 217.253 244.167 216.657 244.167 cv
216.062 244.167 215.444 243.913 215.024 243.297 cv
213.768 241.449 214.032 238.457 215.124 237.103 cv
215.466 236.696 216.04 236.443 216.657 236.443 cv
cp
f
221.378 244.155 mo
223.529 237.565 li
221.024 237.565 li
220.407 237.565 220.22 237.995 219.955 238.434 cv
219.712 238.335 li
220.385 236.575 li
224.39 236.575 li
224.39 236.927 li
222.028 244.155 li
221.378 244.155 li
cp
f
114.57 244.716 mo
114.709 244.716 li
114.772 245.034 114.859 245.277 114.968 245.447 cv
115.162 245.759 115.448 245.915 115.824 245.915 cv
116.033 245.915 116.198 245.857 116.319 245.742 cv
116.44 245.626 116.501 245.476 116.501 245.292 cv
116.501 245.175 116.467 245.063 116.396 244.955 cv
116.327 244.846 116.204 244.74 116.028 244.637 cv
115.559 244.37 li
115.216 244.186 114.963 244 114.801 243.814 cv
114.639 243.627 114.558 243.408 114.558 243.155 cv
114.558 242.842 114.669 242.586 114.893 242.386 cv
115.116 242.186 115.396 242.085 115.734 242.085 cv
115.883 242.085 116.045 242.114 116.223 242.169 cv
116.4 242.225 116.5 242.252 116.522 242.252 cv
116.572 242.252 116.608 242.246 116.631 242.232 cv
116.653 242.217 116.673 242.196 116.689 242.165 cv
116.79 242.165 li
116.819 243.33 li
116.689 243.33 li
116.634 243.06 116.559 242.85 116.464 242.7 cv
116.29 242.421 116.041 242.282 115.714 242.282 cv
115.519 242.282 115.364 242.341 115.253 242.461 cv
115.142 242.581 115.086 242.721 115.086 242.883 cv
115.086 243.139 115.278 243.368 115.663 243.568 cv
116.217 243.865 li
116.812 244.187 117.108 244.563 117.108 244.992 cv
117.108 245.321 116.985 245.589 116.738 245.798 cv
116.492 246.006 116.169 246.111 115.771 246.111 cv
115.604 246.111 115.414 246.083 115.202 246.028 cv
114.99 245.972 114.864 245.944 114.825 245.944 cv
114.792 245.944 114.763 245.956 114.737 245.98 cv
114.713 246.003 114.693 246.032 114.679 246.065 cv
114.57 246.065 li
114.57 244.716 li
cp
f
132.938 245.77 mo
136.163 241.281 li
134.469 241.281 li
134.042 241.281 133.739 241.387 133.561 241.6 cv
133.452 241.726 133.367 241.945 133.305 242.254 cv
133.115 242.254 li
133.262 241.001 li
137.144 241.001 li
137.144 241.084 li
133.919 245.573 li
135.827 245.573 li
136.26 245.573 136.575 245.471 136.773 245.269 cv
136.897 245.14 137.008 244.905 137.107 244.563 cv
137.279 244.563 li
137.097 245.852 li
132.938 245.852 li
132.938 245.77 li
cp
f
.45887 lw
53.127 238.398 mo
68.4463 238.398 li
0 0 0 1 cmyk
@
.611831 lw
11.5 ml
53.127 240.841 mo
68.4463 240.841 li
@
.45887 lw
14.3 ml
53.127 243.589 mo
68.4463 243.589 li
@
.611831 lw
1 lj
123.26 168.719 mo
123.26 161.494 li
.769531 .238281 .976562 .136719 cmyk
@
121.421 161.716 mo
125.098 161.716 li
@
123.26 169.479 mo
123.26 180.028 li
@
121.421 179.934 mo
125.098 179.934 li
@
123.261 168.368 mo
124.18 170.201 li
125.1 172.032 li
123.261 172.032 li
121.423 172.032 li
122.342 170.201 li
123.261 168.368 li
0 0 0 0 cmyk
ef
123.26 168.368 mo
124.18 170.2 li
125.098 172.033 li
123.26 172.033 li
121.421 172.033 li
122.341 170.2 li
123.26 168.368 li
cp
.769531 .238281 .976562 .136719 cmyk
@
200.865 209.83 mo
200.865 200.232 li
@
199.026 200.239 mo
202.703 200.239 li
@
200.865 210.286 mo
200.865 222.774 li
@
199.026 222.641 mo
202.703 222.641 li
@
200.867 208.477 mo
201.786 210.309 li
202.705 212.142 li
200.867 212.142 li
199.027 212.142 li
199.947 210.309 li
200.867 208.477 li
0 0 0 0 cmyk
ef
200.865 208.477 mo
201.784 210.31 li
202.703 212.143 li
200.865 212.143 li
199.026 212.143 li
199.946 210.31 li
200.865 208.477 li
cp
.769531 .238281 .976562 .136719 cmyk
@
158.815 194.412 mo
158.815 189.231 li
@
156.977 189.532 mo
160.653 189.532 li
@
158.815 196.243 mo
158.815 199.064 li
@
156.977 199.19 mo
160.653 199.19 li
@
158.815 192.731 mo
159.734 194.563 li
160.654 196.396 li
158.815 196.396 li
156.978 196.396 li
157.896 194.563 li
158.815 192.731 li
0 0 0 0 cmyk
ef
158.815 192.731 mo
159.733 194.564 li
160.653 196.396 li
158.815 196.396 li
156.977 196.396 li
157.896 194.564 li
158.815 192.731 li
cp
.769531 .238281 .976562 .136719 cmyk
@
171.288 197.886 mo
171.288 194.753 li
@
169.45 194.973 mo
173.127 194.973 li
@
171.288 199.979 mo
171.288 203.275 li
@
169.45 203.371 mo
173.127 203.371 li
@
171.29 196.49 mo
172.209 198.323 li
173.128 200.156 li
171.29 200.156 li
169.452 200.156 li
170.371 198.323 li
171.29 196.49 li
0 0 0 0 cmyk
ef
171.288 196.49 mo
172.208 198.322 li
173.127 200.156 li
171.288 200.156 li
169.45 200.156 li
170.37 198.322 li
171.288 196.49 li
cp
.769531 .238281 .976562 .136719 cmyk
@
144.053 185.571 mo
144.053 181.364 li
@
142.215 181.574 mo
145.892 181.574 li
@
144.053 186.332 mo
144.053 193.299 li
@
142.215 193.28 mo
145.892 193.28 li
@
144.054 185.052 mo
144.973 186.885 li
145.893 188.718 li
144.054 188.718 li
142.216 188.718 li
143.135 186.885 li
144.054 185.052 li
0 0 0 0 cmyk
ef
144.053 185.052 mo
144.973 186.886 li
145.891 188.718 li
144.053 188.718 li
142.215 188.718 li
143.134 186.886 li
144.053 185.052 li
cp
.769531 .238281 .976562 .136719 cmyk
@
182.885 201.394 mo
182.73 196.893 li
@
181.046 197.136 mo
184.723 197.136 li
@
182.885 201.182 mo
182.885 209.165 li
@
181.046 208.939 mo
184.723 208.939 li
@
182.886 199.86 mo
183.805 201.693 li
184.725 203.526 li
182.886 203.526 li
181.048 203.526 li
181.967 201.693 li
182.886 199.86 li
0 0 0 0 cmyk
ef
182.885 199.86 mo
183.804 201.692 li
184.723 203.525 li
182.885 203.525 li
181.046 203.525 li
181.966 201.692 li
182.885 199.86 li
cp
.769531 .238281 .976562 .136719 cmyk
@
215.06 214.068 mo
215.079 209.862 li
0 .949219 .832031 0 cmyk
@
213.471 210.029 mo
216.668 210.029 li
@
213.624 215.155 mo
216.821 215.155 li
@
215.376 212.486 mo
215.376 215.082 li
@
216.755 212.499 mo
216.755 212.499 li
216.755 213.405 216.039 214.139 215.156 214.139 cv
214.273 214.139 213.558 213.405 213.558 212.499 cv
213.558 211.591 214.273 210.856 215.156 210.856 cv
216.039 210.856 216.755 211.591 216.755 212.499 cv
0 0 0 0 cmyk
ef
216.754 212.499 mo
216.754 212.499 li
216.754 213.405 216.038 214.14 215.155 214.14 cv
214.272 214.14 213.557 213.405 213.557 212.499 cv
213.557 211.592 214.272 210.856 215.155 210.856 cv
216.038 210.856 216.754 211.592 216.754 212.499 cv
cp
0 .949219 .832031 0 cmyk
@
216.093 215.234 mo
216.113 211.248 li
@
214.505 211.406 mo
217.701 211.406 li
@
214.657 216.263 mo
217.854 216.263 li
@
216.408 213.735 mo
216.408 216.196 li
@
217.789 213.747 mo
217.789 213.747 li
217.789 214.606 217.072 215.302 216.19 215.302 cv
215.308 215.302 214.592 214.606 214.592 213.747 cv
214.592 212.887 215.308 212.191 216.19 212.191 cv
217.072 212.191 217.789 212.887 217.789 213.747 cv
0 0 0 0 cmyk
ef
217.787 213.747 mo
217.787 213.747 li
217.787 214.606 217.071 215.303 216.189 215.303 cv
215.306 215.303 214.591 214.606 214.591 213.747 cv
214.591 212.887 215.306 212.19 216.189 212.19 cv
217.071 212.19 217.787 212.887 217.787 213.747 cv
cp
0 .949219 .832031 0 cmyk
@
117.113 176.684 mo
120.79 176.684 li
0 .5 1 0 cmyk
@
118.952 173.868 mo
118.952 171.319 li
@
117.113 171.991 mo
120.79 171.991 li
@
118.952 177.038 mo
118.952 175.532 li
@
117.114 176.196 mo
120.791 176.196 li
120.791 172.53 li
117.114 172.53 li
117.114 176.196 li
cp
0 0 0 0 cmyk
ef
1 lw
0 lj
10 ml
117.114 176.196 mo
120.791 176.196 li
120.791 172.53 li
117.114 172.53 li
117.114 176.196 li
cp
0 .5 1 0 cmyk
@
.611831 lw
1 lj
14.3 ml
117.113 172.53 mo
120.79 172.53 li
120.79 176.196 li
117.113 176.196 li
117.113 172.53 li
cp
@
120.179 173.141 mo
117.727 175.584 li
@
117.727 173.141 mo
120.179 175.584 li
@
39.457 3.52441 mo
256.957 3.52441 li
256.957 252.22 li
39.457 252.22 li
39.457 3.52441 li
cp
.835938 .71875 .71875 .929688 cmyk
@
39.7114 225.037 mo
42.1631 225.037 li
@
39.7114 169.565 mo
42.1631 169.565 li
@
39.7114 114.465 mo
41.8564 114.465 li
@
39.7114 236.195 mo
40.3242 236.195 li
@
39.7114 214.041 mo
40.3242 214.041 li
@
39.7114 203.043 mo
40.3242 203.043 li
@
39.7114 192.047 mo
40.3242 192.047 li
@
39.7114 181.051 mo
40.3242 181.051 li
@
39.7114 158.569 mo
40.3242 158.569 li
@
39.7114 147.573 mo
40.3242 147.573 li
@
39.7114 136.577 mo
40.3242 136.577 li
@
39.7114 125.582 mo
40.3242 125.582 li
@
39.7114 103.796 mo
40.3242 103.796 li
@
39.7114 91.9824 mo
40.3242 91.9824 li
@
39.7114 59.1577 mo
42.1631 59.1577 li
@
39.7114 81.1499 mo
40.3242 81.1499 li
@
39.7114 69.9902 mo
40.3242 69.9902 li
@
39.7114 47.8354 mo
40.3242 47.8354 li
@
39.7114 37.1226 mo
40.3242 37.1226 li
@
39.7114 26.1274 mo
40.3242 26.1274 li
@
39.7114 14.4775 mo
40.3242 14.4775 li
@
39.7114 247.18 mo
40.3242 247.18 li
@
62.293 89.4731 mo
65.9697 89.4731 li
.266453 1 1 .303075 cmyk
@
64.1318 105.954 mo
64.1318 89.2305 li
@
62.293 106.028 mo
65.9697 106.028 li
@
179.342 200.508 mo
179.342 201.978 li
0 .949219 .832031 0 cmyk
@
177.504 200.499 mo
181.181 200.499 li
@
179.342 204.216 mo
179.342 207.091 li
@
177.504 207.204 mo
181.181 207.204 li
@
181.182 203.948 mo
181.182 203.948 li
181.182 204.959 180.358 205.78 179.344 205.78 cv
178.328 205.78 177.505 204.959 177.505 203.948 cv
177.505 202.935 178.328 202.115 179.344 202.115 cv
180.358 202.115 181.182 202.935 181.182 203.948 cv
0 0 0 0 cmyk
ef
181.181 203.948 mo
181.181 203.948 li
181.181 204.959 180.357 205.78 179.342 205.78 cv
178.327 205.78 177.504 204.959 177.504 203.948 cv
177.504 202.935 178.327 202.115 179.342 202.115 cv
180.357 202.115 181.181 202.935 181.181 203.948 cv
cp
0 .949219 .832031 0 cmyk
@
22.9033 226.248 mo
23.0288 226.561 23.2192 226.718 23.4741 226.718 cv
23.7939 226.718 24.0093 226.428 24.1206 225.847 cv
24.1816 225.528 24.2119 225.057 24.2119 224.433 cv
24.2119 221.911 li
24.2119 221.018 24.1484 220.416 24.021 220.102 cv
23.8936 219.788 23.7075 219.631 23.4634 219.631 cv
23.2158 219.631 23.0273 219.79 22.8979 220.107 cv
22.7686 220.424 22.7041 221.026 22.7041 221.911 cv
22.7041 224.433 li
22.7114 225.33 22.7778 225.934 22.9033 226.248 cv
cp
21.853 220.168 mo
22.3198 219.595 22.855 219.309 23.458 219.309 cv
24.1548 219.309 24.7417 219.662 25.2192 220.368 cv
25.7041 221.091 25.9463 222 25.9463 223.097 cv
25.9463 224.39 25.6714 225.396 25.1221 226.117 cv
24.6592 226.721 24.106 227.024 23.4634 227.024 cv
23.0112 227.024 22.625 226.892 22.3057 226.626 cv
21.9858 226.362 21.7134 226.02 21.4868 225.6 cv
21.293 225.246 21.1567 224.839 21.0776 224.381 cv
21.0308 224.112 20.9951 223.725 20.9697 223.22 cv
20.9697 221.906 21.2642 220.888 21.853 220.168 cv
cp
.835938 .71875 .71875 .929688 cmyk
f
27.3813 225.438 mo
27.5625 225.257 27.7827 225.167 28.041 225.167 cv
28.2993 225.167 28.5195 225.257 28.7007 225.438 cv
28.8818 225.619 28.9727 225.837 28.9727 226.095 cv
28.9727 226.353 28.8818 226.573 28.7007 226.753 cv
28.5195 226.934 28.2993 227.024 28.041 227.024 cv
27.7827 227.024 27.5625 226.934 27.3813 226.753 cv
27.1997 226.573 27.1094 226.353 27.1094 226.095 cv
27.1094 225.837 27.1997 225.619 27.3813 225.438 cv
cp
f
29.7266 226.606 mo
30.2866 226.606 30.6455 226.53 30.8037 226.377 cv
30.9619 226.225 31.0405 225.936 31.0405 225.51 cv
31.0405 221.274 li
31.0405 221.002 31.0093 220.809 30.9463 220.694 cv
30.8838 220.58 30.7676 220.522 30.5991 220.522 cv
30.5093 220.522 30.3711 220.553 30.1846 220.614 cv
30.0659 220.65 29.9043 220.707 29.6997 220.786 cv
29.6997 220.506 li
32.4839 219.309 li
32.6777 219.309 li
32.6777 225.575 li
32.6777 225.976 32.7427 226.248 32.8716 226.391 cv
33.001 226.534 33.3315 226.606 33.8628 226.606 cv
33.8628 226.869 li
29.7266 226.869 li
29.7266 226.606 li
cp
f
22.9033 171.268 mo
23.0288 171.582 23.2192 171.739 23.4741 171.739 cv
23.7939 171.739 24.0093 171.448 24.1206 170.868 cv
24.1816 170.548 24.2119 170.077 24.2119 169.454 cv
24.2119 166.931 li
24.2119 166.039 24.1484 165.435 24.021 165.122 cv
23.8936 164.808 23.7075 164.651 23.4634 164.651 cv
23.2158 164.651 23.0273 164.809 22.8979 165.127 cv
22.7686 165.444 22.7041 166.045 22.7041 166.931 cv
22.7041 169.454 li
22.7114 170.349 22.7778 170.954 22.9033 171.268 cv
cp
21.853 165.188 mo
22.3198 164.616 22.855 164.329 23.458 164.329 cv
24.1548 164.329 24.7417 164.682 25.2192 165.387 cv
25.7041 166.111 25.9463 167.021 25.9463 168.117 cv
25.9463 169.41 25.6714 170.417 25.1221 171.136 cv
24.6592 171.742 24.106 172.044 23.4634 172.044 cv
23.0112 172.044 22.625 171.912 22.3057 171.647 cv
21.9858 171.381 21.7134 171.04 21.4868 170.621 cv
21.293 170.266 21.1567 169.86 21.0776 169.401 cv
21.0308 169.132 20.9951 168.746 20.9697 168.241 cv
20.9697 166.926 21.2642 165.909 21.853 165.188 cv
cp
f
27.3813 170.458 mo
27.5625 170.277 27.7827 170.186 28.041 170.186 cv
28.2993 170.186 28.5195 170.277 28.7007 170.458 cv
28.8818 170.639 28.9727 170.858 28.9727 171.116 cv
28.9727 171.374 28.8818 171.592 28.7007 171.774 cv
28.5195 171.954 28.2993 172.044 28.041 172.044 cv
27.7827 172.044 27.5625 171.954 27.3813 171.774 cv
27.1997 171.592 27.1094 171.374 27.1094 171.116 cv
27.1094 170.858 27.1997 170.639 27.3813 170.458 cv
cp
f
29.1772 171.636 mo
30.3516 170.37 31.1162 169.487 31.4717 168.989 cv
32.0171 168.238 32.29 167.572 32.29 166.993 cv
32.29 166.649 32.1851 166.327 31.9751 166.028 cv
31.7651 165.729 31.4395 165.581 30.9976 165.581 cv
30.6099 165.581 30.2832 165.714 30.0176 165.983 cv
29.8735 166.129 29.7461 166.327 29.6353 166.573 cv
29.3335 166.573 li
29.5776 165.811 29.915 165.247 30.3457 164.879 cv
30.7769 164.512 31.2617 164.329 31.8003 164.329 cv
32.3101 164.329 32.7729 164.505 33.1895 164.858 cv
33.606 165.21 33.8145 165.729 33.8145 166.413 cv
33.8145 166.77 33.7163 167.137 33.5205 167.512 cv
33.3252 167.889 32.9956 168.297 32.5322 168.737 cv
30.8516 170.336 li
30.8516 170.428 li
32.4189 170.428 li
32.9648 170.428 33.3213 170.383 33.4883 170.293 cv
33.6553 170.205 33.8232 169.965 33.9922 169.575 cv
34.2559 169.575 li
33.7603 171.889 li
29.1772 171.889 li
29.1772 171.636 li
cp
f
22.9033 116.288 mo
23.0288 116.602 23.2192 116.758 23.4741 116.758 cv
23.7939 116.758 24.0093 116.468 24.1206 115.887 cv
24.1816 115.568 24.2119 115.097 24.2119 114.473 cv
24.2119 111.951 li
24.2119 111.059 24.1484 110.455 24.021 110.142 cv
23.8936 109.828 23.7075 109.671 23.4634 109.671 cv
23.2158 109.671 23.0273 109.83 22.8979 110.147 cv
22.7686 110.464 22.7041 111.065 22.7041 111.951 cv
22.7041 114.473 li
22.7114 115.369 22.7778 115.974 22.9033 116.288 cv
cp
21.853 110.208 mo
22.3198 109.636 22.855 109.349 23.458 109.349 cv
24.1548 109.349 24.7417 109.702 25.2192 110.407 cv
25.7041 111.131 25.9463 112.041 25.9463 113.137 cv
25.9463 114.43 25.6714 115.437 25.1221 116.156 cv
24.6592 116.762 24.106 117.064 23.4634 117.064 cv
23.0112 117.064 22.625 116.932 22.3057 116.667 cv
21.9858 116.402 21.7134 116.06 21.4868 115.641 cv
21.293 115.286 21.1567 114.879 21.0776 114.421 cv
21.0308 114.152 20.9951 113.766 20.9697 113.26 cv
20.9697 111.946 21.2642 110.929 21.853 110.208 cv
cp
f
27.3813 115.478 mo
27.5625 115.297 27.7827 115.207 28.041 115.207 cv
28.2993 115.207 28.5195 115.297 28.7007 115.478 cv
28.8818 115.659 28.9727 115.878 28.9727 116.136 cv
28.9727 116.393 28.8818 116.613 28.7007 116.793 cv
28.5195 116.974 28.2993 117.064 28.041 117.064 cv
27.7827 117.064 27.5625 116.974 27.3813 116.793 cv
27.1997 116.613 27.1094 116.393 27.1094 116.136 cv
27.1094 115.878 27.1997 115.659 27.3813 115.478 cv
cp
f
30.9141 115.977 mo
31.2676 116.337 31.5596 116.517 31.7891 116.517 cv
32.1841 116.517 32.4668 116.383 32.6377 116.117 cv
32.8081 115.85 32.8936 115.547 32.8936 115.207 cv
32.8936 114.581 32.6294 114.068 32.1016 113.671 cv
31.8003 113.449 31.3228 113.222 30.6689 112.989 cv
30.6689 112.812 li
31.1143 112.658 31.4321 112.51 31.6226 112.366 cv
31.9492 112.12 32.1123 111.785 32.1123 111.362 cv
32.1123 110.997 32.002 110.719 31.7813 110.527 cv
31.5605 110.336 31.2793 110.24 30.9385 110.24 cv
30.6226 110.24 30.3369 110.355 30.082 110.584 cv
29.9385 110.713 29.7856 110.904 29.6245 111.158 cv
29.3926 111.029 li
29.5649 110.665 29.811 110.339 30.1304 110.052 cv
30.6401 109.594 31.2363 109.365 31.9185 109.365 cv
32.3887 109.365 32.7983 109.498 33.1465 109.762 cv
33.4946 110.027 33.687 110.373 33.7227 110.799 cv
33.7227 111.103 33.6553 111.374 33.521 111.612 cv
33.3862 111.85 33.168 112.046 32.8662 112.2 cv
32.8662 112.28 li
33.3081 112.456 33.6313 112.72 33.8359 113.072 cv
34.0405 113.425 34.1426 113.796 34.1426 114.187 cv
34.1426 114.974 33.8374 115.645 33.2271 116.2 cv
32.5918 116.783 31.7876 117.075 30.8145 117.075 cv
30.3403 117.075 29.9458 116.986 29.6299 116.807 cv
29.3135 116.628 29.1558 116.392 29.1558 116.098 cv
29.1558 115.94 29.2124 115.791 29.3252 115.649 cv
29.4385 115.508 29.6245 115.438 29.8828 115.438 cv
30.2168 115.438 30.5605 115.617 30.9141 115.977 cv
cp
f
22.9033 60.0864 mo
23.0288 60.3999 23.2192 60.5566 23.4741 60.5566 cv
23.7939 60.5566 24.0093 60.2661 24.1206 59.6855 cv
24.1816 59.3667 24.2119 58.895 24.2119 58.2715 cv
24.2119 55.7495 li
24.2119 54.8569 24.1484 54.2534 24.021 53.9399 cv
23.8936 53.6265 23.7075 53.4692 23.4634 53.4692 cv
23.2158 53.4692 23.0273 53.6279 22.8979 53.9453 cv
22.7686 54.2627 22.7041 54.8638 22.7041 55.7495 cv
22.7041 58.2715 li
22.7114 59.1675 22.7778 59.7725 22.9033 60.0864 cv
cp
21.853 54.0068 mo
22.3198 53.4341 22.855 53.1475 23.458 53.1475 cv
24.1548 53.1475 24.7417 53.5 25.2192 54.2056 cv
25.7041 54.9292 25.9463 55.8394 25.9463 56.9351 cv
25.9463 58.228 25.6714 59.2349 25.1221 59.9546 cv
24.6592 60.5601 24.106 60.8628 23.4634 60.8628 cv
23.0112 60.8628 22.625 60.73 22.3057 60.4653 cv
21.9858 60.2002 21.7134 59.8579 21.4868 59.439 cv
21.293 59.0845 21.1567 58.6777 21.0776 58.2192 cv
21.0308 57.9507 20.9951 57.564 20.9697 57.0586 cv
20.9697 55.7441 21.2642 54.7271 21.853 54.0068 cv
cp
f
27.3813 59.2764 mo
27.5625 59.0952 27.7827 59.0049 28.041 59.0049 cv
28.2993 59.0049 28.5195 59.0952 28.7007 59.2764 cv
28.8818 59.457 28.9727 59.6763 28.9727 59.9341 cv
28.9727 60.1914 28.8818 60.4111 28.7007 60.5918 cv
28.5195 60.7725 28.2993 60.8628 28.041 60.8628 cv
27.7827 60.8628 27.5625 60.7725 27.3813 60.5918 cv
27.1997 60.4111 27.1094 60.1914 27.1094 59.9341 cv
27.1094 59.6763 27.1997 59.457 27.3813 59.2764 cv
cp
f
31.9346 57.915 mo
31.9346 54.8643 li
31.8701 54.8643 li
29.7158 57.813 li
29.7158 57.915 li
31.9346 57.915 li
cp
29.2798 57.7241 mo
29.312 57.6758 29.4106 57.5352 29.5757 57.3022 cv
30.7231 55.6738 li
32.2041 53.7227 li
32.6509 53.1475 li
33.5288 53.1475 li
33.5288 57.915 li
34.2183 57.915 li
34.2183 59.1392 li
33.5288 59.1392 li
33.5288 60.707 li
31.9346 60.707 li
31.9346 59.1392 li
29.188 59.1392 li
29.188 57.8882 li
29.2168 57.8271 29.2471 57.7729 29.2798 57.7241 cv
cp
f
22.9033 6.93896 mo
23.0288 7.25244 23.2192 7.40918 23.4741 7.40918 cv
23.7939 7.40918 24.0093 7.11865 24.1206 6.53809 cv
24.1816 6.21924 24.2119 5.74756 24.2119 5.12402 cv
24.2119 2.60205 li
24.2119 1.70947 24.1484 1.10596 24.021 .79248 cv
23.8936 .479004 23.7075 .321777 23.4634 .321777 cv
23.2158 .321777 23.0273 .480469 22.8979 .797852 cv
22.7686 1.11523 22.7041 1.71631 22.7041 2.60205 cv
22.7041 5.12402 li
22.7114 6.02002 22.7778 6.625 22.9033 6.93896 cv
cp
21.853 .859375 mo
22.3198 .286621 22.855 0 23.458 0 cv
24.1548 0 24.7417 .352539 25.2192 1.05811 cv
25.7041 1.78174 25.9463 2.69189 25.9463 3.7876 cv
25.9463 5.08057 25.6714 6.0874 25.1221 6.80713 cv
24.6592 7.4126 24.106 7.71533 23.4634 7.71533 cv
23.0112 7.71533 22.625 7.58252 22.3057 7.31787 cv
21.9858 7.05273 21.7134 6.71045 21.4868 6.2915 cv
21.293 5.93701 21.1567 5.53027 21.0776 5.07178 cv
21.0308 4.80322 20.9951 4.4165 20.9697 3.91113 cv
20.9697 2.59668 21.2642 1.57959 21.853 .859375 cv
cp
f
27.3813 6.12891 mo
27.5625 5.94775 27.7827 5.85742 28.041 5.85742 cv
28.2993 5.85742 28.5195 5.94775 28.7007 6.12891 cv
28.8818 6.30957 28.9727 6.52881 28.9727 6.78662 cv
28.9727 7.04395 28.8818 7.26367 28.7007 7.44434 cv
28.5195 7.625 28.2993 7.71533 28.041 7.71533 cv
27.7827 7.71533 27.5625 7.625 27.3813 7.44434 cv
27.1997 7.26367 27.1094 7.04395 27.1094 6.78662 cv
27.1094 6.52881 27.1997 6.30957 27.3813 6.12891 cv
cp
f
29.4141 6.21191 mo
29.5361 6.08301 29.7017 6.01855 29.9097 6.01855 cv
30.1753 6.01855 30.5327 6.17871 30.9814 6.49902 cv
31.4302 6.81934 31.7783 6.97949 32.0264 6.97949 cv
32.3169 6.97949 32.5684 6.87793 32.7803 6.67383 cv
32.9922 6.46973 33.0981 6.19385 33.0981 5.84668 cv
33.0981 5.49268 32.9775 5.19189 32.7373 4.94482 cv
32.4966 4.69775 32.2256 4.50635 31.9238 4.37012 cv
31.6006 4.22363 31.2344 4.11621 30.8252 4.04834 cv
30.5596 4.00537 30.1343 3.96387 29.5488 3.9248 cv
30.6206 .128906 li
34.1699 .128906 li
33.6958 1.52979 li
30.6392 1.52979 li
30.3872 2.42139 li
31.2422 2.44629 31.9355 2.56982 32.4673 2.79199 cv
33.4658 3.20703 33.9648 3.94434 33.9648 5.00391 cv
33.9648 5.77686 33.667 6.41309 33.0713 6.9126 cv
32.4751 7.41211 31.7266 7.66162 30.8252 7.66162 cv
30.3691 7.66162 29.9897 7.57227 29.686 7.39307 cv
29.3828 7.21436 29.231 6.97803 29.231 6.68457 cv
29.231 6.49854 29.292 6.34082 29.4141 6.21191 cv
cp
f
.03524 lw
5.40381 29.5195 mo
5.30078 28.7861 5.13916 27.6426 4.75635 27.0269 cv
4.521 26.6455 4.12402 26.2642 3.69727 26.1323 cv
2.82959 25.8828 2.56494 26.1323 2.24121 26.543 cv
1.87354 27.0122 1.69678 27.6426 1.59375 28.4199 cv
1.49121 29.2261 1.5498 30.0474 1.69678 30.8687 cv
1.77051 31.2939 1.91748 31.7632 2.27051 32.1152 cv
2.59424 32.4375 2.78564 32.5254 3.18262 32.5552 cv
3.43262 32.5698 3.771 32.4375 4.09473 32.1592 cv
4.38867 31.9097 4.78613 31.1914 4.9624 30.7222 cv
5.40381 29.5195 li
cp
8.05127 25.6484 mo
6.35986 30.2969 li
6.47754 31.0005 6.68359 31.4111 6.96289 31.6899 cv
7.10986 31.8218 7.49268 32.2031 7.94824 31.7485 cv
8.25732 31.4404 8.27197 30.9712 8.30176 30.7808 cv
8.56641 30.7808 li
8.53711 31.646 li
8.52197 31.9243 8.375 32.4961 7.97803 32.8188 cv
7.58057 33.1416 7.25732 33.0239 6.99219 32.7749 cv
6.63916 32.4375 6.40381 31.9243 6.05078 30.9712 cv
5.80078 31.3965 5.47754 32.4082 4.16797 32.8335 cv
3.4917 33.0537 2.77051 33.2148 1.7998 32.7896 cv
1.25586 32.54 .84375 32.1885 .549805 31.6899 cv
.166992 31.0298 -.126953 30.0474 .09375 28.4053 cv
.240723 27.3345 .637695 26.5723 1.69678 25.8535 cv
2.15283 25.5459 3.021 25.3843 3.63867 25.4868 cv
4.33008 25.6045 4.88867 26.0737 5.22705 26.6309 cv
5.50684 27.1001 5.71289 27.6865 5.78613 28.2583 cv
5.81543 28.2583 li
6.75684 25.6484 li
8.05127 25.6484 li
cp
@
5.40381 29.5195 mo
5.30078 28.7861 5.13916 27.6426 4.75635 27.0269 cv
4.521 26.6455 4.12402 26.2642 3.69727 26.1323 cv
2.82959 25.8828 2.56494 26.1323 2.24121 26.543 cv
1.87354 27.0122 1.69678 27.6426 1.59375 28.4199 cv
1.49121 29.2261 1.5498 30.0474 1.69678 30.8687 cv
1.77051 31.2939 1.91748 31.7632 2.27051 32.1152 cv
2.59424 32.4375 2.78564 32.5254 3.18262 32.5552 cv
3.43262 32.5698 3.771 32.4375 4.09473 32.1592 cv
4.38867 31.9097 4.78613 31.1914 4.9624 30.7222 cv
5.40381 29.5195 li
cp
8.05127 25.6484 mo
6.35986 30.2969 li
6.47754 31.0005 6.68359 31.4111 6.96289 31.6899 cv
7.10986 31.8218 7.49268 32.2031 7.94824 31.7485 cv
8.25732 31.4404 8.27197 30.9712 8.30176 30.7808 cv
8.56641 30.7808 li
8.53711 31.646 li
8.52197 31.9243 8.375 32.4961 7.97803 32.8188 cv
7.58057 33.1416 7.25732 33.0239 6.99219 32.7749 cv
6.63916 32.4375 6.40381 31.9243 6.05078 30.9712 cv
5.80078 31.3965 5.47754 32.4082 4.16797 32.8335 cv
3.4917 33.0537 2.77051 33.2148 1.7998 32.7896 cv
1.25586 32.54 .84375 32.1885 .549805 31.6899 cv
.166992 31.0298 -.126953 30.0474 .09375 28.4053 cv
.240723 27.3345 .637695 26.5723 1.69678 25.8535 cv
2.15283 25.5459 3.021 25.3843 3.63867 25.4868 cv
4.33008 25.6045 4.88867 26.0737 5.22705 26.6309 cv
5.50684 27.1001 5.71289 27.6865 5.78613 28.2583 cv
5.81543 28.2583 li
6.75684 25.6484 li
8.05127 25.6484 li
cp
f
9.50146 35.8286 mo
9.80811 35.8286 li
9.91602 36.355 10.1172 36.7261 10.4116 36.9429 cv
10.7056 37.1597 11.0073 37.2676 11.3164 37.2676 cv
11.5996 37.2676 11.8081 37.2041 11.9409 37.0771 cv
12.0737 36.9502 12.1401 36.7827 12.1401 36.5752 cv
12.1401 36.3784 12.0684 36.21 11.9248 36.0703 cv
11.8457 35.9951 11.7183 35.9146 11.5425 35.8286 cv
10.7236 35.4316 li
10.293 35.2202 9.98389 34.9912 9.79736 34.7441 cv
9.60693 34.4971 9.51221 34.2056 9.51221 33.8691 cv
9.51221 33.4429 9.66113 33.0752 9.95898 32.7656 cv
10.2568 32.4561 10.6733 32.3013 11.2085 32.3013 cv
11.4419 32.3013 11.6895 32.3398 11.9517 32.4165 cv
12.2139 32.4937 12.377 32.5322 12.4419 32.5322 cv
12.5317 32.5322 12.5952 32.5132 12.6328 32.4756 cv
12.6709 32.438 12.7021 32.3853 12.7271 32.3174 cv
12.9697 32.3174 li
12.9697 33.9067 li
12.6895 33.9067 li
12.5854 33.5342 12.415 33.2354 12.1777 33.0098 cv
11.9409 32.7847 11.6646 32.6719 11.3486 32.6719 cv
11.1045 32.6719 10.9224 32.7397 10.8018 32.8755 cv
10.6816 33.0117 10.6216 33.1587 10.6216 33.3159 cv
10.6216 33.4448 10.6753 33.5737 10.7832 33.7026 cv
10.8872 33.835 11.0845 33.9712 11.3755 34.1108 cv
11.9785 34.4004 li
12.3521 34.5796 12.625 34.7529 12.7974 34.9214 cv
13.0845 35.2075 13.228 35.5601 13.228 35.979 cv
13.228 36.3872 13.0801 36.7676 12.7837 37.1201 cv
12.4878 37.4727 12.0435 37.6489 11.4507 37.6489 cv
11.3037 37.6489 11.1553 37.6338 11.0063 37.603 cv
10.8574 37.5728 10.6733 37.52 10.4546 37.4448 cv
10.2661 37.3804 li
10.1978 37.3555 10.1558 37.3413 10.1396 37.3374 cv
10.123 37.334 10.1025 37.332 10.0776 37.332 cv
10.0166 37.332 9.96338 37.3564 9.91846 37.4048 cv
9.87354 37.4531 9.82275 37.5342 9.76514 37.6489 cv
9.50146 37.6489 li
9.50146 35.8286 li
cp
f
14.2744 26.249 mo
14.9268 25.0322 15.917 24.0635 17.2456 23.3428 cv
17.2456 23.7505 li
16.4531 24.3091 15.9321 24.8579 15.6821 25.397 cv
15.293 26.2466 15.0986 27.6714 15.0986 29.6709 cv
15.0986 31.6753 15.2954 33.105 15.6895 33.959 cv
15.9395 34.5034 16.458 35.0498 17.2456 35.5986 cv
17.2456 36.0063 li
16.2432 35.4956 15.4185 34.792 14.771 33.8945 cv
13.9507 32.7539 13.5024 31.3916 13.4253 29.8071 cv
13.4253 28.4946 13.7085 27.3086 14.2744 26.249 cv
cp
f
25.6182 31.3677 mo
25.8389 30.6616 25.9487 29.7402 25.9487 28.6045 cv
25.9487 27.0439 25.7153 25.8672 25.248 25.0752 cv
24.7803 24.2827 24.1465 23.8867 23.3457 23.8867 cv
22.2339 23.8867 21.4717 24.5479 21.0591 25.8696 cv
20.8438 26.5713 20.7358 27.4829 20.7358 28.6045 cv
20.7358 29.7451 20.8457 30.666 21.0664 31.3677 cv
21.4741 32.6704 22.2339 33.3218 23.3457 33.3218 cv
24.4482 33.3218 25.2061 32.6704 25.6182 31.3677 cv
cp
27.0479 24.8247 mo
28.0576 25.8027 28.563 27.063 28.563 28.6045 cv
28.563 30.3032 27.9619 31.647 26.7603 32.6348 cv
26.3008 33.0356 25.6567 33.3672 24.8286 33.6299 cv
25.0396 34.1548 25.3779 34.5854 25.8447 34.9219 cv
26.3115 35.2583 26.8228 35.4268 27.3779 35.4268 cv
27.5693 35.4268 27.731 35.4136 27.8628 35.3872 cv
27.9941 35.3608 28.1631 35.3169 28.3691 35.2549 cv
28.4551 35.6128 li
27.9619 35.8135 27.4185 35.9565 26.8252 36.0425 cv
26.4468 36.0996 26.1021 36.1284 25.791 36.1284 cv
24.9629 36.1284 24.1523 35.9229 23.3604 35.5127 cv
22.5679 35.1021 22.0186 34.5078 21.7124 33.73 cv
21.6738 33.6299 21.645 33.5703 21.626 33.5513 cv
21.6069 33.5317 21.5376 33.5034 21.418 33.4653 cv
20.7954 33.2407 20.2065 32.8779 19.6514 32.377 cv
18.6318 31.3892 18.1221 30.1509 18.1221 28.6616 cv
18.1221 27.1533 18.5981 25.9053 19.5508 24.9175 cv
20.5273 23.9009 21.7935 23.3926 23.3496 23.3926 cv
24.8335 23.3926 26.0664 23.8701 27.0479 24.8247 cv
cp
f
32.6699 32.5059 mo
32.3398 33.2793 31.8608 34.0044 31.2339 34.6821 cv
30.9277 35.0117 30.5615 35.3145 30.1353 35.5913 cv
29.709 35.8682 29.4722 36.0063 29.4243 36.0063 cv
29.4243 35.5986 li
30.2144 35.0449 30.7358 34.4888 30.9897 33.9307 cv
31.3774 33.0811 31.5713 31.6611 31.5713 29.6709 cv
31.5713 27.6763 31.375 26.2515 30.9824 25.397 cv
30.7339 24.8579 30.2144 24.3091 29.4243 23.7505 cv
29.4243 23.3428 li
30.7168 24.0439 31.689 24.9819 32.3398 26.1563 cv
32.938 27.2349 33.2373 28.4517 33.2373 29.8071 cv
33.1895 30.833 33.0005 31.7329 32.6699 32.5059 cv
cp
f
36.9209 263.259 mo
37.481 263.259 37.8398 263.183 37.998 263.031 cv
38.1563 262.878 38.2349 262.589 38.2349 262.164 cv
38.2349 257.927 li
38.2349 257.656 38.2036 257.462 38.1406 257.347 cv
38.0781 257.233 37.9619 257.175 37.7935 257.175 cv
37.7036 257.175 37.5654 257.207 37.3789 257.267 cv
37.2603 257.303 37.0986 257.36 36.894 257.439 cv
36.894 257.16 li
39.6782 255.962 li
39.8721 255.962 li
39.8721 262.228 li
39.8721 262.629 39.937 262.901 40.0659 263.044 cv
40.1953 263.187 40.5259 263.259 41.0571 263.259 cv
41.0571 263.522 li
36.9209 263.522 li
36.9209 263.259 li
cp
f
124.398 263.259 mo
124.958 263.259 125.317 263.183 125.476 263.031 cv
125.633 262.878 125.712 262.589 125.712 262.164 cv
125.712 257.927 li
125.712 257.656 125.681 257.462 125.618 257.347 cv
125.555 257.233 125.439 257.175 125.271 257.175 cv
125.181 257.175 125.042 257.207 124.855 257.267 cv
124.737 257.303 124.576 257.36 124.371 257.439 cv
124.371 257.16 li
127.155 255.962 li
127.35 255.962 li
127.35 262.228 li
127.35 262.629 127.414 262.901 127.543 263.044 cv
127.673 263.187 128.003 263.259 128.534 263.259 cv
128.534 263.522 li
124.398 263.522 li
124.398 263.259 li
cp
f
131.361 262.901 mo
131.487 263.214 131.678 263.372 131.933 263.372 cv
132.252 263.372 132.467 263.082 132.578 262.5 cv
132.64 262.181 132.67 261.71 132.67 261.086 cv
132.67 258.564 li
132.67 257.671 132.606 257.069 132.479 256.755 cv
132.352 256.441 132.166 256.285 131.922 256.285 cv
131.674 256.285 131.485 256.443 131.356 256.76 cv
131.227 257.078 131.162 257.679 131.162 258.564 cv
131.162 261.086 li
131.169 261.983 131.235 262.587 131.361 262.901 cv
cp
130.312 256.822 mo
130.778 256.249 131.313 255.962 131.916 255.962 cv
132.612 255.962 133.199 256.315 133.677 257.021 cv
134.162 257.745 134.404 258.654 134.404 259.75 cv
134.404 261.043 134.13 262.049 133.58 262.77 cv
133.117 263.375 132.564 263.677 131.922 263.677 cv
131.469 263.677 131.083 263.545 130.764 263.28 cv
130.444 263.015 130.171 262.673 129.945 262.253 cv
129.751 261.899 129.614 261.493 129.535 261.035 cv
129.489 260.765 129.453 260.378 129.428 259.874 cv
129.428 258.559 129.723 257.542 130.312 256.822 cv
cp
f
212.019 263.259 mo
212.578 263.259 212.938 263.183 213.096 263.031 cv
213.253 262.878 213.332 262.589 213.332 262.164 cv
213.332 257.927 li
213.332 257.656 213.301 257.462 213.238 257.347 cv
213.175 257.233 213.06 257.175 212.891 257.175 cv
212.801 257.175 212.662 257.207 212.476 257.267 cv
212.357 257.303 212.196 257.36 211.991 257.439 cv
211.991 257.16 li
214.775 255.962 li
214.97 255.962 li
214.97 262.228 li
214.97 262.629 215.034 262.901 215.163 263.044 cv
215.293 263.187 215.623 263.259 216.154 263.259 cv
216.154 263.522 li
212.019 263.522 li
212.019 263.259 li
cp
f
218.981 262.901 mo
219.107 263.214 219.298 263.372 219.553 263.372 cv
219.872 263.372 220.087 263.082 220.198 262.5 cv
220.26 262.181 220.29 261.71 220.29 261.086 cv
220.29 258.564 li
220.29 257.671 220.227 257.069 220.099 256.755 cv
219.972 256.441 219.786 256.285 219.542 256.285 cv
219.294 256.285 219.105 256.443 218.977 256.76 cv
218.847 257.078 218.782 257.679 218.782 258.564 cv
218.782 261.086 li
218.789 261.983 218.855 262.587 218.981 262.901 cv
cp
217.932 256.822 mo
218.398 256.249 218.933 255.962 219.536 255.962 cv
220.232 255.962 220.819 256.315 221.297 257.021 cv
221.782 257.745 222.024 258.654 222.024 259.75 cv
222.024 261.043 221.75 262.049 221.2 262.77 cv
220.737 263.375 220.185 263.677 219.542 263.677 cv
219.089 263.677 218.703 263.545 218.384 263.28 cv
218.064 263.015 217.791 262.673 217.565 262.253 cv
217.371 261.899 217.234 261.493 217.155 261.035 cv
217.109 260.765 217.073 260.378 217.048 259.874 cv
217.048 258.559 217.343 257.542 217.932 256.822 cv
cp
f
224.496 262.901 mo
224.622 263.214 224.813 263.372 225.067 263.372 cv
225.387 263.372 225.602 263.082 225.713 262.5 cv
225.774 262.181 225.805 261.71 225.805 261.086 cv
225.805 258.564 li
225.805 257.671 225.741 257.069 225.613 256.755 cv
225.486 256.441 225.301 256.285 225.057 256.285 cv
224.809 256.285 224.62 256.443 224.491 256.76 cv
224.361 257.078 224.297 257.679 224.297 258.564 cv
224.297 261.086 li
224.304 261.983 224.37 262.587 224.496 262.901 cv
cp
223.446 256.822 mo
223.913 256.249 224.447 255.962 225.051 255.962 cv
225.747 255.962 226.334 256.315 226.812 257.021 cv
227.297 257.745 227.539 258.654 227.539 259.75 cv
227.539 261.043 227.265 262.049 226.715 262.77 cv
226.252 263.375 225.699 263.677 225.057 263.677 cv
224.604 263.677 224.218 263.545 223.898 263.28 cv
223.579 263.015 223.306 262.673 223.08 262.253 cv
222.886 261.899 222.749 261.493 222.67 261.035 cv
222.624 260.765 222.588 260.378 222.563 259.874 cv
222.563 258.559 222.857 257.542 223.446 256.822 cv
cp
f
151.24 270.225 mo
151.46 269.519 151.57 268.598 151.57 267.462 cv
151.57 265.902 151.337 264.725 150.869 263.933 cv
150.402 263.141 149.768 262.745 148.968 262.745 cv
147.855 262.745 147.093 263.406 146.681 264.728 cv
146.465 265.429 146.357 266.34 146.357 267.462 cv
146.357 268.603 146.468 269.524 146.688 270.225 cv
147.096 271.529 147.855 272.18 148.968 272.18 cv
150.07 272.18 150.827 271.529 151.24 270.225 cv
cp
152.669 263.682 mo
153.68 264.661 154.185 265.92 154.185 267.462 cv
154.185 269.162 153.584 270.504 152.382 271.493 cv
151.923 271.894 151.278 272.225 150.45 272.488 cv
150.661 273.013 151 273.444 151.467 273.78 cv
151.934 274.117 152.444 274.285 153 274.285 cv
153.191 274.285 153.353 274.271 153.484 274.246 cv
153.616 274.219 153.784 274.174 153.99 274.113 cv
154.076 274.471 li
153.584 274.671 153.04 274.814 152.446 274.9 cv
152.068 274.958 151.724 274.986 151.412 274.986 cv
150.584 274.986 149.774 274.781 148.981 274.371 cv
148.189 273.96 147.641 273.366 147.334 272.588 cv
147.296 272.488 147.267 272.428 147.248 272.409 cv
147.229 272.39 147.159 272.362 147.039 272.323 cv
146.417 272.099 145.828 271.736 145.273 271.235 cv
144.253 270.247 143.743 269.008 143.743 267.519 cv
143.743 266.011 144.22 264.763 145.173 263.776 cv
146.149 262.759 147.415 262.25 148.971 262.25 cv
150.455 262.25 151.688 262.728 152.669 263.682 cv
cp
f
159.369 274.592 mo
159.369 262.437 li
162.81 262.437 li
162.81 262.917 li
161.89 262.917 li
161.464 262.917 161.192 262.981 161.075 263.11 cv
160.958 263.239 160.899 263.518 160.899 263.947 cv
160.899 273.318 li
160.899 273.609 160.938 273.808 161.014 273.916 cv
161.091 274.023 161.296 274.077 161.632 274.077 cv
162.81 274.077 li
162.81 274.592 li
159.369 274.592 li
cp
f
165.236 263.826 mo
166.213 262.799 167.46 262.287 168.978 262.287 cv
169.586 262.287 170.191 262.4 170.794 262.626 cv
171.397 262.853 171.773 262.966 171.922 262.966 cv
172.08 262.966 172.206 262.912 172.303 262.802 cv
172.398 262.692 172.477 262.525 172.539 262.3 cv
172.948 262.3 li
172.948 265.73 li
172.575 265.73 li
172.221 264.985 171.859 264.398 171.491 263.968 cv
170.802 263.176 170.021 262.781 169.15 262.781 cv
168.202 262.781 167.51 263.191 167.074 264.011 cv
166.639 264.833 166.421 265.988 166.421 267.477 cv
166.421 268.699 166.623 269.788 167.028 270.745 cv
167.433 271.702 168.214 272.18 169.372 272.18 cv
170 272.18 170.421 272.048 170.637 271.787 cv
170.761 271.638 170.823 271.414 170.823 271.113 cv
170.823 269.567 li
170.823 269.124 170.687 268.833 170.414 268.694 cv
170.236 268.608 169.878 268.56 169.337 268.55 cv
169.337 268.178 li
174.378 268.178 li
174.378 268.55 li
173.87 268.57 173.534 268.671 173.369 268.855 cv
173.203 269.039 173.121 269.383 173.121 269.889 cv
173.121 271.757 li
172.795 271.958 172.269 272.159 171.541 272.359 cv
170.813 272.559 170 272.66 169.1 272.66 cv
167.467 272.66 166.163 272.147 165.187 271.121 cv
164.276 270.161 163.821 268.958 163.821 267.512 cv
163.821 266.052 164.293 264.823 165.236 263.826 cv
cp
f
179.074 268.243 mo
179.064 267.378 178.997 266.775 178.872 266.431 cv
178.747 266.087 178.498 265.916 178.123 265.916 cv
177.738 265.916 177.476 266.114 177.334 266.51 cv
177.192 266.907 177.111 267.484 177.093 268.243 cv
179.074 268.243 li
cp
175.948 266.392 mo
176.55 265.769 177.274 265.458 178.123 265.458 cv
178.607 265.458 179.063 265.584 179.489 265.837 cv
179.916 266.09 180.244 266.441 180.474 266.889 cv
180.646 267.228 180.767 267.667 180.833 268.207 cv
180.867 268.459 180.884 268.653 180.884 268.787 cv
177.128 268.787 li
177.162 269.374 177.258 269.882 177.416 270.311 cv
177.704 271.118 178.21 271.521 178.935 271.521 cv
179.279 271.521 179.605 271.414 179.913 271.199 cv
180.1 271.07 180.333 270.853 180.611 270.547 cv
180.948 270.755 li
180.493 271.5 179.966 272.018 179.367 272.309 cv
178.979 272.495 178.533 272.588 178.029 272.588 cv
177.306 272.588 176.628 272.304 175.995 271.736 cv
175.362 271.168 175.046 270.261 175.046 269.016 cv
175.046 267.889 175.347 267.015 175.948 266.392 cv
cp
f
186.42 262.472 mo
186.42 262.831 li
185.894 262.859 185.553 262.904 185.396 262.963 cv
185.241 263.023 185.163 263.172 185.163 263.412 cv
185.163 263.488 185.17 263.559 185.182 263.624 cv
185.193 263.688 185.216 263.758 185.25 263.834 cv
187.582 269.259 li
187.559 269.259 li
189.486 264.294 li
189.529 264.184 189.567 264.072 189.602 263.957 cv
189.659 263.77 189.688 263.62 189.688 263.504 cv
189.688 263.227 189.604 263.054 189.439 262.985 cv
189.274 262.916 188.938 262.864 188.431 262.831 cv
188.431 262.472 li
191.562 262.472 li
191.562 262.831 li
191.202 262.869 190.934 262.972 190.754 263.142 cv
190.574 263.311 190.4 263.609 190.233 264.033 cv
186.88 272.653 li
186.492 272.653 li
182.708 263.869 li
182.555 263.515 182.397 263.261 182.237 263.106 cv
182.077 262.951 181.827 262.859 181.487 262.831 cv
181.487 262.472 li
186.42 262.472 li
cp
f
192.344 274.592 mo
192.344 274.077 li
193.515 274.077 li
193.85 274.077 194.056 274.023 194.132 273.916 cv
194.209 273.808 194.247 273.609 194.247 273.318 cv
194.247 263.947 li
194.247 263.523 194.19 263.245 194.078 263.113 cv
193.966 262.982 193.694 262.917 193.264 262.917 cv
192.344 262.917 li
192.344 262.437 li
195.783 262.437 li
195.783 274.592 li
192.344 274.592 li
cp
f
124.113 69.3652 mo
124.544 69.3188 124.813 69.2397 124.921 69.1274 cv
125.029 69.0151 125.083 68.7222 125.083 68.2485 cv
125.083 63.4863 li
125.083 63.0923 125.022 62.8364 124.902 62.7183 cv
124.782 62.6001 124.519 62.5269 124.113 62.498 cv
124.113 62.2939 li
127.172 62.2939 li
127.172 62.498 li
126.769 62.5269 126.506 62.6001 126.385 62.7183 cv
126.264 62.8364 126.203 63.0923 126.203 63.4863 cv
126.203 65.6284 li
129.553 65.6284 li
129.553 63.4863 li
129.553 63.0923 129.493 62.8364 129.375 62.7183 cv
129.257 62.6001 128.992 62.5269 128.583 62.498 cv
128.583 62.2939 li
131.643 62.2939 li
131.643 62.498 li
131.236 62.5269 130.974 62.6001 130.854 62.7183 cv
130.733 62.8364 130.673 63.0923 130.673 63.4863 cv
130.673 68.3774 li
130.673 68.7764 130.733 69.0317 130.854 69.1436 cv
130.974 69.2559 131.236 69.3296 131.643 69.3652 cv
131.643 69.5693 li
128.583 69.5693 li
128.583 69.3652 li
129.018 69.3228 129.288 69.2441 129.394 69.1304 cv
129.5 69.0161 129.553 68.7222 129.553 68.2485 cv
129.553 66.1118 li
126.203 66.1118 li
126.203 68.3774 li
126.203 68.7764 126.264 69.0322 126.385 69.1465 cv
126.506 69.2603 126.769 69.3335 127.172 69.3652 cv
127.172 69.5693 li
124.113 69.5693 li
124.113 69.3652 li
cp
.422065 .948577 0 0 cmyk
f
133.243 65.4673 mo
133.128 65.6606 133.046 65.9043 132.995 66.1978 cv
135.269 66.1978 li
135.229 65.8398 135.16 65.5728 135.063 65.3975 cv
134.888 65.0825 134.593 64.9248 134.181 64.9248 cv
133.771 64.9248 133.459 65.106 133.243 65.4673 cv
cp
135.823 65.0566 mo
136.203 65.4058 136.394 65.9004 136.394 66.541 cv
132.974 66.541 li
133.01 67.3696 133.198 67.9731 133.539 68.3521 cv
133.881 68.7305 134.284 68.9194 134.751 68.9194 cv
135.128 68.9194 135.446 68.8213 135.704 68.625 cv
135.963 68.4287 136.202 68.1499 136.421 67.7891 cv
136.609 67.8535 li
136.462 68.3091 136.187 68.7305 135.782 69.1172 cv
135.379 69.5049 134.884 69.6982 134.299 69.6982 cv
133.624 69.6982 133.103 69.4438 132.734 68.9355 cv
132.366 68.4277 132.183 67.8423 132.183 67.1802 cv
132.183 66.4604 132.396 65.8398 132.823 65.3169 cv
133.25 64.7944 133.807 64.5332 134.492 64.5332 cv
134.999 64.5332 135.442 64.7075 135.823 65.0566 cv
cp
f
140.023 66.5947 mo
139.61 66.731 139.27 66.8813 139 67.0459 cv
138.483 67.3643 138.225 67.7261 138.225 68.1304 cv
138.225 68.4561 138.333 68.6958 138.548 68.8501 cv
138.688 68.9502 138.844 69 139.017 69 cv
139.254 69 139.48 68.9341 139.698 68.8018 cv
139.915 68.6689 140.023 68.501 140.023 68.2969 cv
140.023 66.5947 li
cp
138.047 67.2017 mo
138.377 66.9868 139.036 66.6953 140.023 66.3262 cv
140.023 65.8701 li
140.023 65.5049 139.987 65.251 139.916 65.1074 cv
139.794 64.8677 139.541 64.748 139.156 64.748 cv
138.974 64.748 138.799 64.7944 138.634 64.8872 cv
138.469 64.9839 138.387 65.1167 138.387 65.2847 cv
138.387 65.3276 138.396 65.4004 138.413 65.5024 cv
138.432 65.604 138.44 65.6694 138.44 65.6982 cv
138.44 65.8989 138.374 66.0381 138.241 66.1172 cv
138.166 66.1636 138.076 66.187 137.972 66.187 cv
137.811 66.187 137.687 66.1338 137.601 66.0283 cv
137.514 65.9229 137.471 65.8057 137.471 65.6768 cv
137.471 65.4263 137.626 65.1641 137.937 64.8901 cv
138.247 64.6162 138.702 64.4795 139.302 64.4795 cv
139.998 64.4795 140.471 64.7051 140.719 65.1558 cv
140.852 65.4028 140.918 65.7627 140.918 66.2349 cv
140.918 68.3882 li
140.918 68.5957 140.932 68.7388 140.961 68.8179 cv
141.008 68.957 141.104 69.0269 141.252 69.0269 cv
141.334 69.0269 141.402 69.0146 141.456 68.9893 cv
141.51 68.9644 141.604 68.9033 141.736 68.8071 cv
141.736 69.0859 li
141.621 69.2256 141.497 69.3403 141.364 69.4297 cv
141.163 69.5659 140.959 69.6338 140.751 69.6338 cv
140.507 69.6338 140.33 69.5552 140.221 69.3975 cv
140.11 69.2402 140.051 69.0522 140.04 68.834 cv
139.767 69.0698 139.533 69.2456 139.34 69.3599 cv
139.013 69.5532 138.702 69.6499 138.408 69.6499 cv
138.1 69.6499 137.832 69.5415 137.605 69.3252 cv
137.379 69.1084 137.267 68.834 137.267 68.501 cv
137.267 67.9819 137.526 67.5488 138.047 67.2017 cv
cp
f
144.128 64.5815 mo
144.128 64.748 li
143.94 64.7695 143.809 64.7979 143.731 64.834 cv
143.654 64.8696 143.616 64.9482 143.616 65.0698 cv
143.616 65.1274 143.624 65.1821 143.64 65.2339 cv
143.656 65.2856 143.684 65.3618 143.724 65.4619 cv
144.854 68.1597 li
145.813 65.7788 li
145.859 65.6606 145.904 65.5371 145.945 65.4082 cv
145.986 65.2793 146.007 65.1812 146.007 65.1128 cv
146.007 64.9731 145.94 64.873 145.808 64.8125 cv
145.729 64.7803 145.621 64.7588 145.484 64.748 cv
145.484 64.5815 li
147.015 64.5815 li
147.015 64.748 li
146.838 64.7622 146.712 64.8203 146.635 64.9224 cv
146.558 65.0244 146.445 65.2598 146.298 65.6284 cv
144.741 69.4941 li
144.713 69.562 144.689 69.6089 144.672 69.6338 cv
144.653 69.6587 144.628 69.6714 144.596 69.6714 cv
144.561 69.6714 144.529 69.6509 144.505 69.6094 cv
144.479 69.5684 144.452 69.5176 144.424 69.4565 cv
142.775 65.5264 li
142.643 65.208 142.501 64.9912 142.351 64.8765 cv
142.261 64.8125 142.13 64.7695 141.957 64.748 cv
141.957 64.5815 li
144.128 64.5815 li
cp
f
147.423 64.6353 mo
149.696 64.6353 li
149.696 64.7856 li
149.517 64.7891 149.384 64.8057 149.298 64.835 cv
149.132 64.8823 149.05 64.9756 149.05 65.1147 cv
149.05 65.166 149.059 65.2183 149.076 65.2715 cv
149.095 65.3247 149.127 65.4043 149.174 65.5103 cv
150.42 68.1973 li
151.446 65.4888 li
151.457 65.4595 151.474 65.3936 151.497 65.291 cv
151.521 65.1885 151.532 65.1187 151.532 65.082 cv
151.532 64.9868 151.5 64.9175 151.436 64.8735 cv
151.371 64.8296 151.288 64.8037 151.188 64.7964 cv
151.021 64.7856 li
151.021 64.6353 li
152.502 64.6353 li
152.502 64.7856 li
152.354 64.8037 152.244 64.8555 152.171 64.9404 cv
152.097 65.0259 152.033 65.144 151.979 65.2954 cv
150.283 69.7734 li
149.988 70.5464 149.707 71.1064 149.438 71.4541 cv
149.168 71.8013 148.827 71.9746 148.414 71.9746 cv
148.213 71.9746 148.024 71.9243 147.849 71.8242 cv
147.673 71.7241 147.585 71.5649 147.585 71.3467 cv
147.585 71.2031 147.637 71.0859 147.742 70.9946 cv
147.847 70.9038 147.979 70.8579 148.138 70.8579 cv
148.23 70.8579 148.368 70.8921 148.55 70.96 cv
148.732 71.0278 148.863 71.062 148.941 71.062 cv
149.14 71.062 149.349 70.8188 149.569 70.333 cv
149.789 69.8467 149.898 69.5259 149.898 69.3701 cv
149.898 69.3384 149.894 69.2993 149.884 69.2534 cv
149.873 69.2075 149.861 69.167 149.848 69.1313 cv
148.15 65.4727 li
148.028 65.208 147.922 65.0332 147.83 64.9492 cv
147.738 64.8652 147.603 64.8105 147.423 64.7856 cv
147.423 64.6353 li
cp
f
157.808 68.498 mo
158.264 69.0513 158.825 69.3276 159.49 69.3276 cv
160.141 69.3276 160.696 69.0586 161.158 68.5195 cv
161.62 67.981 161.852 67.1191 161.852 65.9346 cv
161.852 64.7354 161.618 63.8691 161.15 63.3359 cv
160.684 62.8022 160.13 62.5356 159.49 62.5356 cv
158.828 62.5356 158.269 62.8125 157.811 63.3652 cv
157.353 63.9185 157.123 64.7749 157.123 65.9346 cv
157.123 67.0908 157.352 67.9453 157.808 68.498 cv
cp
156.982 63.1104 mo
157.661 62.4624 158.496 62.1387 159.487 62.1387 cv
160.464 62.1387 161.293 62.459 161.976 63.0996 cv
162.726 63.8047 163.101 64.7495 163.101 65.9346 cv
163.101 66.8721 162.862 67.665 162.386 68.313 cv
161.869 69.0107 161.137 69.4512 160.19 69.6338 cv
160.635 70.2725 161.173 70.7256 161.805 70.9932 cv
162.159 71.1431 162.639 71.2534 163.241 71.3252 cv
163.241 71.5293 li
162.789 71.5293 li
162.193 71.5293 161.665 71.481 161.204 71.3843 cv
160.742 71.2876 160.323 71.1406 159.947 70.9438 cv
159.57 70.7505 159.221 70.4819 158.899 70.1387 cv
158.579 69.7949 158.4 69.6143 158.364 69.5962 cv
158.224 69.5317 li
157.613 69.249 157.141 68.9268 156.807 68.5654 cv
156.185 67.896 155.873 67.019 155.873 65.9346 cv
155.873 64.7603 156.243 63.8188 156.982 63.1104 cv
cp
f
165.217 64.5977 mo
165.217 68.0337 li
165.217 68.2773 165.251 68.4722 165.319 68.6191 cv
165.452 68.8911 165.696 69.0269 166.052 69.0269 cv
166.296 69.0269 166.534 68.9463 166.769 68.7856 cv
166.9 68.6958 167.035 68.5728 167.172 68.415 cv
167.172 65.4727 li
167.172 65.1973 167.118 65.0161 167.011 64.9302 cv
166.902 64.8447 166.688 64.7925 166.364 64.7749 cv
166.364 64.5977 li
168.104 64.5977 li
168.104 68.3774 li
168.104 68.6206 168.147 68.7881 168.235 68.8794 cv
168.323 68.9707 168.51 69.0107 168.793 69 cv
168.793 69.1504 li
168.596 69.2041 168.45 69.2446 168.356 69.2715 cv
168.264 69.2983 168.107 69.3477 167.889 69.4189 cv
167.795 69.4512 167.59 69.5283 167.274 69.6499 cv
167.256 69.6499 167.245 69.6416 167.242 69.6255 cv
167.238 69.6094 167.236 69.5908 167.236 69.5693 cv
167.236 68.7051 li
166.992 68.9946 166.77 69.2095 166.568 69.3491 cv
166.264 69.564 165.94 69.6714 165.6 69.6714 cv
165.287 69.6714 164.992 69.5601 164.716 69.3379 cv
164.437 69.1196 164.296 68.752 164.296 68.2358 cv
164.296 65.4458 li
164.296 65.1616 164.235 64.9717 164.113 64.8755 cv
164.034 64.8154 163.865 64.7729 163.606 64.748 cv
163.606 64.5977 li
165.217 64.5977 li
cp
f
172.186 66.5947 mo
171.772 66.731 171.432 66.8813 171.162 67.0459 cv
170.646 67.3643 170.387 67.7261 170.387 68.1304 cv
170.387 68.4561 170.495 68.6958 170.71 68.8501 cv
170.851 68.9502 171.006 69 171.179 69 cv
171.416 69 171.643 68.9341 171.86 68.8018 cv
172.077 68.6689 172.186 68.501 172.186 68.2969 cv
172.186 66.5947 li
cp
170.209 67.2017 mo
170.539 66.9868 171.198 66.6953 172.186 66.3262 cv
172.186 65.8701 li
172.186 65.5049 172.149 65.251 172.078 65.1074 cv
171.956 64.8677 171.703 64.748 171.318 64.748 cv
171.136 64.748 170.961 64.7944 170.796 64.8872 cv
170.631 64.9839 170.549 65.1167 170.549 65.2847 cv
170.549 65.3276 170.558 65.4004 170.575 65.5024 cv
170.594 65.604 170.603 65.6694 170.603 65.6982 cv
170.603 65.8989 170.536 66.0381 170.403 66.1172 cv
170.328 66.1636 170.238 66.187 170.134 66.187 cv
169.973 66.187 169.849 66.1338 169.763 66.0283 cv
169.676 65.9229 169.633 65.8057 169.633 65.6768 cv
169.633 65.4263 169.788 65.1641 170.099 64.8901 cv
170.409 64.6162 170.864 64.4795 171.464 64.4795 cv
172.16 64.4795 172.633 64.7051 172.881 65.1558 cv
173.014 65.4028 173.08 65.7627 173.08 66.2349 cv
173.08 68.3882 li
173.08 68.5957 173.094 68.7388 173.123 68.8179 cv
173.17 68.957 173.267 69.0269 173.414 69.0269 cv
173.496 69.0269 173.564 69.0146 173.618 68.9893 cv
173.672 68.9644 173.766 68.9033 173.898 68.8071 cv
173.898 69.0859 li
173.783 69.2256 173.659 69.3403 173.526 69.4297 cv
173.325 69.5659 173.121 69.6338 172.913 69.6338 cv
172.669 69.6338 172.492 69.5552 172.383 69.3975 cv
172.272 69.2402 172.213 69.0522 172.202 68.834 cv
171.929 69.0698 171.695 69.2456 171.502 69.3599 cv
171.175 69.5532 170.864 69.6499 170.57 69.6499 cv
170.262 69.6499 169.994 69.5415 169.768 69.3252 cv
169.541 69.1084 169.429 68.834 169.429 68.501 cv
169.429 67.9819 169.688 67.5488 170.209 67.2017 cv
cp
f
173.969 69.3921 mo
174.299 69.3638 174.518 69.3052 174.625 69.2178 cv
174.733 69.1299 174.787 68.9429 174.787 68.6567 cv
174.787 66.2349 li
174.787 65.8809 174.754 65.6274 174.688 65.4756 cv
174.621 65.3232 174.5 65.2471 174.324 65.2471 cv
174.288 65.2471 174.24 65.2515 174.181 65.2607 cv
174.122 65.2695 174.06 65.2813 173.995 65.2954 cv
173.995 65.1182 li
174.199 65.0469 174.408 64.9731 174.623 64.8979 cv
174.838 64.8232 174.986 64.7695 175.069 64.7373 cv
175.248 64.6689 175.433 64.5923 175.622 64.5063 cv
175.647 64.5063 175.662 64.5151 175.668 64.5332 cv
175.673 64.5513 175.676 64.5884 175.676 64.646 cv
175.676 65.5264 li
175.906 65.208 176.128 64.959 176.343 64.7803 cv
176.557 64.6011 176.779 64.5117 177.01 64.5117 cv
177.193 64.5117 177.343 64.5664 177.458 64.6753 cv
177.573 64.7847 177.631 64.9214 177.631 65.0859 cv
177.631 65.2329 177.587 65.3564 177.499 65.4565 cv
177.411 65.5566 177.3 65.6069 177.167 65.6069 cv
177.031 65.6069 176.894 65.5444 176.756 65.4189 cv
176.617 65.2939 176.509 65.231 176.43 65.231 cv
176.304 65.231 176.149 65.332 175.967 65.5347 cv
175.783 65.7368 175.691 65.9453 175.691 66.1602 cv
175.691 68.5815 li
175.691 68.8892 175.764 69.103 175.907 69.2231 cv
176.051 69.3428 176.29 69.3994 176.623 69.3921 cv
176.623 69.5693 li
173.969 69.5693 li
173.969 69.3921 li
cp
f
177.504 69.4297 mo
177.849 69.4048 178.075 69.3472 178.186 69.2578 cv
178.295 69.168 178.35 68.9746 178.35 68.6768 cv
178.35 63.2876 li
178.35 63.0332 178.307 62.8721 178.221 62.8042 cv
178.134 62.7363 178.01 62.7021 177.849 62.7021 cv
177.78 62.7021 177.721 62.7041 177.671 62.7075 cv
177.62 62.7109 177.565 62.7163 177.504 62.7236 cv
177.504 62.5732 li
177.988 62.4443 li
178.358 62.3477 178.673 62.2563 178.932 62.1709 cv
179.089 62.1172 179.181 62.0903 179.206 62.0903 cv
179.228 62.0903 179.241 62.0947 179.246 62.1035 cv
179.252 62.1123 179.254 62.1333 179.254 62.1655 cv
179.254 66.6807 li
180.746 65.3706 li
180.854 65.2739 180.927 65.1973 180.964 65.1396 cv
181.002 65.0825 181.021 65.0322 181.021 64.9893 cv
181.021 64.9072 180.98 64.8555 180.899 64.834 cv
180.818 64.8125 180.674 64.7964 180.466 64.7856 cv
180.466 64.6353 li
182.712 64.6353 li
182.712 64.7856 li
182.311 64.8105 181.988 64.8906 181.744 65.0254 cv
181.501 65.1602 181.033 65.5459 180.342 66.1826 cv
180.02 66.4658 li
181.007 67.7622 li
181.519 68.418 181.904 68.8535 182.164 69.0688 cv
182.424 69.2847 182.7 69.4048 182.992 69.4297 cv
182.992 69.5693 li
180.596 69.5693 li
180.596 69.4297 li
180.784 69.4185 li
180.845 69.415 180.9 69.4023 180.951 69.3799 cv
181.001 69.3579 181.026 69.3213 181.026 69.2695 cv
181.026 69.229 181.018 69.1914 180.999 69.1567 cv
180.981 69.1216 180.956 69.082 180.924 69.0376 cv
179.254 66.8472 li
179.254 68.8506 li
179.254 69.0996 179.346 69.2656 179.529 69.3486 cv
179.637 69.3989 179.821 69.4263 180.084 69.4297 cv
180.084 69.5693 li
177.504 69.5693 li
177.504 69.4297 li
cp
f
184.818 65.1343 mo
184.459 65.46 184.279 66.022 184.279 66.8203 cv
184.279 67.4575 184.424 68.0518 184.713 68.603 cv
185.003 69.1543 185.404 69.4297 185.919 69.4297 cv
186.322 69.4297 186.632 69.2456 186.85 68.877 cv
187.067 68.5083 187.177 68.0249 187.177 67.4272 cv
187.177 66.8076 187.038 66.2241 186.761 65.6768 cv
186.483 65.1289 186.083 64.8555 185.558 64.8555 cv
185.273 64.8555 185.027 64.9482 184.818 65.1343 cv
cp
183.958 65.2715 mo
184.412 64.7793 184.997 64.5332 185.711 64.5332 cv
186.422 64.5332 187.011 64.7656 187.478 65.231 cv
187.944 65.6963 188.178 66.3154 188.178 67.0889 cv
188.178 67.8013 187.952 68.4204 187.499 68.9463 cv
187.047 69.4727 186.462 69.7358 185.744 69.7358 cv
185.055 69.7358 184.471 69.4834 183.993 68.9785 cv
183.516 68.4741 183.277 67.8403 183.277 67.0781 cv
183.277 66.3657 183.504 65.7637 183.958 65.2715 cv
cp
f
188.711 69.4189 mo
188.966 69.3867 189.145 69.3232 189.247 69.2285 cv
189.35 69.1338 189.4 68.9214 189.4 68.5923 cv
189.4 65.8647 li
189.4 65.6372 189.379 65.4775 189.336 65.3853 cv
189.268 65.2505 189.128 65.1826 188.916 65.1826 cv
188.884 65.1826 188.85 65.1846 188.816 65.188 cv
188.782 65.1919 188.739 65.1973 188.689 65.2041 cv
188.689 65.0161 li
188.837 64.9731 189.185 64.8623 189.734 64.6836 cv
190.24 64.5171 li
190.266 64.5171 190.281 64.5259 190.286 64.5439 cv
190.292 64.562 190.294 64.5869 190.294 64.6191 cv
190.294 65.4082 li
190.624 65.1006 190.882 64.8892 191.068 64.7749 cv
191.348 64.5991 191.639 64.5117 191.939 64.5117 cv
192.183 64.5117 192.405 64.5815 192.605 64.7212 cv
192.993 64.9932 193.187 65.478 193.187 66.1763 cv
193.187 68.6836 li
193.187 68.9409 193.238 69.1274 193.342 69.2417 cv
193.444 69.3564 193.617 69.4155 193.859 69.4189 cv
193.859 69.5693 li
191.56 69.5693 li
191.56 69.4189 li
191.822 69.3833 192.005 69.3105 192.109 69.2017 cv
192.214 69.0923 192.266 68.8555 192.266 68.4902 cv
192.266 66.1978 li
192.266 65.8896 192.208 65.6348 192.094 65.4326 cv
191.979 65.2305 191.77 65.1289 191.462 65.1289 cv
191.252 65.1289 191.037 65.2007 190.819 65.3438 cv
190.698 65.4263 190.541 65.562 190.349 65.752 cv
190.349 68.7588 li
190.349 69.0161 190.405 69.189 190.521 69.2769 cv
190.636 69.3643 190.816 69.4121 191.064 69.4189 cv
191.064 69.5693 li
188.711 69.5693 li
188.711 69.4189 li
cp
f
195.098 62.2397 mo
195.206 62.1294 195.339 62.0742 195.497 62.0742 cv
195.651 62.0742 195.783 62.1284 195.893 62.2368 cv
196.002 62.3457 196.057 62.4785 196.057 62.6353 cv
196.057 62.7881 196.002 62.9194 195.893 63.0278 cv
195.783 63.1367 195.651 63.1909 195.497 63.1909 cv
195.339 63.1909 195.206 63.1367 195.098 63.0278 cv
194.99 62.9194 194.937 62.7881 194.937 62.6353 cv
194.937 62.4819 194.99 62.3501 195.098 62.2397 cv
cp
194.242 69.4189 mo
194.626 69.3833 194.868 69.3179 194.969 69.2231 cv
195.069 69.1284 195.12 68.8716 195.12 68.4526 cv
195.12 65.8916 li
195.12 65.6587 195.104 65.4976 195.071 65.4082 cv
195.018 65.2617 194.904 65.188 194.731 65.188 cv
194.692 65.188 194.653 65.1919 194.616 65.1987 cv
194.578 65.2061 194.47 65.2349 194.29 65.2847 cv
194.29 65.1182 li
194.521 65.043 li
195.15 64.8394 195.588 64.6851 195.836 64.5815 cv
195.937 64.5386 196.001 64.5171 196.03 64.5171 cv
196.037 64.542 196.041 64.5688 196.041 64.5977 cv
196.041 68.4526 li
196.041 68.8608 196.09 69.1167 196.188 69.2202 cv
196.287 69.3242 196.511 69.3906 196.859 69.4189 cv
196.859 69.5693 li
194.242 69.5693 li
194.242 69.4189 li
cp
f
200.252 66.5947 mo
199.839 66.731 199.498 66.8813 199.229 67.0459 cv
198.712 67.3643 198.453 67.7261 198.453 68.1304 cv
198.453 68.4561 198.562 68.6958 198.776 68.8501 cv
198.917 68.9502 199.072 69 199.245 69 cv
199.482 69 199.709 68.9341 199.927 68.8018 cv
200.144 68.6689 200.252 68.501 200.252 68.2969 cv
200.252 66.5947 li
cp
198.275 67.2017 mo
198.605 66.9868 199.265 66.6953 200.252 66.3262 cv
200.252 65.8701 li
200.252 65.5049 200.216 65.251 200.145 65.1074 cv
200.022 64.8677 199.77 64.748 199.385 64.748 cv
199.202 64.748 199.027 64.7944 198.862 64.8872 cv
198.697 64.9839 198.615 65.1167 198.615 65.2847 cv
198.615 65.3276 198.624 65.4004 198.642 65.5024 cv
198.66 65.604 198.669 65.6694 198.669 65.6982 cv
198.669 65.8989 198.603 66.0381 198.47 66.1172 cv
198.395 66.1636 198.305 66.187 198.2 66.187 cv
198.039 66.187 197.915 66.1338 197.829 66.0283 cv
197.742 65.9229 197.699 65.8057 197.699 65.6768 cv
197.699 65.4263 197.854 65.1641 198.165 64.8901 cv
198.476 64.6162 198.931 64.4795 199.53 64.4795 cv
200.227 64.4795 200.699 64.7051 200.947 65.1558 cv
201.08 65.4028 201.146 65.7627 201.146 66.2349 cv
201.146 68.3882 li
201.146 68.5957 201.16 68.7388 201.189 68.8179 cv
201.236 68.957 201.333 69.0269 201.48 69.0269 cv
201.563 69.0269 201.631 69.0146 201.685 68.9893 cv
201.738 68.9644 201.832 68.9033 201.965 68.8071 cv
201.965 69.0859 li
201.85 69.2256 201.726 69.3403 201.593 69.4297 cv
201.392 69.5659 201.188 69.6338 200.979 69.6338 cv
200.735 69.6338 200.559 69.5552 200.449 69.3975 cv
200.339 69.2402 200.279 69.0522 200.269 68.834 cv
199.995 69.0698 199.762 69.2456 199.568 69.3599 cv
199.241 69.5532 198.931 69.6499 198.637 69.6499 cv
198.328 69.6499 198.061 69.5415 197.834 69.3252 cv
197.607 69.1084 197.495 68.834 197.495 68.501 cv
197.495 67.9819 197.755 67.5488 198.275 67.2017 cv
cp
f
206.056 64.8716 mo
206.413 64.4233 206.835 64.0625 207.321 63.7896 cv
207.4 63.9277 li
206.951 64.2842 206.63 64.6304 206.438 64.9673 cv
206.1 65.5547 205.931 66.3369 205.931 67.3145 cv
205.931 68.0381 205.994 68.6353 206.123 69.106 cv
206.35 69.9297 206.775 70.5464 207.4 70.9556 cv
207.292 71.0938 li
206.948 70.9292 206.577 70.6079 206.178 70.1289 cv
205.516 69.3354 205.185 68.4336 205.185 67.4229 cv
205.185 66.4541 205.476 65.6035 206.056 64.8716 cv
cp
f
207.744 69.4106 mo
208.099 69.3745 208.326 69.2944 208.427 69.1709 cv
208.527 69.0469 208.577 68.7598 208.577 68.3091 cv
208.577 64.541 li
208.46 64.4033 li
208.334 64.2559 208.228 64.165 208.14 64.1299 cv
208.052 64.0952 207.92 64.0752 207.744 64.0693 cv
207.744 63.9106 li
209.208 63.9106 li
212.52 68.0029 li
212.52 65.1606 li
212.52 64.6934 212.449 64.3892 212.31 64.248 cv
212.218 64.1567 212.014 64.0972 211.698 64.0693 cv
211.698 63.9106 li
213.713 63.9106 li
213.713 64.0693 li
213.386 64.103 213.168 64.1821 213.06 64.3076 cv
212.95 64.4331 212.896 64.7197 212.896 65.168 cv
212.896 69.6694 li
212.749 69.6694 li
208.954 64.98 li
208.954 68.3091 li
208.954 68.7764 209.022 69.0811 209.159 69.2231 cv
209.249 69.3149 209.448 69.3774 209.759 69.4106 cv
209.759 69.5693 li
207.744 69.5693 li
207.744 69.4106 li
cp
f
213.939 69.4106 mo
214.255 69.3774 214.459 69.3213 214.553 69.2427 cv
214.646 69.1636 214.693 68.9634 214.693 68.6421 cv
214.693 64.8379 li
214.693 64.5347 214.647 64.3359 214.555 64.2427 cv
214.463 64.1494 214.258 64.0918 213.939 64.0693 cv
213.939 63.9106 li
216.36 63.9106 li
216.36 64.0693 li
216.045 64.0864 215.833 64.1377 215.726 64.2241 cv
215.618 64.3105 215.564 64.4956 215.564 64.7793 cv
215.564 68.8887 li
215.564 68.9834 215.58 69.0576 215.612 69.1123 cv
215.645 69.1665 215.716 69.2007 215.824 69.2144 cv
215.889 69.2227 215.956 69.2285 216.027 69.231 cv
216.099 69.2339 216.232 69.2354 216.429 69.2354 cv
217.191 69.2354 217.707 69.1729 217.976 69.0474 cv
218.244 68.9219 218.504 68.6021 218.756 68.0869 cv
218.974 68.0869 li
218.555 69.5693 li
213.939 69.5693 li
213.939 69.4106 li
cp
f
220.843 68.7363 mo
221.198 69.1665 221.634 69.3813 222.151 69.3813 cv
222.657 69.3813 223.09 69.1719 223.449 68.7529 cv
223.809 68.334 223.988 67.6636 223.988 66.7422 cv
223.988 65.8096 223.807 65.1357 223.443 64.7212 cv
223.079 64.3062 222.649 64.0986 222.151 64.0986 cv
221.637 64.0986 221.201 64.314 220.845 64.7441 cv
220.488 65.1743 220.311 65.8403 220.311 66.7422 cv
220.311 67.6416 220.488 68.3062 220.843 68.7363 cv
cp
220.201 64.5454 mo
220.729 64.042 221.379 63.7896 222.149 63.7896 cv
222.923 63.7896 223.573 64.043 224.102 64.5498 cv
224.674 65.0981 224.96 65.8291 224.96 66.7422 cv
224.96 67.6694 224.664 68.4072 224.072 68.9556 cv
223.541 69.4453 222.9 69.6904 222.149 69.6904 cv
221.345 69.6904 220.678 69.4189 220.146 68.876 cv
219.608 68.3223 219.339 67.6108 219.339 66.7422 cv
219.339 65.8291 219.626 65.0967 220.201 64.5454 cv
cp
f
227.557 68.6421 mo
227.448 69.0127 227.289 69.3618 227.079 69.6904 cv
226.858 70.041 226.564 70.3682 226.195 70.6719 cv
225.953 70.8721 225.749 71.0127 225.584 71.0938 cv
225.505 70.9556 li
225.935 70.6299 226.249 70.2974 226.447 69.9575 cv
226.799 69.3564 226.975 68.5615 226.975 67.5732 cv
226.975 66.7744 226.894 66.1216 226.731 65.6147 cv
226.506 64.8994 226.097 64.3369 225.505 63.9277 cv
225.613 63.7896 li
226.055 64.0347 226.465 64.4053 226.845 64.9004 cv
227.429 65.6636 227.721 66.5181 227.721 67.4648 cv
227.721 67.8794 227.666 68.272 227.557 68.6421 cv
cp
f
125.972 76.6025 mo
125.856 76.7959 125.774 77.0396 125.724 77.333 cv
127.997 77.333 li
127.957 76.9751 127.889 76.708 127.792 76.5327 cv
127.616 76.2178 127.321 76.0601 126.909 76.0601 cv
126.499 76.0601 126.188 76.2412 125.972 76.6025 cv
cp
128.552 76.1919 mo
128.932 76.541 129.122 77.0356 129.122 77.6763 cv
125.702 77.6763 li
125.738 78.5049 125.927 79.1084 126.268 79.4873 cv
126.609 79.8657 127.013 80.0547 127.479 80.0547 cv
127.856 80.0547 128.175 79.9565 128.433 79.7603 cv
128.691 79.564 128.931 79.2852 129.149 78.9243 cv
129.338 78.9888 li
129.19 79.4443 128.915 79.8657 128.511 80.2524 cv
128.107 80.6401 127.612 80.8335 127.027 80.8335 cv
126.353 80.8335 125.831 80.5791 125.463 80.0708 cv
125.095 79.563 124.911 78.9775 124.911 78.3154 cv
124.911 77.5957 125.124 76.9751 125.552 76.4521 cv
125.979 75.9297 126.535 75.6685 127.221 75.6685 cv
127.728 75.6685 128.171 75.8428 128.552 76.1919 cv
cp
0 .949219 .832031 0 cmyk
f
131.214 72.3647 mo
131.8 72.3647 li
131.8 74.2314 li
133.673 74.2314 li
133.673 74.8159 li
131.8 74.8159 li
131.8 76.6826 li
131.214 76.6826 li
131.214 74.8159 li
129.342 74.8159 li
129.342 74.2314 li
131.214 74.2314 li
131.214 72.3647 li
cp
f
133.938 76.6025 mo
133.823 76.7959 133.741 77.0396 133.69 77.333 cv
135.964 77.333 li
135.924 76.9751 135.855 76.708 135.759 76.5327 cv
135.583 76.2178 135.288 76.0601 134.876 76.0601 cv
134.466 76.0601 134.154 76.2412 133.938 76.6025 cv
cp
136.519 76.1919 mo
136.898 76.541 137.089 77.0356 137.089 77.6763 cv
133.669 77.6763 li
133.705 78.5049 133.894 79.1084 134.234 79.4873 cv
134.576 79.8657 134.979 80.0547 135.446 80.0547 cv
135.823 80.0547 136.142 79.9565 136.399 79.7603 cv
136.658 79.564 136.897 79.2852 137.116 78.9243 cv
137.305 78.9888 li
137.157 79.4443 136.882 79.8657 136.478 80.2524 cv
136.074 80.6401 135.579 80.8335 134.994 80.8335 cv
134.319 80.8335 133.798 80.5791 133.43 80.0708 cv
133.062 79.563 132.878 78.9775 132.878 78.3154 cv
132.878 77.5957 133.091 76.9751 133.519 76.4521 cv
133.945 75.9297 134.502 75.6685 135.188 75.6685 cv
135.694 75.6685 136.138 75.8428 136.519 76.1919 cv
cp
f
140.744 73.9385 mo
140.744 74.3516 li
136.418 74.3516 li
136.418 73.9385 li
140.744 73.9385 li
cp
f
146.496 73.375 mo
146.604 73.2646 146.737 73.2095 146.895 73.2095 cv
147.049 73.2095 147.182 73.2646 147.291 73.375 cv
147.4 73.4854 147.455 73.6172 147.455 73.7705 cv
147.455 73.9233 147.4 74.0547 147.291 74.1631 cv
147.182 74.272 147.049 74.3262 146.895 74.3262 cv
146.737 74.3262 146.604 74.272 146.496 74.1631 cv
146.389 74.0547 146.335 73.9233 146.335 73.7705 cv
146.335 73.6172 146.389 73.4854 146.496 73.375 cv
cp
145.476 82.4038 mo
145.653 82.6274 145.811 82.7393 145.947 82.7393 cv
146.173 82.7393 146.326 82.6089 146.405 82.3477 cv
146.451 82.1904 146.477 81.9277 146.48 81.5596 cv
146.483 81.4272 146.485 81.1016 146.485 80.583 cv
146.485 77.0537 li
146.485 76.8101 146.462 76.6304 146.416 76.5142 cv
146.369 76.3975 146.261 76.3394 146.093 76.3394 cv
146.042 76.3394 145.977 76.3486 145.896 76.3662 cv
145.815 76.3843 145.731 76.4058 145.646 76.4307 cv
145.646 76.2642 li
146.104 76.1138 li
146.215 76.0781 146.359 76.0288 146.537 75.9663 cv
146.715 75.9038 146.884 75.8418 147.046 75.7813 cv
147.369 75.6685 li
147.383 75.6899 147.391 75.7148 147.391 75.7437 cv
147.391 80.7046 li
147.391 81.3237 147.312 81.8071 147.153 82.1543 cv
146.866 82.7915 146.316 83.1099 145.506 83.1099 cv
145.239 83.1099 145.004 83.0562 144.797 82.9487 cv
144.591 82.8413 144.487 82.6982 144.487 82.5195 cv
144.487 82.4014 144.529 82.2964 144.611 82.2051 cv
144.694 82.1138 144.8 82.0684 144.929 82.0684 cv
145.116 82.0684 145.298 82.1802 145.476 82.4038 cv
cp
f
149.464 76.6025 mo
149.349 76.7959 149.267 77.0396 149.216 77.333 cv
151.489 77.333 li
151.449 76.9751 151.381 76.708 151.284 76.5327 cv
151.108 76.2178 150.813 76.0601 150.401 76.0601 cv
149.991 76.0601 149.68 76.2412 149.464 76.6025 cv
cp
152.044 76.1919 mo
152.424 76.541 152.614 77.0356 152.614 77.6763 cv
149.194 77.6763 li
149.23 78.5049 149.419 79.1084 149.76 79.4873 cv
150.102 79.8657 150.505 80.0547 150.972 80.0547 cv
151.349 80.0547 151.667 79.9565 151.925 79.7603 cv
152.184 79.564 152.423 79.2852 152.642 78.9243 cv
152.83 78.9888 li
152.683 79.4443 152.407 79.8657 152.003 80.2524 cv
151.6 80.6401 151.104 80.8335 150.52 80.8335 cv
149.845 80.8335 149.323 80.5791 148.955 80.0708 cv
148.587 79.563 148.403 78.9775 148.403 78.3154 cv
148.403 77.5957 148.616 76.9751 149.044 76.4521 cv
149.471 75.9297 150.027 75.6685 150.713 75.6685 cv
151.22 75.6685 151.663 75.8428 152.044 76.1919 cv
cp
f
155.889 75.7544 mo
155.889 76.1406 li
154.79 76.1406 li
154.779 79.2334 li
154.779 79.5054 154.803 79.7114 154.85 79.8511 cv
154.936 80.0977 155.104 80.2212 155.355 80.2212 cv
155.485 80.2212 155.598 80.1909 155.692 80.1299 cv
155.787 80.0693 155.896 79.9727 156.019 79.8403 cv
156.158 79.9585 li
156.04 80.1191 li
155.853 80.3701 155.655 80.5474 155.447 80.6509 cv
155.239 80.7549 155.038 80.8066 154.844 80.8066 cv
154.42 80.8066 154.133 80.6187 153.982 80.2427 cv
153.899 80.0386 153.858 79.7559 153.858 79.3945 cv
153.858 76.1406 li
153.271 76.1406 li
153.254 76.1299 153.24 76.1191 153.231 76.1084 cv
153.222 76.0977 153.218 76.0835 153.218 76.0654 cv
153.218 76.0298 153.226 76.002 153.242 75.9824 cv
153.258 75.9629 153.31 75.917 153.396 75.8457 cv
153.644 75.6416 153.821 75.4761 153.932 75.3486 cv
154.041 75.2217 154.298 74.8862 154.704 74.3423 cv
154.751 74.3423 154.778 74.3457 154.787 74.353 cv
154.797 74.3604 154.801 74.3867 154.801 74.4336 cv
154.801 75.7544 li
155.889 75.7544 li
cp
f
156.724 79.0132 mo
156.901 79.0132 li
156.983 79.4214 157.095 79.7349 157.234 79.9531 cv
157.485 80.354 157.853 80.5542 158.336 80.5542 cv
158.604 80.5542 158.816 80.48 158.973 80.3315 cv
159.129 80.1831 159.206 79.9907 159.206 79.7544 cv
159.206 79.604 159.161 79.459 159.072 79.3193 cv
158.982 79.1797 158.824 79.0439 158.598 78.9111 cv
157.995 78.5679 li
157.554 78.3315 157.229 78.0933 157.021 77.8535 cv
156.812 77.6138 156.708 77.3311 156.708 77.0054 cv
156.708 76.6045 156.852 76.2749 157.139 76.0171 cv
157.426 75.7598 157.786 75.6309 158.221 75.6309 cv
158.411 75.6309 158.62 75.6665 158.849 75.7383 cv
159.076 75.8096 159.205 75.8457 159.233 75.8457 cv
159.298 75.8457 159.345 75.8364 159.373 75.8188 cv
159.402 75.8008 159.428 75.772 159.449 75.7329 cv
159.578 75.7329 li
159.616 77.231 li
159.449 77.231 li
159.377 76.8838 159.28 76.6133 159.158 76.4199 cv
158.936 76.062 158.614 75.8833 158.194 75.8833 cv
157.942 75.8833 157.745 75.96 157.602 76.1138 cv
157.458 76.2681 157.386 76.4487 157.386 76.6563 cv
157.386 76.9858 157.634 77.2793 158.129 77.5366 cv
158.84 77.918 li
159.605 78.3335 159.987 78.8164 159.987 79.3677 cv
159.987 79.79 159.829 80.1353 159.512 80.4038 cv
159.194 80.6724 158.779 80.8066 158.267 80.8066 cv
158.052 80.8066 157.809 80.771 157.536 80.6992 cv
157.264 80.6274 157.103 80.5918 157.052 80.5918 cv
157.009 80.5918 156.972 80.6069 156.939 80.6377 cv
156.906 80.668 156.882 80.7046 156.863 80.7476 cv
156.724 80.7476 li
156.724 79.0132 li
cp
f
167.542 75.5879 mo
167.862 75.2798 168.022 74.9399 168.022 74.5679 cv
168.022 74.2886 167.941 74.063 167.777 73.8911 cv
167.614 73.7192 167.407 73.6333 167.155 73.6333 cv
166.883 73.6333 166.672 73.7212 166.522 73.8965 cv
166.374 74.0718 166.3 74.3047 166.3 74.5947 cv
166.3 74.8198 166.341 75.0645 166.424 75.3276 cv
166.507 75.5903 166.614 75.8618 166.747 76.1406 cv
167.1 75.9438 167.364 75.7598 167.542 75.5879 cv
cp
166.845 80.103 mo
167.135 79.9888 167.411 79.8081 167.676 79.561 cv
167.335 79.1313 167.07 78.77 166.88 78.4766 cv
166.689 78.1831 166.392 77.6709 165.986 76.9409 cv
165.613 77.1592 165.328 77.3774 165.129 77.5957 cv
164.825 77.9321 164.673 78.3228 164.673 78.7661 cv
164.673 79.1743 164.807 79.5278 165.075 79.8267 cv
165.343 80.1255 165.687 80.2749 166.106 80.2749 cv
166.31 80.2749 166.556 80.2178 166.845 80.103 cv
cp
165.818 76.5596 mo
165.771 76.4629 165.717 76.3306 165.655 76.1621 cv
165.594 75.9941 165.55 75.8579 165.524 75.7544 cv
165.496 75.6396 165.473 75.5244 165.454 75.4077 cv
165.436 75.2915 165.427 75.1782 165.427 75.0669 cv
165.427 74.5518 165.585 74.124 165.9 73.7837 cv
166.216 73.4438 166.615 73.2739 167.099 73.2739 cv
167.54 73.2739 167.902 73.3936 168.185 73.6333 cv
168.468 73.873 168.609 74.1953 168.609 74.6001 cv
168.609 75.0723 168.431 75.459 168.071 75.7598 cv
167.713 76.0601 167.327 76.3018 166.915 76.4844 cv
167.234 77.0571 167.469 77.4614 167.619 77.6978 cv
167.77 77.9341 168.023 78.2832 168.382 78.7446 cv
168.766 78.2798 169.031 77.8823 169.179 77.5527 cv
169.326 77.2236 169.399 76.9604 169.399 76.7637 cv
169.399 76.563 169.326 76.4253 169.179 76.3501 cv
169.085 76.3037 168.924 76.2715 168.693 76.2534 cv
168.693 76.0225 li
171.087 76.0225 li
171.087 76.2534 li
170.845 76.2822 170.663 76.3252 170.544 76.3823 cv
170.349 76.479 170.182 76.6528 170.044 76.9033 cv
169.762 77.4131 li
169.559 77.7783 169.39 78.0576 169.254 78.251 cv
169.118 78.4443 168.914 78.7109 168.643 79.0508 cv
168.788 79.2192 168.953 79.3892 169.138 79.561 cv
169.54 79.9009 169.942 80.0708 170.345 80.0708 cv
170.584 80.0708 170.787 80.0137 170.954 79.8994 cv
171.056 79.8276 171.191 79.6899 171.362 79.4858 cv
171.523 79.6147 li
171.502 79.7007 171.426 79.8359 171.295 80.02 cv
171.165 80.2046 171.04 80.3486 170.92 80.4521 cv
170.731 80.6167 170.513 80.7334 170.263 80.8013 cv
170.114 80.8442 169.969 80.8657 169.828 80.8657 cv
169.477 80.8657 169.129 80.7563 168.784 80.5381 cv
168.578 80.4092 168.303 80.1821 167.958 79.8564 cv
167.633 80.1533 167.305 80.3809 166.972 80.5381 cv
166.538 80.7529 166.062 80.8604 165.541 80.8604 cv
164.963 80.8604 164.501 80.707 164.156 80.4014 cv
163.812 80.0952 163.639 79.6772 163.639 79.1475 cv
163.639 78.6499 163.793 78.2124 164.102 77.835 cv
164.409 77.457 164.841 77.1128 165.396 76.8013 cv
165.818 76.5596 li
cp
f
175.11 79.0132 mo
175.288 79.0132 li
175.37 79.4214 175.481 79.7349 175.621 79.9531 cv
175.872 80.354 176.239 80.5542 176.723 80.5542 cv
176.991 80.5542 177.203 80.48 177.359 80.3315 cv
177.516 80.1831 177.593 79.9907 177.593 79.7544 cv
177.593 79.604 177.548 79.459 177.459 79.3193 cv
177.369 79.1797 177.211 79.0439 176.984 78.9111 cv
176.382 78.5679 li
175.94 78.3315 175.615 78.0933 175.407 77.8535 cv
175.198 77.6138 175.095 77.3311 175.095 77.0054 cv
175.095 76.6045 175.238 76.2749 175.525 76.0171 cv
175.813 75.7598 176.173 75.6309 176.607 75.6309 cv
176.798 75.6309 177.007 75.6665 177.235 75.7383 cv
177.463 75.8096 177.592 75.8457 177.62 75.8457 cv
177.685 75.8457 177.731 75.8364 177.76 75.8188 cv
177.789 75.8008 177.814 75.772 177.836 75.7329 cv
177.965 75.7329 li
178.003 77.231 li
177.836 77.231 li
177.764 76.8838 177.667 76.6133 177.545 76.4199 cv
177.322 76.062 177.001 75.8833 176.581 75.8833 cv
176.329 75.8833 176.132 75.96 175.988 76.1138 cv
175.845 76.2681 175.772 76.4487 175.772 76.6563 cv
175.772 76.9858 176.021 77.2793 176.516 77.5366 cv
177.227 77.918 li
177.992 78.3335 178.374 78.8164 178.374 79.3677 cv
178.374 79.79 178.216 80.1353 177.898 80.4038 cv
177.581 80.6724 177.166 80.8066 176.653 80.8066 cv
176.438 80.8066 176.195 80.771 175.923 80.6992 cv
175.65 80.6274 175.489 80.5918 175.438 80.5918 cv
175.396 80.5918 175.358 80.6069 175.326 80.6377 cv
175.293 80.668 175.269 80.7046 175.25 80.7476 cv
175.11 80.7476 li
175.11 79.0132 li
cp
f
178.923 80.5542 mo
179.218 80.5151 179.41 80.4424 179.502 80.3369 cv
179.594 80.2314 179.64 79.9814 179.64 79.5879 cv
179.64 74.4336 li
179.64 74.2329 179.613 74.0854 179.562 73.9907 cv
179.509 73.8955 179.383 73.8481 179.182 73.8481 cv
179.142 73.8481 179.104 73.8511 179.065 73.8564 cv
179.028 73.8618 178.986 73.8677 178.939 73.875 cv
178.939 73.6816 li
179.098 73.6353 179.292 73.5791 179.523 73.5127 cv
179.755 73.4463 179.916 73.3989 180.006 73.3701 cv
180.522 73.2095 li
180.533 73.2471 li
180.533 76.5435 li
180.76 76.2856 180.961 76.0962 181.137 75.9746 cv
181.452 75.7598 181.794 75.6523 182.16 75.6523 cv
182.741 75.6523 183.139 75.8955 183.35 76.3823 cv
183.465 76.6401 183.522 76.9785 183.522 77.397 cv
183.522 79.5879 li
183.522 79.9673 183.566 80.2144 183.654 80.3286 cv
183.742 80.4434 183.923 80.5186 184.195 80.5542 cv
184.195 80.7046 li
181.863 80.7046 li
181.863 80.5542 li
182.176 80.5112 182.377 80.438 182.467 80.334 cv
182.557 80.2305 182.602 79.9814 182.602 79.5879 cv
182.602 77.4131 li
182.602 77.0659 182.543 76.7852 182.427 76.5703 cv
182.31 76.3555 182.09 76.248 181.767 76.248 cv
181.486 76.248 181.216 76.3486 180.953 76.5488 cv
180.691 76.7495 180.561 76.8799 180.561 76.9409 cv
180.561 79.5879 li
180.561 79.9888 180.607 80.2393 180.7 80.3394 cv
180.794 80.4399 180.993 80.5112 181.298 80.5542 cv
181.298 80.7046 li
178.923 80.7046 li
178.923 80.5542 li
cp
f
187.502 77.73 mo
187.089 77.8662 186.748 78.0166 186.479 78.1812 cv
185.962 78.4995 185.703 78.8613 185.703 79.2656 cv
185.703 79.5913 185.812 79.8311 186.026 79.9854 cv
186.167 80.0854 186.322 80.1353 186.495 80.1353 cv
186.732 80.1353 186.959 80.0693 187.177 79.937 cv
187.394 79.8042 187.502 79.6362 187.502 79.4321 cv
187.502 77.73 li
cp
185.525 78.3369 mo
185.855 78.1221 186.515 77.8306 187.502 77.4614 cv
187.502 77.0054 li
187.502 76.6401 187.466 76.3862 187.395 76.2427 cv
187.272 76.0029 187.02 75.8833 186.635 75.8833 cv
186.452 75.8833 186.277 75.9297 186.112 76.0225 cv
185.947 76.1191 185.865 76.252 185.865 76.4199 cv
185.865 76.4629 185.874 76.5356 185.892 76.6377 cv
185.91 76.7393 185.919 76.8047 185.919 76.8335 cv
185.919 77.0342 185.853 77.1733 185.72 77.2524 cv
185.645 77.2988 185.555 77.3223 185.45 77.3223 cv
185.289 77.3223 185.165 77.269 185.079 77.1636 cv
184.992 77.0581 184.949 76.9409 184.949 76.812 cv
184.949 76.5615 185.104 76.2993 185.415 76.0254 cv
185.726 75.7515 186.181 75.6147 186.78 75.6147 cv
187.477 75.6147 187.949 75.8403 188.197 76.291 cv
188.33 76.5381 188.396 76.8979 188.396 77.3701 cv
188.396 79.5234 li
188.396 79.731 188.41 79.874 188.439 79.9531 cv
188.486 80.0923 188.583 80.1621 188.73 80.1621 cv
188.813 80.1621 188.881 80.1499 188.935 80.1245 cv
188.988 80.0996 189.082 80.0386 189.215 79.9424 cv
189.215 80.2212 li
189.1 80.3608 188.976 80.4756 188.843 80.5649 cv
188.642 80.7012 188.438 80.769 188.229 80.769 cv
187.985 80.769 187.809 80.6904 187.699 80.5327 cv
187.589 80.3755 187.529 80.1875 187.519 79.9692 cv
187.245 80.2051 187.012 80.3809 186.818 80.4951 cv
186.491 80.6885 186.181 80.7852 185.887 80.7852 cv
185.578 80.7852 185.311 80.6768 185.084 80.4604 cv
184.857 80.2437 184.745 79.9692 184.745 79.6362 cv
184.745 79.1172 185.005 78.6841 185.525 78.3369 cv
cp
f
191.415 80.2563 mo
191.6 80.3765 191.817 80.436 192.069 80.436 cv
192.457 80.436 192.788 80.2441 193.063 79.8599 cv
193.338 79.4756 193.475 78.9399 193.475 78.2539 cv
193.475 77.5962 193.332 77.1045 193.047 76.7793 cv
192.761 76.4536 192.43 76.291 192.053 76.291 cv
191.787 76.291 191.545 76.3726 191.326 76.5352 cv
191.106 76.6978 190.997 76.8579 190.997 77.0151 cv
190.997 79.7124 li
191.091 79.9556 191.229 80.1367 191.415 80.2563 cv
cp
189.29 82.9219 mo
189.625 82.9004 189.839 82.8291 189.93 82.7075 cv
190.021 82.5854 190.065 82.394 190.065 82.1328 cv
190.065 76.9785 li
190.065 76.7065 190.032 76.5317 189.966 76.4551 cv
189.899 76.3779 189.774 76.3394 189.592 76.3394 cv
189.552 76.3394 189.516 76.3413 189.481 76.3447 cv
189.447 76.3486 189.397 76.3555 189.333 76.3662 cv
189.333 76.189 li
189.845 76.0225 li
189.863 76.019 190.224 75.8955 190.928 75.6523 cv
190.945 75.6523 190.959 75.6602 190.968 75.6763 cv
190.977 75.6924 190.981 75.7114 190.981 75.7329 cv
190.981 76.4575 li
191.218 76.2212 191.427 76.0459 191.606 75.9312 cv
191.929 75.731 192.261 75.6309 192.603 75.6309 cv
193.098 75.6309 193.524 75.8408 193.882 76.2607 cv
194.238 76.6812 194.417 77.2559 194.417 77.9854 cv
194.417 78.7007 194.203 79.3496 193.773 79.9321 cv
193.345 80.5151 192.805 80.8066 192.155 80.8066 cv
191.954 80.8066 191.78 80.7817 191.633 80.7314 cv
191.403 80.6563 191.191 80.5186 190.997 80.3184 cv
190.997 82.0791 li
190.997 82.4404 191.057 82.6626 191.175 82.7446 cv
191.294 82.8271 191.552 82.8828 191.95 82.9111 cv
191.95 83.0991 li
189.29 83.0991 li
189.29 82.9219 li
cp
f
196.027 76.6025 mo
195.912 76.7959 195.83 77.0396 195.779 77.333 cv
198.053 77.333 li
198.013 76.9751 197.944 76.708 197.848 76.5327 cv
197.672 76.2178 197.377 76.0601 196.965 76.0601 cv
196.555 76.0601 196.243 76.2412 196.027 76.6025 cv
cp
198.607 76.1919 mo
198.987 76.541 199.178 77.0356 199.178 77.6763 cv
195.758 77.6763 li
195.794 78.5049 195.982 79.1084 196.323 79.4873 cv
196.665 79.8657 197.068 80.0547 197.535 80.0547 cv
197.912 80.0547 198.23 79.9565 198.488 79.7603 cv
198.747 79.564 198.986 79.2852 199.205 78.9243 cv
199.394 78.9888 li
199.246 79.4443 198.971 79.8657 198.566 80.2524 cv
198.163 80.6401 197.668 80.8335 197.083 80.8335 cv
196.408 80.8335 195.887 80.5791 195.519 80.0708 cv
195.15 79.563 194.967 78.9775 194.967 78.3154 cv
194.967 77.5957 195.18 76.9751 195.607 76.4521 cv
196.034 75.9297 196.591 75.6685 197.276 75.6685 cv
197.783 75.6685 198.227 75.8428 198.607 76.1919 cv
cp
f
200.223 79.0132 mo
200.4 79.0132 li
200.482 79.4214 200.594 79.7349 200.733 79.9531 cv
200.984 80.354 201.352 80.5542 201.835 80.5542 cv
202.104 80.5542 202.315 80.48 202.472 80.3315 cv
202.628 80.1831 202.705 79.9907 202.705 79.7544 cv
202.705 79.604 202.66 79.459 202.571 79.3193 cv
202.481 79.1797 202.323 79.0439 202.097 78.9111 cv
201.494 78.5679 li
201.053 78.3315 200.728 78.0933 200.52 77.8535 cv
200.311 77.6138 200.207 77.3311 200.207 77.0054 cv
200.207 76.6045 200.351 76.2749 200.638 76.0171 cv
200.925 75.7598 201.285 75.6309 201.72 75.6309 cv
201.91 75.6309 202.119 75.6665 202.348 75.7383 cv
202.575 75.8096 202.704 75.8457 202.732 75.8457 cv
202.797 75.8457 202.844 75.8364 202.872 75.8188 cv
202.901 75.8008 202.927 75.772 202.948 75.7329 cv
203.077 75.7329 li
203.115 77.231 li
202.948 77.231 li
202.876 76.8838 202.779 76.6133 202.657 76.4199 cv
202.435 76.062 202.113 75.8833 201.693 75.8833 cv
201.441 75.8833 201.244 75.96 201.101 76.1138 cv
200.957 76.2681 200.885 76.4487 200.885 76.6563 cv
200.885 76.9858 201.133 77.2793 201.628 77.5366 cv
202.339 77.918 li
203.104 78.3335 203.486 78.8164 203.486 79.3677 cv
203.486 79.79 203.328 80.1353 203.011 80.4038 cv
202.693 80.6724 202.278 80.8066 201.766 80.8066 cv
201.551 80.8066 201.308 80.771 201.035 80.6992 cv
200.763 80.6274 200.602 80.5918 200.551 80.5918 cv
200.508 80.5918 200.471 80.6069 200.438 80.6377 cv
200.405 80.668 200.381 80.7046 200.362 80.7476 cv
200.223 80.7476 li
200.223 79.0132 li
cp
f
207.961 76.0068 mo
208.318 75.5586 208.74 75.1978 209.227 74.9248 cv
209.306 75.063 li
208.856 75.4194 208.535 75.7656 208.343 76.1025 cv
208.005 76.6899 207.836 77.4722 207.836 78.4497 cv
207.836 79.1733 207.899 79.7705 208.028 80.2412 cv
208.255 81.0649 208.681 81.6816 209.306 82.0908 cv
209.197 82.229 li
208.854 82.0645 208.482 81.7432 208.083 81.2642 cv
207.421 80.4707 207.09 79.5688 207.09 78.5581 cv
207.09 77.5894 207.381 76.7388 207.961 76.0068 cv
cp
f
209.591 80.5669 mo
209.848 80.5444 210.018 80.4995 210.102 80.4312 cv
210.186 80.3628 210.228 80.2173 210.228 79.9946 cv
210.228 78.1113 li
210.228 77.8354 210.201 77.6387 210.149 77.5205 cv
210.098 77.4019 210.004 77.3428 209.867 77.3428 cv
209.839 77.3428 209.802 77.3467 209.756 77.3535 cv
209.71 77.3604 209.662 77.3696 209.611 77.3804 cv
209.611 77.2427 li
209.771 77.187 209.933 77.1299 210.1 77.0713 cv
210.267 77.0132 210.383 76.9712 210.446 76.9463 cv
210.586 76.8936 210.729 76.8335 210.877 76.7666 cv
210.896 76.7666 210.908 76.7734 210.912 76.7876 cv
210.916 76.8013 210.918 76.8306 210.918 76.875 cv
210.918 77.5601 li
211.098 77.3125 211.271 77.1187 211.437 76.9795 cv
211.604 76.8403 211.776 76.771 211.956 76.771 cv
212.099 76.771 212.215 76.8135 212.305 76.8979 cv
212.394 76.9829 212.438 77.0898 212.438 77.2178 cv
212.438 77.332 212.404 77.4277 212.336 77.5059 cv
212.268 77.584 212.182 77.6226 212.078 77.6226 cv
211.973 77.6226 211.865 77.5742 211.758 77.4766 cv
211.65 77.3789 211.566 77.3306 211.505 77.3306 cv
211.407 77.3306 211.287 77.4092 211.145 77.5664 cv
211.002 77.7236 210.931 77.8857 210.931 78.0527 cv
210.931 79.936 li
210.931 80.1758 210.986 80.3418 211.099 80.4351 cv
211.21 80.5283 211.396 80.5723 211.655 80.5669 cv
211.655 80.7046 li
209.591 80.7046 li
209.591 80.5669 li
cp
f
213.316 77.5142 mo
213.227 77.6646 213.162 77.854 213.123 78.082 cv
214.891 78.082 li
214.86 77.8037 214.808 77.5962 214.731 77.46 cv
214.595 77.2148 214.366 77.0923 214.045 77.0923 cv
213.727 77.0923 213.483 77.2329 213.316 77.5142 cv
cp
215.322 77.1948 mo
215.618 77.4663 215.767 77.8511 215.767 78.3491 cv
213.106 78.3491 li
213.135 78.9937 213.281 79.4634 213.546 79.7578 cv
213.812 80.0522 214.126 80.1992 214.489 80.1992 cv
214.782 80.1992 215.029 80.123 215.23 79.9702 cv
215.432 79.8174 215.617 79.6006 215.787 79.3203 cv
215.934 79.3701 li
215.819 79.7241 215.605 80.0518 215.291 80.353 cv
214.977 80.6543 214.592 80.8047 214.137 80.8047 cv
213.612 80.8047 213.206 80.6069 212.92 80.2119 cv
212.634 79.8164 212.491 79.3613 212.491 78.8462 cv
212.491 78.2866 212.657 77.8037 212.989 77.397 cv
213.321 76.9907 213.754 76.7876 214.288 76.7876 cv
214.682 76.7876 215.026 76.9233 215.322 77.1948 cv
cp
f
216.579 79.3892 mo
216.718 79.3892 li
216.781 79.7065 216.868 79.9502 216.977 80.1201 cv
217.171 80.4316 217.457 80.5879 217.833 80.5879 cv
218.042 80.5879 218.207 80.5298 218.328 80.4146 cv
218.449 80.2988 218.51 80.1494 218.51 79.9653 cv
218.51 79.8486 218.476 79.7358 218.405 79.627 cv
218.336 79.5186 218.213 79.4126 218.037 79.3096 cv
217.567 79.0425 li
217.225 78.8589 216.972 78.6738 216.81 78.4873 cv
216.647 78.3008 216.566 78.0806 216.566 77.8271 cv
216.566 77.5156 216.678 77.2593 216.901 77.0591 cv
217.125 76.8584 217.405 76.7583 217.743 76.7583 cv
217.892 76.7583 218.054 76.7861 218.231 76.8418 cv
218.409 76.8975 218.509 76.9253 218.531 76.9253 cv
218.581 76.9253 218.617 76.9185 218.64 76.9043 cv
218.662 76.8906 218.682 76.8682 218.698 76.8374 cv
218.799 76.8374 li
218.828 78.0029 li
218.698 78.0029 li
218.643 77.7329 218.567 77.5225 218.473 77.3721 cv
218.299 77.0938 218.05 76.9546 217.723 76.9546 cv
217.527 76.9546 217.373 77.0146 217.262 77.1343 cv
217.15 77.2539 217.095 77.3945 217.095 77.5557 cv
217.095 77.812 217.287 78.0405 217.672 78.2407 cv
218.226 78.5371 li
218.82 78.8604 219.117 79.2358 219.117 79.6646 cv
219.117 79.9932 218.994 80.2617 218.747 80.4707 cv
218.501 80.6797 218.178 80.7837 217.779 80.7837 cv
217.612 80.7837 217.423 80.7559 217.211 80.7002 cv
216.999 80.6445 216.873 80.6167 216.834 80.6167 cv
216.801 80.6167 216.771 80.6289 216.746 80.6523 cv
216.722 80.6763 216.702 80.7046 216.688 80.7378 cv
216.579 80.7378 li
216.579 79.3892 li
cp
f
220.529 80.665 mo
220.438 80.5718 220.392 80.4595 220.392 80.3286 cv
220.392 80.1978 220.438 80.0864 220.531 79.9946 cv
220.625 79.9028 220.737 79.8569 220.869 79.8569 cv
221 79.8569 221.111 79.9028 221.204 79.9946 cv
221.296 80.0864 221.342 80.1978 221.342 80.3286 cv
221.342 80.4595 221.297 80.5718 221.206 80.665 cv
221.115 80.7583 221.003 80.8047 220.869 80.8047 cv
220.734 80.8047 220.622 80.7583 220.529 80.665 cv
cp
f
223.855 80.5459 mo
224.21 80.5098 224.438 80.4297 224.538 80.3062 cv
224.639 80.1821 224.688 79.895 224.688 79.4443 cv
224.688 75.6763 li
224.571 75.5386 li
224.445 75.3911 224.339 75.3003 224.251 75.2651 cv
224.163 75.2305 224.031 75.2104 223.855 75.2046 cv
223.855 75.0459 li
225.319 75.0459 li
228.631 79.1382 li
228.631 76.2959 li
228.631 75.8286 228.561 75.5244 228.421 75.3833 cv
228.329 75.292 228.125 75.2324 227.81 75.2046 cv
227.81 75.0459 li
229.824 75.0459 li
229.824 75.2046 li
229.497 75.2383 229.279 75.3174 229.171 75.4429 cv
229.062 75.5684 229.008 75.855 229.008 76.3032 cv
229.008 80.8047 li
228.86 80.8047 li
225.065 76.1152 li
225.065 79.4443 li
225.065 79.9116 225.134 80.2163 225.271 80.3584 cv
225.36 80.4502 225.56 80.5127 225.87 80.5459 cv
225.87 80.7046 li
223.855 80.7046 li
223.855 80.5459 li
cp
f
230.051 80.5459 mo
230.405 80.5098 230.633 80.4297 230.733 80.3062 cv
230.834 80.1821 230.884 79.895 230.884 79.4443 cv
230.884 75.6763 li
230.767 75.5386 li
230.641 75.3911 230.534 75.3003 230.446 75.2651 cv
230.358 75.2305 230.227 75.2104 230.051 75.2046 cv
230.051 75.0459 li
231.515 75.0459 li
234.826 79.1382 li
234.826 76.2959 li
234.826 75.8286 234.756 75.5244 234.616 75.3833 cv
234.524 75.292 234.32 75.2324 234.005 75.2046 cv
234.005 75.0459 li
236.02 75.0459 li
236.02 75.2046 li
235.692 75.2383 235.475 75.3174 235.366 75.4429 cv
235.257 75.5684 235.203 75.855 235.203 76.3032 cv
235.203 80.8047 li
235.056 80.8047 li
231.261 76.1152 li
231.261 79.4443 li
231.261 79.9116 231.329 80.2163 231.466 80.3584 cv
231.556 80.4502 231.755 80.5127 232.065 80.5459 cv
232.065 80.7046 li
230.051 80.7046 li
230.051 80.5459 li
cp
f
236.246 80.5459 mo
236.562 80.5127 236.766 80.4565 236.859 80.3779 cv
236.953 80.2988 237 80.0986 237 79.7773 cv
237 75.9731 li
237 75.6699 236.954 75.4712 236.861 75.3779 cv
236.77 75.2847 236.564 75.2271 236.246 75.2046 cv
236.246 75.0459 li
238.667 75.0459 li
238.667 75.2046 li
238.352 75.2217 238.14 75.2729 238.032 75.3594 cv
237.925 75.4458 237.871 75.6309 237.871 75.9146 cv
237.871 80.0239 li
237.871 80.1187 237.887 80.1929 237.919 80.2476 cv
237.951 80.3018 238.022 80.3359 238.131 80.3496 cv
238.195 80.3579 238.263 80.3638 238.334 80.3662 cv
238.405 80.3691 238.539 80.3706 238.735 80.3706 cv
239.498 80.3706 240.014 80.3081 240.282 80.1826 cv
240.551 80.0571 240.811 79.7373 241.063 79.2222 cv
241.28 79.2222 li
240.861 80.7046 li
236.246 80.7046 li
236.246 80.5459 li
cp
f
243.149 79.8716 mo
243.505 80.3018 243.94 80.5166 244.458 80.5166 cv
244.964 80.5166 245.396 80.3071 245.756 79.8882 cv
246.115 79.4692 246.295 78.7988 246.295 77.8774 cv
246.295 76.9448 246.113 76.271 245.75 75.8564 cv
245.386 75.4414 244.956 75.2339 244.458 75.2339 cv
243.943 75.2339 243.508 75.4492 243.151 75.8794 cv
242.795 76.3096 242.617 76.9756 242.617 77.8774 cv
242.617 78.7769 242.795 79.4414 243.149 79.8716 cv
cp
242.508 75.6807 mo
243.036 75.1772 243.686 74.9248 244.456 74.9248 cv
245.229 74.9248 245.88 75.1782 246.408 75.6851 cv
246.98 76.2334 247.267 76.9644 247.267 77.8774 cv
247.267 78.8047 246.971 79.5425 246.379 80.0908 cv
245.848 80.5806 245.207 80.8257 244.456 80.8257 cv
243.651 80.8257 242.984 80.5542 242.453 80.0112 cv
241.915 79.4575 241.646 78.7461 241.646 77.8774 cv
241.646 76.9644 241.933 76.2319 242.508 75.6807 cv
cp
f
249.863 79.7773 mo
249.755 80.1479 249.596 80.4971 249.386 80.8257 cv
249.165 81.1763 248.871 81.5034 248.502 81.8071 cv
248.26 82.0073 248.056 82.1479 247.891 82.229 cv
247.812 82.0908 li
248.241 81.7651 248.556 81.4326 248.754 81.0928 cv
249.105 80.4917 249.281 79.6968 249.281 78.7085 cv
249.281 77.9097 249.2 77.2568 249.038 76.75 cv
248.813 76.0347 248.403 75.4722 247.812 75.063 cv
247.92 74.9248 li
248.361 75.1699 248.771 75.5405 249.151 76.0356 cv
249.735 76.7988 250.027 77.6533 250.027 78.6001 cv
250.027 79.0146 249.973 79.4072 249.863 79.7773 cv
cp
f
126.335 56.3774 mo
126.423 56.4351 126.604 56.4634 126.882 56.4634 cv
127.743 56.4634 128.452 56.2935 129.009 55.9531 cv
129.863 55.4302 130.291 54.5361 130.291 53.2715 cv
130.291 52.1431 129.938 51.2939 129.235 50.7246 cv
128.632 50.2373 127.833 49.9937 126.839 49.9937 cv
126.591 49.9937 126.423 50.0205 126.335 50.0742 cv
126.247 50.1279 126.203 50.2461 126.203 50.4287 cv
126.203 56.0229 li
126.203 56.2021 126.247 56.3203 126.335 56.3774 cv
cp
124.113 56.6675 mo
124.516 56.625 124.777 56.5527 124.899 56.4512 cv
125.021 56.3496 125.083 56.0928 125.083 55.6797 cv
125.083 50.7886 li
125.083 50.3877 125.023 50.1299 124.905 50.0151 cv
124.786 49.9009 124.522 49.8291 124.113 49.8003 cv
124.113 49.5962 li
127.086 49.5962 li
128.088 49.5962 128.936 49.7612 129.628 50.0903 cv
130.878 50.6812 131.502 51.7368 131.502 53.2583 cv
131.502 53.8057 131.39 54.3267 131.166 54.8208 cv
130.941 55.3145 130.603 55.7314 130.15 56.0718 cv
129.863 56.2861 129.565 56.4492 129.257 56.5601 cv
128.692 56.7676 128 56.8716 127.178 56.8716 cv
124.113 56.8716 li
124.113 56.6675 li
cp
.769531 .238281 .976562 .136719 cmyk
f
132.111 56.6675 mo
132.561 56.6357 132.851 56.5688 132.983 56.4673 cv
133.116 56.3657 133.183 56.1035 133.183 55.6797 cv
133.183 50.7886 li
133.183 50.3838 133.116 50.1235 132.983 50.0073 cv
132.851 49.8906 132.561 49.8218 132.111 49.8003 cv
132.111 49.5962 li
135.375 49.5962 li
135.375 49.8003 li
134.926 49.8218 134.636 49.8906 134.503 50.0073 cv
134.37 50.1235 134.304 50.3838 134.304 50.7886 cv
134.304 55.6797 li
134.304 56.1035 134.37 56.3657 134.503 56.4673 cv
134.636 56.5688 134.926 56.6357 135.375 56.6675 cv
135.375 56.8716 li
132.111 56.8716 li
132.111 56.6675 li
cp
f
136.361 54.6597 mo
136.548 55.1533 136.767 55.5474 137.018 55.8408 cv
137.455 56.3525 137.998 56.6084 138.646 56.6084 cv
138.998 56.6084 139.302 56.4976 139.559 56.2754 cv
139.814 56.0537 139.942 55.7441 139.942 55.3467 cv
139.942 54.9888 139.813 54.6772 139.556 54.4126 cv
139.388 54.2441 139.032 53.9922 138.491 53.6553 cv
137.551 53.0703 li
137.268 52.8911 137.042 52.7104 136.873 52.5278 cv
136.561 52.1807 136.404 51.7979 136.404 51.3789 cv
136.404 50.8242 136.589 50.3623 136.959 49.9937 cv
137.329 49.625 137.819 49.4409 138.43 49.4409 cv
138.681 49.4409 138.983 49.5024 139.337 49.626 cv
139.69 49.7495 139.893 49.811 139.942 49.811 cv
140.079 49.811 140.174 49.7788 140.226 49.7144 cv
140.277 49.6499 140.318 49.5586 140.347 49.4409 cv
140.573 49.4409 li
140.815 51.7817 li
140.552 51.7817 li
140.372 51.0767 140.084 50.5845 139.687 50.3052 cv
139.29 50.0259 138.897 49.8862 138.51 49.8862 cv
138.209 49.8862 137.945 49.9751 137.721 50.1523 cv
137.497 50.3291 137.385 50.5752 137.385 50.8901 cv
137.385 51.1733 137.471 51.4146 137.643 51.6152 cv
137.814 51.8193 138.082 52.0322 138.444 52.2539 cv
139.413 52.8501 li
140.019 53.2222 140.446 53.564 140.695 53.8755 cv
140.94 54.1904 141.063 54.563 141.063 54.9922 cv
141.063 55.5688 140.845 56.0503 140.408 56.4365 cv
139.973 56.8232 139.415 57.0166 138.736 57.0166 cv
138.396 57.0166 138.039 56.9521 137.667 56.8232 cv
137.296 56.6943 137.083 56.6299 137.029 56.6299 cv
136.899 56.6299 136.813 56.6694 136.768 56.748 cv
136.723 56.8267 136.693 56.9111 136.679 57.0005 cv
136.437 57.0005 li
136.108 54.6597 li
136.361 54.6597 li
cp
f
145.915 49.542 mo
146.023 49.4316 146.156 49.3765 146.313 49.3765 cv
146.468 49.3765 146.601 49.4316 146.71 49.542 cv
146.819 49.6523 146.874 49.7842 146.874 49.9375 cv
146.874 50.0903 146.819 50.2217 146.71 50.3301 cv
146.601 50.439 146.468 50.4932 146.313 50.4932 cv
146.156 50.4932 146.023 50.439 145.915 50.3301 cv
145.808 50.2217 145.754 50.0903 145.754 49.9375 cv
145.754 49.7842 145.808 49.6523 145.915 49.542 cv
cp
144.895 58.5708 mo
145.072 58.7944 145.229 58.9063 145.366 58.9063 cv
145.592 58.9063 145.745 58.7759 145.824 58.5146 cv
145.87 58.3574 145.896 58.0947 145.899 57.7266 cv
145.902 57.5942 145.904 57.2686 145.904 56.75 cv
145.904 53.2207 li
145.904 52.9771 145.881 52.7974 145.835 52.6812 cv
145.788 52.5645 145.68 52.5063 145.512 52.5063 cv
145.461 52.5063 145.396 52.5156 145.314 52.5332 cv
145.234 52.5513 145.15 52.5728 145.064 52.5977 cv
145.064 52.4312 li
145.522 52.2808 li
145.634 52.2451 145.778 52.1958 145.956 52.1333 cv
146.134 52.0708 146.303 52.0088 146.465 51.9482 cv
146.788 51.8354 li
146.802 51.8569 146.81 51.8818 146.81 51.9106 cv
146.81 56.8716 li
146.81 57.4907 146.73 57.9741 146.572 58.3213 cv
146.285 58.9585 145.735 59.2769 144.925 59.2769 cv
144.658 59.2769 144.423 59.2231 144.216 59.1157 cv
144.01 59.0083 143.906 58.8652 143.906 58.6865 cv
143.906 58.5684 143.948 58.4634 144.03 58.3721 cv
144.113 58.2808 144.219 58.2354 144.348 58.2354 cv
144.535 58.2354 144.717 58.3472 144.895 58.5708 cv
cp
f
148.883 52.7695 mo
148.768 52.9629 148.686 53.2065 148.635 53.5 cv
150.908 53.5 li
150.868 53.1421 150.8 52.875 150.703 52.6997 cv
150.527 52.3848 150.232 52.2271 149.82 52.2271 cv
149.41 52.2271 149.099 52.4082 148.883 52.7695 cv
cp
151.463 52.3589 mo
151.843 52.708 152.033 53.2026 152.033 53.8433 cv
148.613 53.8433 li
148.649 54.6719 148.838 55.2754 149.179 55.6543 cv
149.521 56.0327 149.924 56.2217 150.391 56.2217 cv
150.768 56.2217 151.086 56.1235 151.344 55.9272 cv
151.603 55.731 151.842 55.4521 152.061 55.0913 cv
152.249 55.1558 li
152.102 55.6113 151.826 56.0327 151.422 56.4194 cv
151.019 56.8071 150.523 57.0005 149.938 57.0005 cv
149.264 57.0005 148.742 56.7461 148.374 56.2378 cv
148.006 55.73 147.822 55.1445 147.822 54.4824 cv
147.822 53.7627 148.035 53.1421 148.463 52.6191 cv
148.89 52.0967 149.446 51.8354 150.132 51.8354 cv
150.639 51.8354 151.082 52.0098 151.463 52.3589 cv
cp
f
155.308 51.9214 mo
155.308 52.3076 li
154.209 52.3076 li
154.198 55.4004 li
154.198 55.6724 154.222 55.8784 154.269 56.0181 cv
154.354 56.2646 154.523 56.3882 154.774 56.3882 cv
154.904 56.3882 155.017 56.3579 155.111 56.2969 cv
155.206 56.2363 155.315 56.1396 155.438 56.0073 cv
155.577 56.1255 li
155.459 56.2861 li
155.271 56.5371 155.074 56.7144 154.866 56.8179 cv
154.658 56.9219 154.457 56.9736 154.263 56.9736 cv
153.839 56.9736 153.552 56.7856 153.401 56.4097 cv
153.318 56.2056 153.277 55.9229 153.277 55.5615 cv
153.277 52.3076 li
152.69 52.3076 li
152.673 52.2969 152.659 52.2861 152.65 52.2754 cv
152.641 52.2646 152.637 52.2505 152.637 52.2324 cv
152.637 52.1968 152.645 52.1689 152.661 52.1494 cv
152.677 52.1299 152.729 52.084 152.814 52.0127 cv
153.063 51.8086 153.24 51.6431 153.351 51.5156 cv
153.46 51.3887 153.717 51.0532 154.123 50.5093 cv
154.17 50.5093 154.197 50.5127 154.206 50.52 cv
154.216 50.5273 154.22 50.5537 154.22 50.6006 cv
154.22 51.9214 li
155.308 51.9214 li
cp
f
156.143 55.1802 mo
156.32 55.1802 li
156.402 55.5884 156.514 55.9019 156.653 56.1201 cv
156.904 56.521 157.271 56.7212 157.755 56.7212 cv
158.023 56.7212 158.235 56.647 158.392 56.4985 cv
158.548 56.3501 158.625 56.1577 158.625 55.9214 cv
158.625 55.771 158.58 55.626 158.491 55.4863 cv
158.401 55.3467 158.243 55.2109 158.017 55.0781 cv
157.414 54.7349 li
156.973 54.4985 156.647 54.2603 156.439 54.0205 cv
156.23 53.7808 156.127 53.498 156.127 53.1724 cv
156.127 52.7715 156.271 52.4419 156.558 52.1841 cv
156.845 51.9268 157.205 51.7979 157.64 51.7979 cv
157.83 51.7979 158.039 51.8335 158.268 51.9053 cv
158.495 51.9766 158.624 52.0127 158.652 52.0127 cv
158.717 52.0127 158.764 52.0034 158.792 51.9858 cv
158.821 51.9678 158.847 51.939 158.868 51.8999 cv
158.997 51.8999 li
159.035 53.3979 li
158.868 53.3979 li
158.796 53.0508 158.699 52.7803 158.577 52.5869 cv
158.354 52.229 158.033 52.0503 157.613 52.0503 cv
157.361 52.0503 157.164 52.127 157.021 52.2808 cv
156.877 52.4351 156.805 52.6157 156.805 52.8232 cv
156.805 53.1528 157.053 53.4463 157.548 53.7036 cv
158.259 54.085 li
159.024 54.5005 159.406 54.9834 159.406 55.5347 cv
159.406 55.957 159.248 56.3022 158.931 56.5708 cv
158.613 56.8394 158.198 56.9736 157.686 56.9736 cv
157.471 56.9736 157.228 56.938 156.955 56.8662 cv
156.683 56.7944 156.521 56.7588 156.471 56.7588 cv
156.428 56.7588 156.391 56.7739 156.358 56.8047 cv
156.325 56.835 156.301 56.8716 156.282 56.9146 cv
156.143 56.9146 li
156.143 55.1802 li
cp
f
163.805 52.1738 mo
164.162 51.7256 164.584 51.3647 165.07 51.0918 cv
165.149 51.23 li
164.7 51.5864 164.379 51.9326 164.187 52.2695 cv
163.849 52.8569 163.68 53.6392 163.68 54.6167 cv
163.68 55.3403 163.743 55.9375 163.872 56.4082 cv
164.099 57.2319 164.524 57.8486 165.149 58.2578 cv
165.041 58.396 li
164.697 58.2314 164.326 57.9102 163.927 57.4312 cv
163.265 56.6377 162.934 55.7358 162.934 54.7251 cv
162.934 53.7563 163.225 52.9058 163.805 52.1738 cv
cp
f
165.493 56.7129 mo
165.848 56.6768 166.075 56.5967 166.176 56.4731 cv
166.276 56.3491 166.326 56.062 166.326 55.6113 cv
166.326 51.8433 li
166.209 51.7056 li
166.083 51.5581 165.977 51.4673 165.889 51.4321 cv
165.801 51.3975 165.669 51.3774 165.493 51.3716 cv
165.493 51.2129 li
166.957 51.2129 li
170.269 55.3052 li
170.269 52.4629 li
170.269 51.9956 170.198 51.6914 170.059 51.5503 cv
169.967 51.459 169.763 51.3994 169.447 51.3716 cv
169.447 51.2129 li
171.462 51.2129 li
171.462 51.3716 li
171.135 51.4053 170.917 51.4844 170.809 51.6099 cv
170.699 51.7354 170.646 52.022 170.646 52.4702 cv
170.646 56.9717 li
170.498 56.9717 li
166.703 52.2822 li
166.703 55.6113 li
166.703 56.0786 166.771 56.3833 166.908 56.5254 cv
166.998 56.6172 167.197 56.6797 167.508 56.7129 cv
167.508 56.8716 li
165.493 56.8716 li
165.493 56.7129 li
cp
f
171.688 56.7129 mo
172.004 56.6797 172.208 56.6235 172.302 56.5449 cv
172.396 56.4658 172.442 56.2656 172.442 55.9443 cv
172.442 52.1401 li
172.442 51.8369 172.396 51.6382 172.304 51.5449 cv
172.212 51.4517 172.007 51.394 171.688 51.3716 cv
171.688 51.2129 li
174.109 51.2129 li
174.109 51.3716 li
173.794 51.3887 173.582 51.4399 173.475 51.5264 cv
173.367 51.6128 173.313 51.7979 173.313 52.0815 cv
173.313 56.1909 li
173.313 56.2856 173.329 56.3599 173.361 56.4146 cv
173.394 56.4688 173.465 56.5029 173.573 56.5166 cv
173.638 56.5249 173.705 56.5308 173.776 56.5332 cv
173.848 56.5361 173.981 56.5376 174.178 56.5376 cv
174.94 56.5376 175.456 56.4751 175.725 56.3496 cv
175.993 56.2241 176.253 55.9043 176.505 55.3892 cv
176.723 55.3892 li
176.304 56.8716 li
171.688 56.8716 li
171.688 56.7129 li
cp
f
178.592 56.0386 mo
178.947 56.4688 179.383 56.6836 179.9 56.6836 cv
180.406 56.6836 180.839 56.4741 181.198 56.0552 cv
181.558 55.6362 181.737 54.9658 181.737 54.0444 cv
181.737 53.1118 181.556 52.438 181.192 52.0234 cv
180.828 51.6084 180.398 51.4009 179.9 51.4009 cv
179.386 51.4009 178.95 51.6162 178.594 52.0464 cv
178.237 52.4766 178.06 53.1426 178.06 54.0444 cv
178.06 54.9438 178.237 55.6084 178.592 56.0386 cv
cp
177.95 51.8477 mo
178.479 51.3442 179.128 51.0918 179.898 51.0918 cv
180.672 51.0918 181.322 51.3452 181.851 51.8521 cv
182.423 52.4004 182.709 53.1313 182.709 54.0444 cv
182.709 54.9717 182.413 55.7095 181.821 56.2578 cv
181.29 56.7476 180.649 56.9927 179.898 56.9927 cv
179.094 56.9927 178.427 56.7212 177.896 56.1782 cv
177.357 55.6245 177.088 54.9131 177.088 54.0444 cv
177.088 53.1313 177.375 52.3989 177.95 51.8477 cv
cp
f
185.306 55.9443 mo
185.197 56.3149 185.038 56.6641 184.828 56.9927 cv
184.607 57.3433 184.313 57.6704 183.944 57.9741 cv
183.702 58.1743 183.498 58.3149 183.333 58.396 cv
183.254 58.2578 li
183.684 57.9321 183.998 57.5996 184.196 57.2598 cv
184.548 56.6587 184.724 55.8638 184.724 54.8755 cv
184.724 54.0767 184.643 53.4238 184.48 52.917 cv
184.255 52.2017 183.846 51.6392 183.254 51.23 cv
183.362 51.0918 li
183.804 51.3369 184.214 51.7075 184.594 52.2026 cv
185.178 52.9658 185.47 53.8203 185.47 54.7671 cv
185.47 55.1816 185.415 55.5742 185.306 55.9443 cv
cp
f
118.315 77.5293 mo
118.315 77.5293 li
118.315 78.5415 117.492 79.3613 116.478 79.3613 cv
115.463 79.3613 114.64 78.5415 114.64 77.5293 cv
114.64 76.5176 115.463 75.6963 116.478 75.6963 cv
117.492 75.6963 118.315 76.5176 118.315 77.5293 cv
0 0 0 0 cmyk
ef
.611831 lw
118.315 77.5298 mo
118.315 77.5298 li
118.315 78.541 117.492 79.3618 116.477 79.3618 cv
115.461 79.3618 114.639 78.541 114.639 77.5298 cv
114.639 76.5171 115.461 75.6963 116.477 75.6963 cv
117.492 75.6963 118.315 76.5171 118.315 77.5298 cv
cp
0 .949219 .832031 0 cmyk
@
230.019 217.372 mo
230.038 213.166 li
@
228.318 212.944 mo
231.516 212.944 li
@
228.472 218.153 mo
231.669 218.153 li
@
230.07 215.636 mo
230.07 218.233 li
@
231.603 215.574 mo
231.603 215.574 li
231.603 216.437 230.887 217.138 230.005 217.138 cv
229.122 217.138 228.405 216.437 228.405 215.574 cv
228.405 214.708 229.122 214.007 230.005 214.007 cv
230.887 214.007 231.603 214.708 231.603 215.574 cv
0 0 0 0 cmyk
ef
231.602 215.573 mo
231.602 215.573 li
231.602 216.437 230.886 217.138 230.003 217.138 cv
229.121 217.138 228.404 216.437 228.404 215.573 cv
228.404 214.708 229.121 214.007 230.003 214.007 cv
230.886 214.007 231.602 214.708 231.602 215.573 cv
cp
0 .949219 .832031 0 cmyk
@
220.17 249.471 mo
220.17 251.915 li
.835938 .71875 .71875 .929688 cmyk
@
247.744 251.304 mo
247.744 251.915 li
@
129.481 249.471 mo
129.481 251.915 li
@
220.17 249.471 mo
220.17 251.915 li
@
66.3672 251.304 mo
66.3672 251.915 li
@
82.2983 251.304 mo
82.2983 251.915 li
@
93.9414 251.304 mo
93.9414 251.915 li
@
102.521 251.304 mo
102.521 251.915 li
@
109.261 251.304 mo
109.261 251.915 li
@
115.388 251.304 mo
115.388 251.915 li
@
120.902 251.304 mo
120.902 251.915 li
@
125.192 251.304 mo
125.192 251.915 li
@
157.056 251.304 mo
157.056 251.915 li
@
172.987 251.304 mo
172.987 251.915 li
@
184.018 251.304 mo
184.018 251.915 li
@
192.596 251.304 mo
192.596 251.915 li
@
199.949 251.304 mo
199.949 251.915 li
@
206.076 251.304 mo
206.076 251.915 li
@
210.979 251.304 mo
210.979 251.915 li
@
215.882 251.304 mo
215.882 251.915 li
@
40.019 252.22 mo
42.4697 252.22 li
@
39.4058 249.167 mo
39.4058 251.61 li
@
39.4058 252.22 mo
247.131 252.22 li
@
241.323 218.555 mo
241.323 215.616 li
0 .949219 .832031 0 cmyk
@
239.485 215.859 mo
243.162 215.859 li
@
239.485 220.799 mo
243.162 220.799 li
@
241.323 218.274 mo
241.323 220.87 li
@
242.986 218.299 mo
242.986 218.299 li
242.986 219.197 242.238 219.923 241.315 219.923 cv
240.394 219.923 239.646 219.197 239.646 218.299 cv
239.646 217.404 240.394 216.676 241.315 216.676 cv
242.238 216.676 242.986 217.404 242.986 218.299 cv
0 0 0 0 cmyk
ef
242.985 218.299 mo
242.985 218.299 li
242.985 219.196 242.236 219.923 241.314 219.923 cv
240.392 219.923 239.645 219.196 239.645 218.299 cv
239.645 217.403 240.392 216.676 241.314 216.676 cv
242.236 216.676 242.985 217.403 242.985 218.299 cv
cp
0 .949219 .832031 0 cmyk
@
161.039 200.702 mo
161.039 194.505 li
@
159.2 194.46 mo
162.877 194.46 li
@
161.039 200.506 mo
161.039 205.929 li
@
159.2 206.109 mo
162.877 206.109 li
@
162.878 200.265 mo
162.878 200.265 li
162.878 201.278 162.055 202.098 161.04 202.098 cv
160.024 202.098 159.202 201.278 159.202 200.265 cv
159.202 199.254 160.024 198.433 161.04 198.433 cv
162.055 198.433 162.878 199.254 162.878 200.265 cv
0 0 0 0 cmyk
ef
162.877 200.265 mo
162.877 200.265 li
162.877 201.278 162.055 202.098 161.039 202.098 cv
160.023 202.098 159.2 201.278 159.2 200.265 cv
159.2 199.253 160.023 198.433 161.039 198.433 cv
162.055 198.433 162.877 199.253 162.877 200.265 cv
cp
0 .949219 .832031 0 cmyk
@
188.407 210.804 mo
188.407 206.528 li
@
186.568 205.827 mo
190.245 205.827 li
@
188.407 205.709 mo
188.407 211.538 li
@
186.568 211.451 mo
190.245 211.451 li
@
190.248 208.582 mo
190.248 208.582 li
190.248 209.593 189.424 210.415 188.408 210.415 cv
187.394 210.415 186.57 209.593 186.57 208.582 cv
186.57 207.57 187.394 206.749 188.408 206.749 cv
189.424 206.749 190.248 207.57 190.248 208.582 cv
0 0 0 0 cmyk
ef
190.246 208.582 mo
190.246 208.582 li
190.246 209.593 189.422 210.414 188.407 210.414 cv
187.392 210.414 186.568 209.593 186.568 208.582 cv
186.568 207.569 187.392 206.75 188.407 206.75 cv
189.422 206.75 190.246 207.569 190.246 208.582 cv
cp
0 .949219 .832031 0 cmyk
@
215.351 211.955 mo
220.094 211.955 li
.941406 .761719 0 0 cmyk
@
219.704 213.975 mo
219.704 213.975 li
219.704 214.987 218.881 215.807 217.865 215.807 cv
216.85 215.807 216.026 214.987 216.026 213.975 cv
216.026 212.963 216.85 212.142 217.865 212.142 cv
218.881 212.142 219.704 212.963 219.704 213.975 cv
ef
219.702 213.975 mo
219.702 213.975 li
219.702 214.987 218.879 215.807 217.863 215.807 cv
216.849 215.807 216.025 214.987 216.025 213.975 cv
216.025 212.962 216.849 212.142 217.863 212.142 cv
218.879 212.142 219.702 212.962 219.702 213.975 cv
cp
@
215.622 216.116 mo
220.094 216.116 li
@
145.696 190.923 mo
145.696 181.733 li
0 .949219 .832031 0 cmyk
@
143.858 181.59 mo
147.535 181.59 li
@
145.696 192.767 mo
145.696 201.797 li
@
143.858 201.901 mo
147.535 201.901 li
@
147.536 191.72 mo
147.536 191.72 li
147.536 192.733 146.713 193.553 145.697 193.553 cv
144.683 193.553 143.859 192.733 143.859 191.72 cv
143.859 190.708 144.683 189.888 145.697 189.888 cv
146.713 189.888 147.536 190.708 147.536 191.72 cv
0 0 0 0 cmyk
ef
147.535 191.72 mo
147.535 191.72 li
147.535 192.733 146.712 193.553 145.696 193.553 cv
144.682 193.553 143.858 192.733 143.858 191.72 cv
143.858 190.708 144.682 189.888 145.696 189.888 cv
146.712 189.888 147.535 190.708 147.535 191.72 cv
cp
0 .949219 .832031 0 cmyk
@
116.647 51.9424 mo
117.566 53.7754 li
118.485 55.6074 li
116.647 55.6074 li
114.81 55.6074 li
115.729 53.7754 li
116.647 51.9424 li
0 0 0 0 cmyk
ef
116.646 51.9429 mo
117.565 53.7749 li
118.484 55.6074 li
116.646 55.6074 li
114.809 55.6074 li
115.728 53.7749 li
116.646 51.9429 li
cp
.769531 .238281 .976562 .136719 cmyk
@
245.667 220.158 mo
245.688 215.951 li
0 .949219 .832031 0 cmyk
@
243.967 216.203 mo
247.164 216.203 li
@
244.036 220.966 mo
247.233 220.966 li
@
245.635 218.673 mo
245.635 221.269 li
@
247.252 218.61 mo
247.252 218.61 li
247.252 219.473 246.536 220.174 245.652 220.174 cv
244.771 220.174 244.055 219.473 244.055 218.61 cv
244.055 217.745 244.771 217.043 245.652 217.043 cv
246.536 217.043 247.252 217.745 247.252 218.61 cv
0 0 0 0 cmyk
ef
247.25 218.609 mo
247.25 218.609 li
247.25 219.474 246.534 220.174 245.652 220.174 cv
244.77 220.174 244.054 219.474 244.054 218.609 cv
244.054 217.745 244.77 217.043 245.652 217.043 cv
246.534 217.043 247.25 217.745 247.25 218.609 cv
cp
0 .949219 .832031 0 cmyk
@
248.8 223.212 mo
248.821 219.005 li
@
247.226 219.242 mo
250.424 219.242 li
@
247.338 223.645 mo
250.534 223.645 li
@
248.937 221.171 mo
248.937 223.767 li
@
250.469 221.483 mo
250.469 221.483 li
250.469 222.346 249.753 223.047 248.871 223.047 cv
247.987 223.047 247.271 222.346 247.271 221.483 cv
247.271 220.618 247.987 219.917 248.871 219.917 cv
249.753 219.917 250.469 220.618 250.469 221.483 cv
0 0 0 0 cmyk
ef
250.468 221.482 mo
250.468 221.482 li
250.468 222.346 249.751 223.047 248.869 223.047 cv
247.985 223.047 247.271 222.346 247.271 221.482 cv
247.271 220.618 247.985 219.917 248.869 219.917 cv
249.751 219.917 250.468 220.618 250.468 221.482 cv
cp
0 .949219 .832031 0 cmyk
@
209.706 11.3359 mo
208.723 8.98096 li
207.735 11.3359 li
209.706 11.3359 li
cp
206.011 13.5327 mo
206.011 13.374 li
206.231 13.3491 206.397 13.2666 206.508 13.126 cv
206.618 12.9854 206.807 12.6001 207.075 11.9712 cv
208.862 7.77393 li
209.033 7.77393 li
211.17 12.6226 li
211.313 12.9438 211.427 13.1421 211.512 13.2183 cv
211.597 13.2944 211.74 13.3462 211.941 13.374 cv
211.941 13.5327 li
209.76 13.5327 li
209.76 13.374 li
210.01 13.3521 210.172 13.3247 210.244 13.293 cv
210.316 13.2612 210.354 13.1826 210.354 13.0581 cv
210.354 13.0166 210.339 12.9434 210.312 12.8379 cv
210.283 12.7324 210.244 12.6221 210.194 12.5054 cv
209.851 11.6826 li
207.59 11.6826 li
207.367 12.2422 207.233 12.584 207.19 12.707 cv
207.147 12.8306 207.126 12.9282 207.126 13 cv
207.126 13.144 207.185 13.2437 207.302 13.2993 cv
207.374 13.3325 207.511 13.3574 207.711 13.374 cv
207.711 13.5327 li
206.011 13.5327 li
cp
0 0 0 1 cmyk
f
213.774 13.1841 mo
213.918 13.2773 214.088 13.3237 214.283 13.3237 cv
214.585 13.3237 214.843 13.1743 215.057 12.8755 cv
215.27 12.5767 215.377 12.1602 215.377 11.6265 cv
215.377 11.1147 215.266 10.7324 215.044 10.4795 cv
214.821 10.2266 214.564 10.1001 214.271 10.1001 cv
214.064 10.1001 213.876 10.1636 213.705 10.29 cv
213.535 10.4165 213.45 10.5405 213.45 10.6631 cv
213.45 12.7607 li
213.522 12.9502 213.631 13.0908 213.774 13.1841 cv
cp
212.122 15.2573 mo
212.383 15.2407 212.549 15.1851 212.619 15.0903 cv
212.689 14.9956 212.726 14.8467 212.726 14.6436 cv
212.726 10.6348 li
212.726 10.4229 212.699 10.2871 212.647 10.2275 cv
212.596 10.1675 212.499 10.1377 212.356 10.1377 cv
212.326 10.1377 212.297 10.1392 212.271 10.1416 cv
212.244 10.1445 212.206 10.1504 212.155 10.1587 cv
212.155 10.0205 li
212.554 9.89111 li
212.567 9.88867 212.848 9.79248 213.396 9.60303 cv
213.409 9.60303 213.42 9.60938 213.427 9.62207 cv
213.434 9.63428 213.438 9.64893 213.438 9.66553 cv
213.438 10.2295 li
213.621 10.0454 213.783 9.90918 213.923 9.82031 cv
214.175 9.66455 214.433 9.58643 214.698 9.58643 cv
215.083 9.58643 215.415 9.75 215.693 10.0767 cv
215.971 10.4033 216.109 10.8506 216.109 11.418 cv
216.109 11.9741 215.942 12.479 215.609 12.9321 cv
215.275 13.3853 214.855 13.6118 214.351 13.6118 cv
214.194 13.6118 214.059 13.5928 213.944 13.5537 cv
213.766 13.4951 213.601 13.3882 213.45 13.2319 cv
213.45 14.6016 li
213.45 14.8828 213.496 15.0557 213.588 15.1196 cv
213.681 15.1836 213.881 15.2266 214.191 15.249 cv
214.191 15.395 li
212.122 15.395 li
212.122 15.2573 li
cp
f
216.407 13.395 mo
216.664 13.3726 216.834 13.3276 216.918 13.2593 cv
217.002 13.1909 217.044 13.0454 217.044 12.8228 cv
217.044 10.9395 li
217.044 10.6636 217.018 10.4668 216.966 10.3486 cv
216.914 10.23 216.82 10.1709 216.684 10.1709 cv
216.655 10.1709 216.618 10.1748 216.572 10.1816 cv
216.526 10.1885 216.479 10.1978 216.428 10.2085 cv
216.428 10.0708 li
216.587 10.0151 216.749 9.95801 216.916 9.89941 cv
217.083 9.84131 217.199 9.79932 217.263 9.77441 cv
217.402 9.72168 217.546 9.66162 217.693 9.59473 cv
217.713 9.59473 217.725 9.60156 217.729 9.61572 cv
217.732 9.62939 217.734 9.65869 217.734 9.70313 cv
217.734 10.3882 li
217.914 10.1406 218.087 9.94678 218.253 9.80762 cv
218.42 9.66846 218.593 9.59912 218.772 9.59912 cv
218.915 9.59912 219.031 9.6416 219.121 9.72607 cv
219.21 9.81104 219.255 9.91797 219.255 10.0459 cv
219.255 10.1602 219.221 10.2559 219.152 10.334 cv
219.084 10.4121 218.998 10.4507 218.895 10.4507 cv
218.789 10.4507 218.682 10.4023 218.574 10.3047 cv
218.467 10.207 218.383 10.1587 218.321 10.1587 cv
218.224 10.1587 218.104 10.2373 217.961 10.3945 cv
217.818 10.5518 217.747 10.7139 217.747 10.8809 cv
217.747 12.7642 li
217.747 13.0039 217.803 13.1699 217.915 13.2632 cv
218.026 13.3564 218.212 13.4004 218.472 13.395 cv
218.472 13.5327 li
216.407 13.5327 li
216.407 13.395 li
cp
f
219.974 7.83203 mo
220.057 7.74609 220.16 7.70313 220.283 7.70313 cv
220.403 7.70313 220.506 7.74512 220.591 7.82959 cv
220.676 7.91455 220.719 8.01758 220.719 8.13965 cv
220.719 8.25879 220.676 8.36035 220.591 8.44482 cv
220.506 8.5293 220.403 8.57178 220.283 8.57178 cv
220.16 8.57178 220.057 8.5293 219.974 8.44482 cv
219.89 8.36035 219.848 8.25879 219.848 8.13965 cv
219.848 8.02051 219.89 7.91797 219.974 7.83203 cv
cp
219.308 13.416 mo
219.606 13.3882 219.795 13.3374 219.873 13.2632 cv
219.951 13.1895 219.99 12.9897 219.99 12.6641 cv
219.99 10.6724 li
219.99 10.4912 219.978 10.3657 219.952 10.2964 cv
219.91 10.1821 219.822 10.125 219.688 10.125 cv
219.657 10.125 219.628 10.1279 219.599 10.1333 cv
219.569 10.1392 219.484 10.1611 219.345 10.2002 cv
219.345 10.0708 li
219.525 10.0122 li
220.014 9.85352 220.354 9.73389 220.547 9.65332 cv
220.625 9.61963 220.676 9.60303 220.698 9.60303 cv
220.703 9.62256 220.706 9.64355 220.706 9.66553 cv
220.706 12.6641 li
220.706 12.9814 220.744 13.1807 220.821 13.2612 cv
220.898 13.3423 221.072 13.3936 221.343 13.416 cv
221.343 13.5327 li
219.308 13.5327 li
219.308 13.416 li
cp
f
221.699 13.416 mo
221.959 13.3906 222.135 13.3384 222.228 13.2593 cv
222.319 13.1797 222.365 13.0249 222.365 12.7935 cv
222.365 8.71338 li
222.365 8.52979 222.35 8.40332 222.319 8.3335 cv
222.264 8.2168 222.15 8.1582 221.98 8.1582 cv
221.94 8.1582 221.898 8.1626 221.853 8.1709 cv
221.807 8.1792 221.748 8.19141 221.679 8.2085 cv
221.679 8.07031 li
222.056 7.97021 222.509 7.83643 223.04 7.66943 cv
223.06 7.66943 223.071 7.67773 223.075 7.69482 cv
223.079 7.71143 223.082 7.74756 223.082 7.80322 cv
223.082 12.8101 li
223.082 13.0522 223.124 13.209 223.207 13.2803 cv
223.291 13.3511 223.464 13.3965 223.727 13.416 cv
223.727 13.5327 li
221.699 13.5327 li
221.699 13.416 li
cp
f
226.308 13.4365 mo
227.329 12.3794 228.023 11.6035 228.389 11.1084 cv
228.755 10.6133 228.938 10.1304 228.938 9.66016 cv
228.938 9.24902 228.826 8.93506 228.603 8.71973 cv
228.379 8.50391 228.112 8.39648 227.803 8.39648 cv
227.42 8.39648 227.11 8.53516 226.873 8.81348 cv
226.741 8.96631 226.616 9.20166 226.496 9.51855 cv
226.315 9.48096 li
226.455 8.84082 226.692 8.39648 227.025 8.14746 cv
227.359 7.89844 227.718 7.77393 228.1 7.77393 cv
228.572 7.77393 228.954 7.92236 229.246 8.21826 cv
229.537 8.51465 229.684 8.87695 229.684 9.30518 cv
229.684 9.76172 229.525 10.2012 229.21 10.624 cv
228.895 11.0469 228.208 11.7993 227.152 12.8813 cv
229.076 12.8813 li
229.344 12.8813 229.532 12.8491 229.642 12.7852 cv
229.75 12.7212 229.873 12.5654 230.01 12.3179 cv
230.119 12.3682 li
229.654 13.5327 li
226.308 13.5327 li
226.308 13.4365 li
cp
f
233.239 12.7021 mo
233.393 12.2544 233.47 11.6064 233.47 10.7578 cv
233.47 10.0815 233.424 9.54199 233.332 9.13867 cv
233.158 8.3877 232.835 8.01221 232.359 8.01221 cv
231.885 8.01221 231.56 8.39893 231.384 9.17188 cv
231.292 9.58398 231.245 10.1265 231.245 10.7993 cv
231.245 11.4312 231.293 11.936 231.388 12.314 cv
231.566 13.021 231.901 13.374 232.394 13.374 cv
232.804 13.374 233.086 13.1499 233.239 12.7021 cv
cp
233.876 8.79297 mo
234.158 9.33594 234.299 9.95947 234.299 10.6636 cv
234.299 11.2178 234.213 11.7397 234.039 12.23 cv
233.713 13.1514 233.147 13.6118 232.343 13.6118 cv
231.793 13.6118 231.341 13.3628 230.986 12.8647 cv
230.606 12.333 230.416 11.6104 230.416 10.6973 cv
230.416 9.979 230.543 9.36084 230.798 8.84326 cv
231.141 8.13867 231.669 7.78662 232.381 7.78662 cv
233.023 7.78662 233.521 8.12207 233.876 8.79297 cv
cp
f
237.188 7.82617 mo
237.188 7.83301 237.189 7.84912 237.189 7.87402 cv
237.189 12.9023 li
237.189 13.1167 237.247 13.2529 237.362 13.3115 cv
237.477 13.3696 237.691 13.4048 238.006 13.416 cv
238.006 13.5327 li
235.64 13.5327 li
235.64 13.4072 li
235.978 13.3906 236.198 13.3447 236.301 13.2695 cv
236.404 13.1943 236.456 13.0317 236.456 12.7813 cv
236.456 8.91406 li
236.456 8.78027 236.439 8.67871 236.406 8.60938 cv
236.372 8.53955 236.3 8.50488 236.188 8.50488 cv
236.115 8.50488 236.021 8.5249 235.905 8.56543 cv
235.789 8.60596 235.682 8.64844 235.581 8.69287 cv
235.581 8.57568 li
237.118 7.79492 li
237.168 7.79492 li
237.18 7.80908 237.186 7.81934 237.188 7.82617 cv
cp
f
239.175 13.4365 mo
240.196 12.3794 240.891 11.6035 241.256 11.1084 cv
241.622 10.6133 241.805 10.1304 241.805 9.66016 cv
241.805 9.24902 241.693 8.93506 241.47 8.71973 cv
241.246 8.50391 240.979 8.39648 240.67 8.39648 cv
240.287 8.39648 239.978 8.53516 239.74 8.81348 cv
239.608 8.96631 239.483 9.20166 239.363 9.51855 cv
239.183 9.48096 li
239.322 8.84082 239.56 8.39648 239.893 8.14746 cv
240.227 7.89844 240.585 7.77393 240.967 7.77393 cv
241.439 7.77393 241.821 7.92236 242.113 8.21826 cv
242.404 8.51465 242.551 8.87695 242.551 9.30518 cv
242.551 9.76172 242.393 10.2012 242.077 10.624 cv
241.762 11.0469 241.075 11.7993 240.02 12.8813 cv
241.943 12.8813 li
242.211 12.8813 242.399 12.8491 242.509 12.7852 cv
242.617 12.7212 242.74 12.5654 242.877 12.3179 cv
242.986 12.3682 li
242.521 13.5327 li
239.175 13.5327 li
239.175 13.4365 li
cp
f
183.875 206.631 mo
183.875 202.355 li
0 .949219 .832031 0 cmyk
@
182.037 199.319 mo
185.714 199.319 li
@
183.875 199.375 mo
183.875 208.932 li
@
182.037 208.922 mo
185.714 208.922 li
@
185.715 204.193 mo
185.715 204.193 li
185.715 205.205 184.892 206.026 183.876 206.026 cv
182.86 206.026 182.038 205.205 182.038 204.193 cv
182.038 203.18 182.86 202.36 183.876 202.36 cv
184.892 202.36 185.715 203.18 185.715 204.193 cv
0 0 0 0 cmyk
ef
185.714 204.192 mo
185.714 204.192 li
185.714 205.205 184.891 206.026 183.875 206.026 cv
182.86 206.026 182.037 205.205 182.037 204.192 cv
182.037 203.181 182.86 202.36 183.875 202.36 cv
184.891 202.36 185.714 203.181 185.714 204.192 cv
cp
0 .949219 .832031 0 cmyk
@
126.124 187.042 mo
129.801 187.042 li
.422065 .948577 0 0 cmyk
@
127.962 178.383 mo
127.962 170.51 li
@
127.962 186.708 mo
127.962 180.046 li
@
126.126 180.71 mo
129.803 180.71 li
129.803 177.045 li
126.126 177.045 li
126.126 180.71 li
cp
0 0 0 0 cmyk
ef
126.124 177.045 mo
129.801 177.045 li
129.801 180.71 li
126.124 180.71 li
126.124 177.045 li
cp
.422065 .948577 0 0 cmyk
@
114.799 67.1323 mo
118.476 67.1323 li
118.476 63.4673 li
114.799 63.4673 li
114.799 67.1323 li
cp
0 0 0 0 cmyk
ef
114.798 63.4673 mo
118.475 63.4673 li
118.475 67.1328 li
114.798 67.1328 li
114.798 63.4673 li
cp
.422065 .948577 0 0 cmyk
@
118.58 40.3276 mo
116.128 42.771 li
0 .5 1 0 cmyk
@
116.128 40.3276 mo
118.58 42.771 li
@
115.517 39.7168 mo
119.192 39.7168 li
119.192 43.3823 li
115.517 43.3823 li
115.517 39.7168 li
cp
@
124.06 45.1113 mo
124.465 45.0688 124.729 44.9966 124.849 44.895 cv
124.969 44.7935 125.029 44.5366 125.029 44.1235 cv
125.029 39.2324 li
125.029 38.8423 124.97 38.5869 124.852 38.4673 cv
124.732 38.3472 124.469 38.2729 124.06 38.2441 cv
124.06 38.04 li
127.172 38.04 li
127.172 38.2441 li
126.767 38.2656 126.494 38.332 126.356 38.4429 cv
126.218 38.5537 126.149 38.792 126.149 39.1572 cv
126.149 44.4404 li
126.149 44.562 126.17 44.6577 126.211 44.7275 cv
126.252 44.7974 126.343 44.8413 126.483 44.8589 cv
126.566 44.8696 126.653 44.877 126.745 44.8804 cv
126.837 44.8843 127.008 44.8857 127.26 44.8857 cv
128.241 44.8857 128.904 44.8052 129.25 44.6445 cv
129.595 44.4834 129.929 44.0718 130.253 43.4092 cv
130.533 43.4092 li
129.994 45.3154 li
124.06 45.3154 li
124.06 45.1113 li
cp
f
133.834 42.3408 mo
133.421 42.4771 133.08 42.6274 132.811 42.792 cv
132.294 43.1104 132.035 43.4722 132.035 43.8765 cv
132.035 44.2021 132.144 44.4419 132.358 44.5962 cv
132.499 44.6963 132.654 44.7461 132.827 44.7461 cv
133.064 44.7461 133.291 44.6802 133.509 44.5479 cv
133.726 44.415 133.834 44.2471 133.834 44.043 cv
133.834 42.3408 li
cp
131.857 42.9478 mo
132.188 42.7329 132.847 42.4414 133.834 42.0723 cv
133.834 41.6162 li
133.834 41.251 133.798 40.9971 133.727 40.8535 cv
133.604 40.6138 133.352 40.4941 132.967 40.4941 cv
132.784 40.4941 132.609 40.5405 132.444 40.6333 cv
132.279 40.73 132.197 40.8628 132.197 41.0308 cv
132.197 41.0737 132.206 41.1465 132.224 41.2485 cv
132.242 41.3501 132.251 41.4155 132.251 41.4443 cv
132.251 41.645 132.185 41.7842 132.052 41.8633 cv
131.977 41.9097 131.887 41.9331 131.782 41.9331 cv
131.621 41.9331 131.497 41.8799 131.411 41.7744 cv
131.324 41.6689 131.281 41.5518 131.281 41.4229 cv
131.281 41.1724 131.437 40.9102 131.747 40.6362 cv
132.058 40.3623 132.513 40.2256 133.112 40.2256 cv
133.809 40.2256 134.281 40.4512 134.529 40.9019 cv
134.662 41.1489 134.729 41.5088 134.729 41.981 cv
134.729 44.1343 li
134.729 44.3418 134.742 44.4849 134.771 44.564 cv
134.818 44.7031 134.915 44.7729 135.063 44.7729 cv
135.145 44.7729 135.213 44.7607 135.267 44.7354 cv
135.32 44.7104 135.414 44.6494 135.547 44.5532 cv
135.547 44.832 li
135.432 44.9717 135.308 45.0864 135.175 45.1758 cv
134.974 45.312 134.77 45.3799 134.562 45.3799 cv
134.317 45.3799 134.141 45.3013 134.031 45.1436 cv
133.921 44.9863 133.861 44.7983 133.851 44.5801 cv
133.577 44.8159 133.344 44.9917 133.15 45.106 cv
132.823 45.2993 132.513 45.396 132.219 45.396 cv
131.91 45.396 131.643 45.2876 131.416 45.0713 cv
131.189 44.8545 131.077 44.5801 131.077 44.2471 cv
131.077 43.728 131.337 43.2949 131.857 42.9478 cv
cp
f
138.374 40.3652 mo
138.374 40.7515 li
137.275 40.7515 li
137.265 43.8442 li
137.265 44.1162 137.288 44.3223 137.335 44.4619 cv
137.421 44.7085 137.59 44.832 137.841 44.832 cv
137.971 44.832 138.083 44.8018 138.178 44.7407 cv
138.272 44.6802 138.382 44.5835 138.504 44.4512 cv
138.644 44.5693 li
138.525 44.73 li
138.338 44.981 138.141 45.1582 137.933 45.2617 cv
137.725 45.3657 137.523 45.4175 137.329 45.4175 cv
136.905 45.4175 136.618 45.2295 136.468 44.8535 cv
136.385 44.6494 136.344 44.3667 136.344 44.0054 cv
136.344 40.7515 li
135.757 40.7515 li
135.739 40.7407 135.726 40.73 135.717 40.7192 cv
135.707 40.7085 135.703 40.6943 135.703 40.6763 cv
135.703 40.6406 135.711 40.6128 135.728 40.5933 cv
135.743 40.5737 135.795 40.5278 135.881 40.4565 cv
136.129 40.2524 136.307 40.0869 136.417 39.9595 cv
136.526 39.8325 136.783 39.4971 137.189 38.9531 cv
137.236 38.9531 137.264 38.9565 137.272 38.9639 cv
137.282 38.9712 137.286 38.9976 137.286 39.0444 cv
137.286 40.3652 li
138.374 40.3652 li
cp
f
141.438 40.3652 mo
141.438 40.7515 li
140.34 40.7515 li
140.329 43.8442 li
140.329 44.1162 140.353 44.3223 140.399 44.4619 cv
140.485 44.7085 140.654 44.832 140.905 44.832 cv
141.035 44.832 141.147 44.8018 141.242 44.7407 cv
141.337 44.6802 141.446 44.5835 141.568 44.4512 cv
141.708 44.5693 li
141.59 44.73 li
141.402 44.981 141.205 45.1582 140.997 45.2617 cv
140.789 45.3657 140.588 45.4175 140.394 45.4175 cv
139.97 45.4175 139.683 45.2295 139.532 44.8535 cv
139.449 44.6494 139.408 44.3667 139.408 44.0054 cv
139.408 40.7515 li
138.821 40.7515 li
138.804 40.7407 138.79 40.73 138.781 40.7192 cv
138.771 40.7085 138.768 40.6943 138.768 40.6763 cv
138.768 40.6406 138.775 40.6128 138.792 40.5933 cv
138.808 40.5737 138.859 40.5278 138.945 40.4565 cv
139.193 40.2524 139.371 40.0869 139.481 39.9595 cv
139.591 39.8325 139.848 39.4971 140.254 38.9531 cv
140.301 38.9531 140.328 38.9565 140.337 38.9639 cv
140.347 38.9712 140.351 38.9976 140.351 39.0444 cv
140.351 40.3652 li
141.438 40.3652 li
cp
f
142.769 37.9858 mo
142.877 37.8755 143.01 37.8203 143.168 37.8203 cv
143.322 37.8203 143.454 37.8745 143.563 37.9829 cv
143.673 38.0918 143.728 38.2246 143.728 38.3813 cv
143.728 38.5342 143.673 38.6655 143.563 38.7739 cv
143.454 38.8828 143.322 38.937 143.168 38.937 cv
143.01 38.937 142.877 38.8828 142.769 38.7739 cv
142.661 38.6655 142.607 38.5342 142.607 38.3813 cv
142.607 38.228 142.661 38.0962 142.769 37.9858 cv
cp
141.913 45.165 mo
142.297 45.1294 142.539 45.064 142.64 44.9692 cv
142.74 44.8745 142.791 44.6177 142.791 44.1987 cv
142.791 41.6377 li
142.791 41.4048 142.774 41.2437 142.742 41.1543 cv
142.688 41.0078 142.575 40.9341 142.402 40.9341 cv
142.363 40.9341 142.324 40.938 142.287 40.9448 cv
142.249 40.9521 142.141 40.981 141.961 41.0308 cv
141.961 40.8643 li
142.192 40.7891 li
142.821 40.5854 143.259 40.4312 143.507 40.3276 cv
143.607 40.2847 143.672 40.2632 143.701 40.2632 cv
143.708 40.2881 143.712 40.3149 143.712 40.3438 cv
143.712 44.1987 li
143.712 44.6069 143.761 44.8628 143.859 44.9663 cv
143.958 45.0703 144.182 45.1367 144.53 45.165 cv
144.53 45.3154 li
141.913 45.3154 li
141.913 45.165 li
cp
f
148.664 40.5977 mo
148.988 40.8276 149.151 41.0801 149.151 41.3545 cv
149.151 41.4722 149.109 41.582 149.027 41.6836 cv
148.944 41.7852 148.817 41.8364 148.645 41.8364 cv
148.519 41.8364 148.408 41.7935 148.313 41.7075 cv
148.219 41.6216 148.149 41.4961 148.106 41.3315 cv
148.042 41.0737 li
147.995 40.8843 147.914 40.75 147.799 40.6709 cv
147.681 40.5962 147.524 40.5586 147.331 40.5586 cv
146.921 40.5586 146.576 40.7368 146.294 41.0933 cv
146.012 41.4502 145.871 41.9238 145.871 42.5151 cv
145.871 43.0566 146.026 43.5425 146.337 43.9722 cv
146.647 44.4023 147.066 44.6177 147.595 44.6177 cv
147.968 44.6177 148.3 44.4956 148.591 44.2515 cv
148.756 44.1118 148.942 43.8896 149.151 43.5845 cv
149.302 43.6758 li
149.097 44.106 148.882 44.4463 148.655 44.6973 cv
148.221 45.1772 147.719 45.4175 147.147 45.4175 cv
146.588 45.4175 146.092 45.1973 145.661 44.7568 cv
145.23 44.3169 145.015 43.7192 145.015 42.9639 cv
145.015 42.2227 145.25 41.5859 145.721 41.0522 cv
146.19 40.519 146.785 40.2524 147.503 40.2524 cv
147.952 40.2524 148.339 40.3672 148.664 40.5977 cv
cp
f
150.934 41.2134 mo
150.818 41.4067 150.736 41.6504 150.686 41.9438 cv
152.959 41.9438 li
152.919 41.5859 152.851 41.3188 152.754 41.1436 cv
152.578 40.8286 152.283 40.6709 151.871 40.6709 cv
151.461 40.6709 151.149 40.8521 150.934 41.2134 cv
cp
153.514 40.8027 mo
153.894 41.1519 154.084 41.6465 154.084 42.2871 cv
150.664 42.2871 li
150.7 43.1157 150.889 43.7192 151.229 44.0981 cv
151.571 44.4766 151.975 44.6655 152.441 44.6655 cv
152.818 44.6655 153.137 44.5674 153.395 44.3711 cv
153.653 44.1748 153.893 43.896 154.111 43.5352 cv
154.3 43.5996 li
154.152 44.0552 153.877 44.4766 153.473 44.8633 cv
153.069 45.251 152.574 45.4443 151.989 45.4443 cv
151.314 45.4443 150.793 45.1899 150.425 44.6816 cv
150.057 44.1738 149.873 43.5884 149.873 42.9263 cv
149.873 42.2065 150.086 41.5859 150.514 41.063 cv
150.94 40.5405 151.497 40.2793 152.183 40.2793 cv
152.689 40.2793 153.133 40.4536 153.514 40.8027 cv
cp
f
159.573 44.2441 mo
160.029 44.7974 160.591 45.0737 161.256 45.0737 cv
161.906 45.0737 162.462 44.8047 162.924 44.2656 cv
163.386 43.7271 163.617 42.8652 163.617 41.6807 cv
163.617 40.4814 163.384 39.6152 162.916 39.082 cv
162.449 38.5483 161.896 38.2817 161.256 38.2817 cv
160.594 38.2817 160.034 38.5586 159.576 39.1113 cv
159.118 39.6646 158.889 40.521 158.889 41.6807 cv
158.889 42.8369 159.117 43.6914 159.573 44.2441 cv
cp
158.748 38.8564 mo
159.427 38.2085 160.262 37.8848 161.253 37.8848 cv
162.229 37.8848 163.059 38.2051 163.741 38.8457 cv
164.491 39.5508 164.866 40.4956 164.866 41.6807 cv
164.866 42.6182 164.628 43.4111 164.151 44.0591 cv
163.635 44.7568 162.902 45.1973 161.956 45.3799 cv
162.4 46.0186 162.938 46.4717 163.57 46.7393 cv
163.925 46.8892 164.404 46.9995 165.007 47.0713 cv
165.007 47.2754 li
164.555 47.2754 li
163.959 47.2754 163.431 47.2271 162.97 47.1304 cv
162.508 47.0337 162.089 46.8867 161.713 46.6899 cv
161.336 46.4966 160.986 46.228 160.665 45.8848 cv
160.345 45.541 160.166 45.3604 160.13 45.3423 cv
159.989 45.2778 li
159.379 44.9951 158.906 44.6729 158.572 44.3115 cv
157.95 43.6421 157.639 42.7651 157.639 41.6807 cv
157.639 40.5063 158.009 39.5649 158.748 38.8564 cv
cp
f
170.586 38.0884 mo
171.006 38.2065 171.241 38.2656 171.291 38.2656 cv
171.396 38.2656 171.494 38.2373 171.587 38.1797 cv
171.681 38.1226 171.745 38.0332 171.781 37.9116 cv
172.013 37.9116 li
172.115 40.3813 li
171.862 40.3813 li
171.715 39.8906 171.522 39.4951 171.286 39.1948 cv
170.833 38.6289 170.225 38.3462 169.46 38.3462 cv
168.688 38.3462 168.057 38.6504 167.567 39.2593 cv
167.077 39.8677 166.832 40.7051 166.832 41.772 cv
166.832 42.7524 167.09 43.5356 167.604 44.1206 cv
168.12 44.7061 168.772 44.9985 169.563 44.9985 cv
170.133 44.9985 170.659 44.8628 171.141 44.5908 cv
171.417 44.4365 171.72 44.2041 172.051 43.8926 cv
172.255 44.0967 li
172.011 44.4043 171.708 44.6748 171.345 44.9072 cv
170.728 45.3013 170.058 45.498 169.336 45.498 cv
168.151 45.498 167.211 45.1206 166.514 44.3652 cv
165.871 43.667 165.55 42.7954 165.55 41.7505 cv
165.55 40.6802 165.89 39.7817 166.568 39.0552 cv
167.282 38.2925 168.212 37.9116 169.357 37.9116 cv
169.756 37.9116 170.166 37.9702 170.586 38.0884 cv
cp
f
175.031 44.8213 mo
175.119 44.8789 175.301 44.9072 175.578 44.9072 cv
176.439 44.9072 177.148 44.7373 177.705 44.397 cv
178.56 43.874 178.987 42.98 178.987 41.7153 cv
178.987 40.5869 178.635 39.7378 177.932 39.1685 cv
177.328 38.6812 176.529 38.4375 175.535 38.4375 cv
175.287 38.4375 175.119 38.4644 175.031 38.5181 cv
174.943 38.5718 174.899 38.6899 174.899 38.8726 cv
174.899 44.4668 li
174.899 44.646 174.943 44.7642 175.031 44.8213 cv
cp
172.81 45.1113 mo
173.212 45.0688 173.474 44.9966 173.596 44.895 cv
173.718 44.7935 173.779 44.5366 173.779 44.1235 cv
173.779 39.2324 li
173.779 38.8315 173.72 38.5737 173.602 38.459 cv
173.482 38.3447 173.219 38.2729 172.81 38.2441 cv
172.81 38.04 li
175.782 38.04 li
176.784 38.04 177.632 38.2051 178.324 38.5342 cv
179.574 39.125 180.198 40.1807 180.198 41.7021 cv
180.198 42.2495 180.086 42.7705 179.862 43.2646 cv
179.638 43.7583 179.299 44.1753 178.847 44.5156 cv
178.56 44.73 178.262 44.8931 177.953 45.0039 cv
177.389 45.2114 176.696 45.3154 175.874 45.3154 cv
172.81 45.3154 li
172.81 45.1113 li
cp
f
184.62 40.6177 mo
184.978 40.1694 185.399 39.8086 185.886 39.5356 cv
185.965 39.6738 li
185.516 40.0303 185.194 40.3765 185.002 40.7134 cv
184.664 41.3008 184.495 42.083 184.495 43.0605 cv
184.495 43.7842 184.559 44.3813 184.688 44.8521 cv
184.914 45.6758 185.34 46.2925 185.965 46.7017 cv
185.856 46.8398 li
185.513 46.6753 185.142 46.354 184.742 45.875 cv
184.08 45.0815 183.749 44.1797 183.749 43.1689 cv
183.749 42.2002 184.04 41.3496 184.62 40.6177 cv
cp
f
186.309 45.1567 mo
186.663 45.1206 186.891 45.0405 186.991 44.917 cv
187.092 44.793 187.142 44.5059 187.142 44.0552 cv
187.142 40.2871 li
187.024 40.1494 li
186.898 40.002 186.792 39.9111 186.704 39.876 cv
186.616 39.8413 186.484 39.8213 186.309 39.8154 cv
186.309 39.6567 li
187.772 39.6567 li
191.084 43.749 li
191.084 40.9067 li
191.084 40.4395 191.014 40.1353 190.874 39.9941 cv
190.782 39.9028 190.578 39.8433 190.263 39.8154 cv
190.263 39.6567 li
192.277 39.6567 li
192.277 39.8154 li
191.95 39.8491 191.732 39.9282 191.624 40.0537 cv
191.515 40.1792 191.461 40.4658 191.461 40.9141 cv
191.461 45.4155 li
191.313 45.4155 li
187.519 40.7261 li
187.519 44.0552 li
187.519 44.5225 187.587 44.8271 187.724 44.9692 cv
187.813 45.061 188.013 45.1235 188.323 45.1567 cv
188.323 45.3154 li
186.309 45.3154 li
186.309 45.1567 li
cp
f
192.504 45.1567 mo
192.858 45.1206 193.086 45.0405 193.187 44.917 cv
193.287 44.793 193.337 44.5059 193.337 44.0552 cv
193.337 40.2871 li
193.22 40.1494 li
193.094 40.002 192.987 39.9111 192.899 39.876 cv
192.812 39.8413 192.68 39.8213 192.504 39.8154 cv
192.504 39.6567 li
193.968 39.6567 li
197.279 43.749 li
197.279 40.9067 li
197.279 40.4395 197.209 40.1353 197.069 39.9941 cv
196.978 39.9028 196.773 39.8433 196.458 39.8154 cv
196.458 39.6567 li
198.473 39.6567 li
198.473 39.8154 li
198.146 39.8491 197.928 39.9282 197.819 40.0537 cv
197.71 40.1792 197.656 40.4658 197.656 40.9141 cv
197.656 45.4155 li
197.509 45.4155 li
193.714 40.7261 li
193.714 44.0552 li
193.714 44.5225 193.782 44.8271 193.919 44.9692 cv
194.009 45.061 194.208 45.1235 194.519 45.1567 cv
194.519 45.3154 li
192.504 45.3154 li
192.504 45.1567 li
cp
f
198.699 45.1567 mo
199.015 45.1235 199.219 45.0674 199.313 44.9888 cv
199.406 44.9097 199.453 44.7095 199.453 44.3882 cv
199.453 40.584 li
199.453 40.2808 199.407 40.082 199.314 39.9888 cv
199.223 39.8955 199.018 39.8379 198.699 39.8154 cv
198.699 39.6567 li
201.12 39.6567 li
201.12 39.8154 li
200.805 39.8325 200.593 39.8838 200.485 39.9702 cv
200.378 40.0566 200.324 40.2417 200.324 40.5254 cv
200.324 44.6348 li
200.324 44.7295 200.34 44.8037 200.372 44.8584 cv
200.404 44.9126 200.476 44.9468 200.584 44.9604 cv
200.648 44.9688 200.716 44.9746 200.787 44.9771 cv
200.858 44.98 200.992 44.9814 201.188 44.9814 cv
201.951 44.9814 202.467 44.9189 202.735 44.7935 cv
203.004 44.668 203.264 44.3481 203.516 43.833 cv
203.733 43.833 li
203.314 45.3154 li
198.699 45.3154 li
198.699 45.1567 li
cp
f
205.603 44.4824 mo
205.958 44.9126 206.394 45.1274 206.911 45.1274 cv
207.417 45.1274 207.85 44.918 208.209 44.499 cv
208.568 44.0801 208.748 43.4097 208.748 42.4883 cv
208.748 41.5557 208.566 40.8818 208.203 40.4673 cv
207.839 40.0522 207.409 39.8447 206.911 39.8447 cv
206.396 39.8447 205.961 40.0601 205.604 40.4902 cv
205.248 40.9204 205.07 41.5864 205.07 42.4883 cv
205.07 43.3877 205.248 44.0522 205.603 44.4824 cv
cp
204.961 40.2915 mo
205.489 39.7881 206.139 39.5356 206.909 39.5356 cv
207.683 39.5356 208.333 39.7891 208.861 40.2959 cv
209.434 40.8442 209.72 41.5752 209.72 42.4883 cv
209.72 43.4155 209.424 44.1533 208.832 44.7017 cv
208.301 45.1914 207.66 45.4365 206.909 45.4365 cv
206.104 45.4365 205.438 45.165 204.906 44.6221 cv
204.368 44.0684 204.099 43.3569 204.099 42.4883 cv
204.099 41.5752 204.386 40.8428 204.961 40.2915 cv
cp
f
212.316 44.3882 mo
212.208 44.7588 212.049 45.1079 211.839 45.4365 cv
211.618 45.7871 211.324 46.1143 210.955 46.418 cv
210.713 46.6182 210.509 46.7588 210.344 46.8398 cv
210.265 46.7017 li
210.694 46.376 211.009 46.0435 211.207 45.7036 cv
211.559 45.1025 211.734 44.3076 211.734 43.3193 cv
211.734 42.5205 211.653 41.8677 211.491 41.3608 cv
211.266 40.6455 210.856 40.083 210.265 39.6738 cv
210.373 39.5356 li
210.814 39.7808 211.225 40.1514 211.604 40.6465 cv
212.188 41.4097 212.48 42.2642 212.48 43.2109 cv
212.48 43.6255 212.426 44.0181 212.316 44.3882 cv
cp
f
124.313 92.4697 mo
129.15 85.7368 li
126.608 85.7368 li
125.969 85.7368 125.515 85.896 125.245 86.2148 cv
125.084 86.4043 124.956 86.7319 124.863 87.1973 cv
124.577 87.1973 li
124.799 85.3179 li
130.62 85.3179 li
130.62 85.4414 li
125.784 92.1743 li
128.646 92.1743 li
129.295 92.1743 129.769 92.0225 130.065 91.7183 cv
130.251 91.5249 130.418 91.1724 130.566 90.6602 cv
130.825 90.6602 li
130.55 92.5933 li
124.313 92.5933 li
124.313 92.4697 li
cp
.941406 .761719 0 0 cmyk
f
135.912 92.145 mo
136.097 92.2651 136.314 92.3247 136.566 92.3247 cv
136.954 92.3247 137.285 92.1328 137.56 91.7485 cv
137.835 91.3643 137.972 90.8286 137.972 90.1426 cv
137.972 89.4849 137.829 88.9932 137.544 88.668 cv
137.258 88.3423 136.927 88.1797 136.55 88.1797 cv
136.284 88.1797 136.042 88.2612 135.823 88.4238 cv
135.604 88.5864 135.494 88.7466 135.494 88.9038 cv
135.494 91.6011 li
135.588 91.8442 135.727 92.0254 135.912 92.145 cv
cp
133.787 94.8105 mo
134.122 94.7891 134.336 94.7178 134.427 94.5962 cv
134.518 94.4741 134.563 94.2827 134.563 94.0215 cv
134.563 88.8672 li
134.563 88.5952 134.529 88.4204 134.463 88.3438 cv
134.396 88.2666 134.271 88.228 134.089 88.228 cv
134.049 88.228 134.013 88.23 133.979 88.2334 cv
133.944 88.2373 133.895 88.2441 133.83 88.2549 cv
133.83 88.0776 li
134.342 87.9111 li
134.36 87.9077 134.721 87.7842 135.425 87.541 cv
135.442 87.541 135.456 87.5488 135.465 87.5649 cv
135.474 87.5811 135.479 87.6001 135.479 87.6216 cv
135.479 88.3462 li
135.715 88.1099 135.924 87.9346 136.104 87.8198 cv
136.426 87.6196 136.758 87.5195 137.1 87.5195 cv
137.595 87.5195 138.021 87.7295 138.379 88.1494 cv
138.735 88.5698 138.914 89.1445 138.914 89.874 cv
138.914 90.5894 138.7 91.2383 138.271 91.8208 cv
137.842 92.4038 137.302 92.6953 136.652 92.6953 cv
136.451 92.6953 136.277 92.6704 136.13 92.6201 cv
135.9 92.5449 135.688 92.4072 135.494 92.207 cv
135.494 93.9678 li
135.494 94.3291 135.554 94.5513 135.672 94.6333 cv
135.791 94.7158 136.049 94.7715 136.447 94.7998 cv
136.447 94.9878 li
133.787 94.9878 li
133.787 94.8105 li
cp
f
141.069 88.1582 mo
140.71 88.4839 140.53 89.0459 140.53 89.8442 cv
140.53 90.4814 140.675 91.0757 140.964 91.627 cv
141.254 92.1782 141.655 92.4536 142.17 92.4536 cv
142.573 92.4536 142.883 92.2695 143.101 91.9009 cv
143.318 91.5322 143.428 91.0488 143.428 90.4512 cv
143.428 89.8315 143.289 89.248 143.012 88.7007 cv
142.734 88.1528 142.334 87.8794 141.809 87.8794 cv
141.524 87.8794 141.278 87.9722 141.069 88.1582 cv
cp
140.209 88.2954 mo
140.663 87.8032 141.248 87.5571 141.962 87.5571 cv
142.673 87.5571 143.262 87.7896 143.729 88.2549 cv
144.195 88.7202 144.429 89.3394 144.429 90.1128 cv
144.429 90.8252 144.203 91.4443 143.75 91.9702 cv
143.298 92.4966 142.713 92.7598 141.995 92.7598 cv
141.306 92.7598 140.722 92.5073 140.244 92.0024 cv
139.767 91.498 139.528 90.8643 139.528 90.1021 cv
139.528 89.3896 139.755 88.7876 140.209 88.2954 cv
cp
f
144.989 92.4429 mo
145.323 92.4106 145.549 92.3438 145.667 92.2417 cv
145.786 92.1396 145.845 91.9399 145.845 91.6431 cv
145.845 86.3975 li
145.845 86.1611 145.825 85.998 145.786 85.9087 cv
145.714 85.7583 145.568 85.6831 145.35 85.6831 cv
145.3 85.6831 145.245 85.6885 145.186 85.6992 cv
145.126 85.71 145.052 85.7261 144.962 85.7476 cv
144.962 85.5703 li
145.446 85.4414 146.03 85.2695 146.712 85.0552 cv
146.737 85.0552 146.753 85.0659 146.758 85.0874 cv
146.764 85.1089 146.767 85.1553 146.767 85.2266 cv
146.767 91.6646 li
146.767 91.9756 146.82 92.1772 146.928 92.2686 cv
147.035 92.3599 147.258 92.418 147.596 92.4429 cv
147.596 92.5933 li
144.989 92.5933 li
144.989 92.4429 li
cp
f
149.104 88.4912 mo
148.988 88.6846 148.906 88.9282 148.855 89.2217 cv
151.129 89.2217 li
151.089 88.8638 151.021 88.5967 150.924 88.4214 cv
150.748 88.1064 150.453 87.9487 150.041 87.9487 cv
149.631 87.9487 149.319 88.1299 149.104 88.4912 cv
cp
151.684 88.0806 mo
152.063 88.4297 152.254 88.9243 152.254 89.5649 cv
148.834 89.5649 li
148.87 90.3936 149.059 90.9971 149.399 91.376 cv
149.741 91.7544 150.145 91.9434 150.611 91.9434 cv
150.988 91.9434 151.307 91.8452 151.564 91.6489 cv
151.823 91.4526 152.063 91.1738 152.281 90.813 cv
152.47 90.8774 li
152.322 91.333 152.047 91.7544 151.643 92.1411 cv
151.239 92.5288 150.744 92.7222 150.159 92.7222 cv
149.484 92.7222 148.963 92.4678 148.595 91.9595 cv
148.227 91.4517 148.043 90.8662 148.043 90.2041 cv
148.043 89.4844 148.256 88.8638 148.684 88.3408 cv
149.11 87.8184 149.667 87.5571 150.353 87.5571 cv
150.859 87.5571 151.303 87.7314 151.684 88.0806 cv
cp
f
155.696 92.4429 mo
156.076 92.4253 156.327 92.3545 156.447 92.231 cv
156.567 92.1074 156.628 91.8472 156.628 91.4497 cv
156.628 88.0024 li
155.707 88.0024 li
155.707 87.6431 li
156.628 87.6431 li
156.628 87.0776 156.705 86.5996 156.859 86.2095 cv
157.154 85.4614 157.696 85.0874 158.483 85.0874 cv
158.8 85.0874 159.083 85.1499 159.333 85.2749 cv
159.583 85.4004 159.708 85.5688 159.708 85.7798 cv
159.708 85.8979 159.665 86.0034 159.579 86.0967 cv
159.494 86.1899 159.391 86.2363 159.269 86.2363 cv
159.165 86.2363 159.076 86.2051 159.001 86.1421 cv
158.926 86.0796 158.837 85.9697 158.732 85.812 cv
158.642 85.6724 li
158.592 85.5972 158.533 85.5337 158.465 85.4819 cv
158.397 85.4302 158.303 85.4038 158.181 85.4038 cv
157.909 85.4038 157.726 85.5381 157.629 85.8066 cv
157.575 85.9497 157.549 86.1377 157.549 86.3706 cv
157.549 87.6431 li
158.89 87.6431 li
158.89 88.0024 li
157.549 88.0024 li
157.549 91.4497 li
157.549 91.854 157.604 92.1128 157.713 92.2256 cv
157.822 92.3384 158.108 92.4106 158.572 92.4429 cv
158.572 92.5933 li
155.696 92.5933 li
155.696 92.4429 li
cp
f
160.225 85.2637 mo
160.333 85.1533 160.466 85.0981 160.624 85.0981 cv
160.778 85.0981 160.91 85.1523 161.02 85.2607 cv
161.129 85.3696 161.184 85.5024 161.184 85.6592 cv
161.184 85.812 161.129 85.9434 161.02 86.0518 cv
160.91 86.1606 160.778 86.2148 160.624 86.2148 cv
160.466 86.2148 160.333 86.1606 160.225 86.0518 cv
160.117 85.9434 160.063 85.812 160.063 85.6592 cv
160.063 85.5059 160.117 85.374 160.225 85.2637 cv
cp
159.369 92.4429 mo
159.753 92.4072 159.995 92.3418 160.096 92.2471 cv
160.196 92.1523 160.247 91.8955 160.247 91.4766 cv
160.247 88.9155 li
160.247 88.6826 160.23 88.5215 160.198 88.4321 cv
160.145 88.2856 160.031 88.2119 159.858 88.2119 cv
159.819 88.2119 159.78 88.2158 159.743 88.2227 cv
159.705 88.23 159.597 88.2588 159.417 88.3086 cv
159.417 88.1421 li
159.648 88.0669 li
160.277 87.8633 160.715 87.709 160.963 87.6055 cv
161.063 87.5625 161.128 87.541 161.157 87.541 cv
161.164 87.5659 161.168 87.5928 161.168 87.6216 cv
161.168 91.4766 li
161.168 91.8848 161.217 92.1406 161.315 92.2441 cv
161.414 92.3481 161.638 92.4146 161.986 92.4429 cv
161.986 92.5933 li
159.369 92.5933 li
159.369 92.4429 li
cp
f
165.023 87.6431 mo
165.023 88.0293 li
163.925 88.0293 li
163.914 91.1221 li
163.914 91.394 163.938 91.6001 163.984 91.7397 cv
164.07 91.9863 164.239 92.1099 164.49 92.1099 cv
164.62 92.1099 164.732 92.0796 164.827 92.0186 cv
164.922 91.958 165.031 91.8613 165.153 91.729 cv
165.293 91.8472 li
165.175 92.0078 li
164.987 92.2588 164.79 92.436 164.582 92.5396 cv
164.374 92.6436 164.173 92.6953 163.979 92.6953 cv
163.555 92.6953 163.268 92.5073 163.117 92.1313 cv
163.034 91.9272 162.993 91.6445 162.993 91.2832 cv
162.993 88.0293 li
162.406 88.0293 li
162.389 88.0186 162.375 88.0078 162.366 87.9971 cv
162.356 87.9863 162.353 87.9722 162.353 87.9541 cv
162.353 87.9185 162.36 87.8906 162.377 87.8711 cv
162.393 87.8516 162.444 87.8057 162.53 87.7344 cv
162.778 87.5303 162.956 87.3647 163.066 87.2373 cv
163.176 87.1104 163.433 86.7749 163.839 86.231 cv
163.886 86.231 163.913 86.2344 163.922 86.2417 cv
163.932 86.249 163.936 86.2754 163.936 86.3223 cv
163.936 87.6431 li
165.023 87.6431 li
cp
f
169.306 87.8955 mo
169.663 87.4473 170.085 87.0864 170.571 86.8135 cv
170.65 86.9517 li
170.201 87.3081 169.88 87.6543 169.688 87.9912 cv
169.35 88.5786 169.181 89.3608 169.181 90.3384 cv
169.181 91.062 169.244 91.6592 169.373 92.1299 cv
169.6 92.9536 170.025 93.5703 170.65 93.9795 cv
170.542 94.1177 li
170.198 93.9531 169.827 93.6318 169.428 93.1528 cv
168.766 92.3594 168.435 91.4575 168.435 90.4468 cv
168.435 89.478 168.726 88.6274 169.306 87.8955 cv
cp
f
170.985 92.4346 mo
171.34 92.3984 171.567 92.3184 171.668 92.1948 cv
171.769 92.0708 171.818 91.7837 171.818 91.333 cv
171.818 87.5649 li
171.701 87.4272 li
171.575 87.2798 171.469 87.189 171.381 87.1538 cv
171.293 87.1191 171.161 87.0991 170.985 87.0933 cv
170.985 86.9346 li
172.449 86.9346 li
175.761 91.0269 li
175.761 88.1846 li
175.761 87.7173 175.69 87.4131 175.551 87.272 cv
175.459 87.1807 175.255 87.1211 174.939 87.0933 cv
174.939 86.9346 li
176.954 86.9346 li
176.954 87.0933 li
176.627 87.127 176.409 87.2061 176.301 87.3315 cv
176.191 87.457 176.138 87.7437 176.138 88.1919 cv
176.138 92.6934 li
175.99 92.6934 li
172.195 88.0039 li
172.195 91.333 li
172.195 91.8003 172.264 92.105 172.4 92.2471 cv
172.49 92.3389 172.689 92.4014 173 92.4346 cv
173 92.5933 li
170.985 92.5933 li
170.985 92.4346 li
cp
f
178.135 89.8306 mo
178.351 89.9678 178.534 90.0361 178.686 90.0361 cv
179.021 90.0361 179.27 89.9233 179.433 89.6978 cv
179.595 89.4717 179.677 89.2261 179.677 88.9609 cv
179.677 88.7051 179.61 88.4805 179.479 88.2866 cv
179.256 87.9595 178.881 87.7954 178.352 87.7954 cv
178.32 87.7954 178.29 87.7964 178.262 87.7974 cv
178.233 87.7988 178.199 87.8018 178.161 87.8062 cv
178.154 87.7134 li
178.537 87.5752 178.839 87.416 179.059 87.2373 cv
179.279 87.0581 179.389 86.8223 179.389 86.5283 cv
179.389 86.2686 179.303 86.0703 179.129 85.9346 cv
178.955 85.7983 178.757 85.7305 178.534 85.7305 cv
178.271 85.7305 178.039 85.8271 177.838 86.02 cv
177.728 86.1255 177.609 86.2876 177.482 86.5068 cv
177.371 86.4819 li
177.467 86.1191 177.646 85.8296 177.906 85.6123 cv
178.167 85.395 178.469 85.2866 178.812 85.2866 cv
179.178 85.2866 179.46 85.3867 179.66 85.5869 cv
179.86 85.7876 179.96 86.019 179.96 86.2817 cv
179.96 86.5132 179.878 86.7256 179.712 86.9185 cv
179.619 87.0283 179.474 87.1514 179.278 87.2876 cv
179.508 87.3853 179.692 87.5 179.831 87.6309 cv
180.092 87.8813 180.222 88.1987 180.222 88.583 cv
180.222 89.0366 180.043 89.436 179.686 89.7822 cv
179.327 90.1284 178.818 90.3013 178.157 90.3013 cv
177.863 90.3013 177.657 90.2578 177.538 90.1704 cv
177.42 90.0835 177.36 89.9897 177.36 89.8896 cv
177.36 89.8276 177.38 89.7681 177.42 89.7104 cv
177.459 89.6533 177.523 89.6245 177.612 89.6245 cv
177.743 89.6245 177.918 89.6934 178.135 89.8306 cv
cp
f
180.865 92.4346 mo
181.181 92.4014 181.385 92.3452 181.479 92.2666 cv
181.572 92.1875 181.619 91.9873 181.619 91.666 cv
181.619 87.8618 li
181.619 87.5586 181.573 87.3599 181.48 87.2666 cv
181.389 87.1733 181.184 87.1157 180.865 87.0933 cv
180.865 86.9346 li
183.286 86.9346 li
183.286 87.0933 li
182.971 87.1104 182.759 87.1616 182.651 87.248 cv
182.544 87.3345 182.49 87.5195 182.49 87.8032 cv
182.49 91.9126 li
182.49 92.0073 182.506 92.0815 182.538 92.1362 cv
182.57 92.1904 182.642 92.2246 182.75 92.2383 cv
182.814 92.2466 182.882 92.2524 182.953 92.2549 cv
183.024 92.2578 183.158 92.2593 183.354 92.2593 cv
184.117 92.2593 184.633 92.1968 184.901 92.0713 cv
185.17 91.9458 185.43 91.626 185.682 91.1108 cv
185.899 91.1108 li
185.48 92.5933 li
180.865 92.5933 li
180.865 92.4346 li
cp
f
187.769 91.7603 mo
188.124 92.1904 188.56 92.4053 189.077 92.4053 cv
189.583 92.4053 190.016 92.1958 190.375 91.7769 cv
190.734 91.3579 190.914 90.6875 190.914 89.7661 cv
190.914 88.8335 190.732 88.1597 190.369 87.7451 cv
190.005 87.3301 189.575 87.1226 189.077 87.1226 cv
188.563 87.1226 188.127 87.3379 187.771 87.7681 cv
187.414 88.1982 187.236 88.8643 187.236 89.7661 cv
187.236 90.6655 187.414 91.3301 187.769 91.7603 cv
cp
187.127 87.5693 mo
187.655 87.0659 188.305 86.8135 189.075 86.8135 cv
189.849 86.8135 190.499 87.0669 191.027 87.5737 cv
191.6 88.1221 191.886 88.853 191.886 89.7661 cv
191.886 90.6934 191.59 91.4312 190.998 91.9795 cv
190.467 92.4692 189.826 92.7144 189.075 92.7144 cv
188.271 92.7144 187.604 92.4429 187.072 91.8999 cv
186.534 91.3462 186.265 90.6348 186.265 89.7661 cv
186.265 88.853 186.552 88.1206 187.127 87.5693 cv
cp
f
194.423 91.666 mo
194.314 92.0366 194.155 92.3857 193.945 92.7144 cv
193.725 93.0649 193.431 93.3921 193.062 93.6958 cv
192.819 93.896 192.615 94.0366 192.45 94.1177 cv
192.371 93.9795 li
192.801 93.6538 193.115 93.3213 193.313 92.9814 cv
193.665 92.3804 193.841 91.5854 193.841 90.5972 cv
193.841 89.7983 193.76 89.1455 193.598 88.6387 cv
193.372 87.9233 192.963 87.3608 192.371 86.9517 cv
192.479 86.8135 li
192.921 87.0586 193.331 87.4292 193.711 87.9243 cv
194.295 88.6875 194.587 89.542 194.587 90.4888 cv
194.587 90.9033 194.532 91.2959 194.423 91.666 cv
cp
f
118.35 89.4185 mo
118.35 89.4185 li
118.35 90.4307 117.526 91.2505 116.512 91.2505 cv
115.496 91.2505 114.673 90.4307 114.673 89.4185 cv
114.673 88.4063 115.496 87.5854 116.512 87.5854 cv
117.526 87.5854 118.35 88.4063 118.35 89.4185 cv
ef
118.349 89.4185 mo
118.349 89.4185 li
118.349 90.4297 117.525 91.2505 116.511 91.2505 cv
115.495 91.2505 114.672 90.4297 114.672 89.4185 cv
114.672 88.4058 115.495 87.5854 116.511 87.5854 cv
117.525 87.5854 118.349 88.4058 118.349 89.4185 cv
cp
.78125 .4375 0 0 cmyk
@
128.694 26.9585 mo
128.694 27.9707 li
126.995 27.9707 li
126.819 30.3911 li
126.786 30.8311 126.885 31.1392 127.028 31.3262 cv
127.15 31.4805 127.293 31.7002 127.646 31.6343 cv
128.065 31.5464 128.088 31.2163 128.187 30.7871 cv
128.386 30.7871 li
128.374 31.4146 128.363 32.1074 127.69 32.5146 cv
127.525 32.6133 127.105 32.8003 126.676 32.5146 cv
126.488 32.3823 126.124 31.9756 126.091 31.0293 cv
126.058 29.9399 126.256 28.5649 126.322 27.9819 cv
125.318 27.9819 li
124.899 27.9819 124.535 28.6421 124.392 29.0381 cv
124.193 29.0381 li
124.425 28.1797 124.591 27.8389 124.943 27.4429 cv
125.22 27.1348 125.693 26.9585 126.102 26.9585 cv
128.694 26.9585 li
cp
.266453 1 1 .303075 cmyk
f
135.025 31.7349 mo
135.197 31.5698 135.283 31.4146 135.283 31.2676 cv
135.283 28.9644 li
135.283 28.499 135.159 28.1704 134.909 27.979 cv
134.659 27.7876 134.416 27.6919 134.18 27.6919 cv
133.728 27.6919 133.375 27.8911 133.124 28.2905 cv
132.872 28.6895 132.747 29.1807 132.747 29.7642 cv
132.747 30.3403 132.881 30.854 133.148 31.3052 cv
133.416 31.7563 133.815 31.9814 134.347 31.9814 cv
134.627 31.9814 134.853 31.8994 135.025 31.7349 cv
cp
134.869 27.5576 mo
135.013 27.6328 135.15 27.7363 135.283 27.8687 cv
135.283 26.1616 li
135.283 25.9434 135.26 25.793 135.211 25.7104 cv
135.162 25.6279 135.047 25.5869 134.863 25.5869 cv
134.82 25.5869 134.782 25.5889 134.75 25.5923 cv
134.718 25.5962 134.646 25.603 134.535 25.6138 cv
134.535 25.4365 li
134.977 25.3237 li
135.138 25.2808 135.3 25.2363 135.461 25.1895 cv
135.623 25.1431 135.765 25.0981 135.887 25.0557 cv
135.944 25.0376 136.039 25.0034 136.172 24.9536 cv
136.204 24.9644 li
136.193 25.5278 li
136.19 25.7319 136.187 25.9424 136.183 26.1587 cv
136.18 26.3755 136.178 26.5894 136.178 26.8003 cv
136.167 31.187 li
136.167 31.4199 136.195 31.5825 136.253 31.6758 cv
136.311 31.7686 136.463 31.8149 136.711 31.8149 cv
136.75 31.8149 136.79 31.8145 136.829 31.8125 cv
136.869 31.8105 136.908 31.8062 136.947 31.7988 cv
136.947 31.9761 li
136.926 31.9834 136.666 32.0728 136.167 32.2446 cv
135.321 32.5615 li
135.283 32.5132 li
135.283 31.8525 li
135.082 32.0713 134.908 32.2271 134.761 32.3198 cv
134.499 32.481 134.195 32.5615 133.851 32.5615 cv
133.24 32.5615 132.746 32.3262 132.367 31.8555 cv
131.988 31.3848 131.799 30.8398 131.799 30.2207 cv
131.799 29.4438 132.026 28.7773 132.48 28.2207 cv
132.935 27.6641 133.49 27.3857 134.147 27.3857 cv
134.409 27.3857 134.649 27.4429 134.869 27.5576 cv
cp
f
138.326 28.3574 mo
138.211 28.5508 138.129 28.7944 138.078 29.0879 cv
140.352 29.0879 li
140.312 28.73 140.243 28.4629 140.146 28.2876 cv
139.971 27.9727 139.676 27.8149 139.264 27.8149 cv
138.854 27.8149 138.542 27.9961 138.326 28.3574 cv
cp
140.906 27.9468 mo
141.286 28.2959 141.477 28.7905 141.477 29.4312 cv
138.057 29.4312 li
138.093 30.2598 138.281 30.8633 138.622 31.2422 cv
138.964 31.6206 139.367 31.8096 139.834 31.8096 cv
140.211 31.8096 140.529 31.7114 140.787 31.5151 cv
141.046 31.3188 141.285 31.04 141.504 30.6792 cv
141.692 30.7437 li
141.545 31.1992 141.27 31.6206 140.865 32.0073 cv
140.462 32.395 139.967 32.5884 139.382 32.5884 cv
138.707 32.5884 138.186 32.334 137.817 31.8257 cv
137.449 31.3179 137.266 30.7324 137.266 30.0703 cv
137.266 29.3506 137.479 28.73 137.906 28.207 cv
138.333 27.6846 138.89 27.4233 139.575 27.4233 cv
140.082 27.4233 140.525 27.5977 140.906 27.9468 cv
cp
f
145.848 27.7417 mo
146.172 27.9717 146.335 28.2241 146.335 28.4985 cv
146.335 28.6162 146.293 28.7261 146.211 28.8276 cv
146.128 28.9292 146.001 28.9805 145.828 28.9805 cv
145.702 28.9805 145.592 28.9375 145.497 28.8516 cv
145.402 28.7656 145.333 28.6401 145.29 28.4756 cv
145.226 28.2178 li
145.179 28.0283 145.098 27.894 144.982 27.8149 cv
144.864 27.7402 144.708 27.7026 144.515 27.7026 cv
144.104 27.7026 143.76 27.8809 143.478 28.2373 cv
143.195 28.5942 143.055 29.0679 143.055 29.6592 cv
143.055 30.2007 143.21 30.6865 143.521 31.1162 cv
143.831 31.5464 144.25 31.7617 144.778 31.7617 cv
145.151 31.7617 145.483 31.6396 145.774 31.3955 cv
145.939 31.2559 146.126 31.0337 146.335 30.7285 cv
146.485 30.8198 li
146.28 31.25 146.065 31.5903 145.839 31.8413 cv
145.404 32.3213 144.902 32.5615 144.331 32.5615 cv
143.771 32.5615 143.275 32.3413 142.845 31.9009 cv
142.414 31.4609 142.198 30.8633 142.198 30.1079 cv
142.198 29.3667 142.434 28.73 142.904 28.1963 cv
143.374 27.6631 143.969 27.3965 144.687 27.3965 cv
145.136 27.3965 145.522 27.5112 145.848 27.7417 cv
cp
f
150.002 29.4849 mo
149.589 29.6211 149.248 29.7715 148.979 29.936 cv
148.462 30.2544 148.203 30.6162 148.203 31.0205 cv
148.203 31.3462 148.312 31.5859 148.526 31.7402 cv
148.667 31.8403 148.822 31.8901 148.995 31.8901 cv
149.232 31.8901 149.459 31.8242 149.677 31.6919 cv
149.894 31.5591 150.002 31.3911 150.002 31.187 cv
150.002 29.4849 li
cp
148.025 30.0918 mo
148.355 29.877 149.015 29.5854 150.002 29.2163 cv
150.002 28.7603 li
150.002 28.395 149.966 28.1411 149.895 27.9976 cv
149.772 27.7578 149.52 27.6382 149.135 27.6382 cv
148.952 27.6382 148.777 27.6846 148.612 27.7773 cv
148.447 27.874 148.365 28.0068 148.365 28.1748 cv
148.365 28.2178 148.374 28.2905 148.392 28.3926 cv
148.41 28.4941 148.419 28.5596 148.419 28.5884 cv
148.419 28.7891 148.353 28.9282 148.22 29.0073 cv
148.145 29.0537 148.055 29.0771 147.95 29.0771 cv
147.789 29.0771 147.665 29.0239 147.579 28.9185 cv
147.492 28.813 147.449 28.6958 147.449 28.5669 cv
147.449 28.3164 147.604 28.0542 147.915 27.7803 cv
148.226 27.5063 148.681 27.3696 149.28 27.3696 cv
149.977 27.3696 150.449 27.5952 150.697 28.0459 cv
150.83 28.293 150.896 28.6528 150.896 29.125 cv
150.896 31.2783 li
150.896 31.4858 150.91 31.6289 150.939 31.708 cv
150.986 31.8472 151.083 31.917 151.23 31.917 cv
151.313 31.917 151.381 31.9048 151.435 31.8794 cv
151.488 31.8545 151.582 31.7935 151.715 31.6973 cv
151.715 31.9761 li
151.6 32.1157 151.476 32.2305 151.343 32.3198 cv
151.142 32.4561 150.938 32.5239 150.729 32.5239 cv
150.485 32.5239 150.309 32.4453 150.199 32.2876 cv
150.089 32.1304 150.029 31.9424 150.019 31.7241 cv
149.745 31.96 149.512 32.1357 149.318 32.25 cv
148.991 32.4434 148.681 32.54 148.387 32.54 cv
148.078 32.54 147.811 32.4316 147.584 32.2153 cv
147.357 31.9985 147.245 31.7241 147.245 31.3911 cv
147.245 30.8721 147.505 30.439 148.025 30.0918 cv
cp
f
151.887 27.5254 mo
154.16 27.5254 li
154.16 27.6758 li
153.98 27.6792 153.848 27.6958 153.762 27.7251 cv
153.596 27.7725 153.514 27.8657 153.514 28.0049 cv
153.514 28.0562 153.522 28.1084 153.54 28.1616 cv
153.559 28.2148 153.591 28.2944 153.638 28.4004 cv
154.884 31.0874 li
155.91 28.3789 li
155.921 28.3496 155.938 28.2837 155.961 28.1812 cv
155.984 28.0786 155.996 28.0088 155.996 27.9722 cv
155.996 27.877 155.964 27.8076 155.899 27.7637 cv
155.835 27.7197 155.752 27.6938 155.651 27.6865 cv
155.484 27.6758 li
155.484 27.5254 li
156.966 27.5254 li
156.966 27.6758 li
156.818 27.6938 156.708 27.7456 156.635 27.8306 cv
156.561 27.916 156.497 28.0342 156.443 28.1855 cv
154.747 32.6636 li
154.452 33.4365 154.171 33.9966 153.901 34.3442 cv
153.632 34.6914 153.291 34.8647 152.878 34.8647 cv
152.677 34.8647 152.488 34.8145 152.313 34.7144 cv
152.137 34.6143 152.049 34.4551 152.049 34.2368 cv
152.049 34.0933 152.101 33.9761 152.206 33.8848 cv
152.311 33.7939 152.442 33.748 152.602 33.748 cv
152.694 33.748 152.832 33.7822 153.014 33.8501 cv
153.196 33.918 153.327 33.9521 153.405 33.9521 cv
153.604 33.9521 153.813 33.709 154.033 33.2231 cv
154.253 32.7368 154.362 32.416 154.362 32.2603 cv
154.362 32.2285 154.357 32.1895 154.348 32.1436 cv
154.337 32.0977 154.325 32.0571 154.312 32.0215 cv
152.614 28.3628 li
152.492 28.0981 152.386 27.9233 152.294 27.8394 cv
152.202 27.7554 152.066 27.7007 151.887 27.6758 cv
151.887 27.5254 li
cp
f
157.827 30.7681 mo
158.005 30.7681 li
158.087 31.1763 158.198 31.4897 158.338 31.708 cv
158.589 32.1089 158.956 32.3091 159.439 32.3091 cv
159.708 32.3091 159.92 32.2349 160.076 32.0864 cv
160.232 31.938 160.31 31.7456 160.31 31.5093 cv
160.31 31.3589 160.265 31.2139 160.176 31.0742 cv
160.086 30.9346 159.928 30.7988 159.701 30.666 cv
159.099 30.3228 li
158.657 30.0864 158.332 29.8481 158.124 29.6084 cv
157.915 29.3687 157.812 29.0859 157.812 28.7603 cv
157.812 28.3594 157.955 28.0298 158.242 27.772 cv
158.529 27.5146 158.89 27.3857 159.324 27.3857 cv
159.515 27.3857 159.724 27.4214 159.952 27.4932 cv
160.18 27.5645 160.309 27.6006 160.337 27.6006 cv
160.401 27.6006 160.448 27.5913 160.477 27.5737 cv
160.506 27.5557 160.531 27.5269 160.553 27.4878 cv
160.682 27.4878 li
160.72 28.9858 li
160.553 28.9858 li
160.48 28.6387 160.384 28.3682 160.262 28.1748 cv
160.039 27.8169 159.718 27.6382 159.298 27.6382 cv
159.046 27.6382 158.849 27.7148 158.705 27.8687 cv
158.562 28.0229 158.489 28.2036 158.489 28.4111 cv
158.489 28.7407 158.737 29.0342 159.232 29.2915 cv
159.943 29.6729 li
160.709 30.0884 161.091 30.5713 161.091 31.1226 cv
161.091 31.5449 160.933 31.8901 160.615 32.1587 cv
160.298 32.4272 159.883 32.5615 159.37 32.5615 cv
159.155 32.5615 158.912 32.5259 158.64 32.4541 cv
158.367 32.3823 158.206 32.3467 158.155 32.3467 cv
158.112 32.3467 158.075 32.3618 158.043 32.3926 cv
158.01 32.4229 157.985 32.4595 157.967 32.5024 cv
157.827 32.5024 li
157.827 30.7681 li
cp
f
165.565 27.7617 mo
165.923 27.3135 166.345 26.9526 166.831 26.6797 cv
166.91 26.8179 li
166.461 27.1743 166.14 27.5205 165.947 27.8574 cv
165.609 28.4448 165.44 29.2271 165.44 30.2046 cv
165.44 30.9282 165.504 31.5254 165.633 31.9961 cv
165.859 32.8198 166.285 33.4365 166.91 33.8457 cv
166.802 33.9839 li
166.458 33.8193 166.087 33.498 165.688 33.019 cv
165.025 32.2256 164.694 31.3237 164.694 30.313 cv
164.694 29.3442 164.985 28.4937 165.565 27.7617 cv
cp
f
167.245 32.3008 mo
167.6 32.2646 167.827 32.1846 167.928 32.061 cv
168.028 31.937 168.078 31.6499 168.078 31.1992 cv
168.078 27.4312 li
167.961 27.2935 li
167.835 27.146 167.729 27.0552 167.641 27.02 cv
167.553 26.9854 167.421 26.9653 167.245 26.9595 cv
167.245 26.8008 li
168.709 26.8008 li
172.021 30.8931 li
172.021 28.0508 li
172.021 27.5835 171.95 27.2793 171.811 27.1382 cv
171.719 27.0469 171.515 26.9873 171.199 26.9595 cv
171.199 26.8008 li
173.214 26.8008 li
173.214 26.9595 li
172.887 26.9932 172.669 27.0723 172.561 27.1978 cv
172.451 27.3232 172.397 27.6099 172.397 28.0581 cv
172.397 32.5596 li
172.25 32.5596 li
168.455 27.8701 li
168.455 31.1992 li
168.455 31.6665 168.523 31.9712 168.66 32.1133 cv
168.75 32.2051 168.949 32.2676 169.26 32.3008 cv
169.26 32.4595 li
167.245 32.4595 li
167.245 32.3008 li
cp
f
174.395 29.6963 mo
174.61 29.8335 174.794 29.9019 174.945 29.9019 cv
175.28 29.9019 175.529 29.7891 175.692 29.5635 cv
175.854 29.3374 175.937 29.0918 175.937 28.8267 cv
175.937 28.5708 175.87 28.3462 175.738 28.1523 cv
175.516 27.8252 175.141 27.6611 174.611 27.6611 cv
174.58 27.6611 174.55 27.6621 174.521 27.6631 cv
174.493 27.6646 174.459 27.6675 174.421 27.6719 cv
174.414 27.5791 li
174.797 27.4409 175.099 27.2817 175.318 27.103 cv
175.539 26.9238 175.648 26.688 175.648 26.394 cv
175.648 26.1343 175.563 25.936 175.389 25.8003 cv
175.215 25.6641 175.017 25.5962 174.794 25.5962 cv
174.531 25.5962 174.299 25.6929 174.098 25.8857 cv
173.987 25.9912 173.869 26.1533 173.742 26.3726 cv
173.631 26.3477 li
173.727 25.9849 173.905 25.6953 174.166 25.478 cv
174.427 25.2607 174.729 25.1523 175.071 25.1523 cv
175.438 25.1523 175.72 25.2524 175.92 25.4526 cv
176.12 25.6533 176.22 25.8848 176.22 26.1475 cv
176.22 26.3789 176.138 26.5913 175.972 26.7842 cv
175.879 26.894 175.733 27.0171 175.538 27.1533 cv
175.768 27.251 175.952 27.3657 176.091 27.4966 cv
176.352 27.7471 176.481 28.0645 176.481 28.4487 cv
176.481 28.9023 176.303 29.3018 175.945 29.6479 cv
175.587 29.9941 175.078 30.167 174.417 30.167 cv
174.123 30.167 173.917 30.1235 173.798 30.0361 cv
173.68 29.9492 173.62 29.8555 173.62 29.7554 cv
173.62 29.6934 173.64 29.6338 173.68 29.5762 cv
173.719 29.519 173.783 29.4902 173.872 29.4902 cv
174.003 29.4902 174.178 29.5591 174.395 29.6963 cv
cp
f
177.126 32.3008 mo
177.441 32.2676 177.646 32.2114 177.739 32.1328 cv
177.833 32.0537 177.88 31.8535 177.88 31.5322 cv
177.88 27.728 li
177.88 27.4248 177.834 27.2261 177.741 27.1328 cv
177.649 27.0396 177.444 26.9819 177.126 26.9595 cv
177.126 26.8008 li
179.547 26.8008 li
179.547 26.9595 li
179.231 26.9766 179.02 27.0278 178.912 27.1143 cv
178.805 27.2007 178.751 27.3857 178.751 27.6694 cv
178.751 31.7788 li
178.751 31.8735 178.767 31.9478 178.799 32.0024 cv
178.831 32.0566 178.902 32.0908 179.011 32.1045 cv
179.075 32.1128 179.143 32.1187 179.214 32.1211 cv
179.285 32.124 179.419 32.1255 179.615 32.1255 cv
180.378 32.1255 180.894 32.063 181.162 31.9375 cv
181.431 31.812 181.69 31.4922 181.942 30.9771 cv
182.16 30.9771 li
181.741 32.4595 li
177.126 32.4595 li
177.126 32.3008 li
cp
f
184.029 31.6265 mo
184.385 32.0566 184.82 32.2715 185.338 32.2715 cv
185.844 32.2715 186.276 32.062 186.636 31.6431 cv
186.995 31.2241 187.175 30.5537 187.175 29.6323 cv
187.175 28.6997 186.993 28.0259 186.63 27.6113 cv
186.266 27.1963 185.836 26.9888 185.338 26.9888 cv
184.823 26.9888 184.388 27.2041 184.031 27.6343 cv
183.675 28.0645 183.497 28.7305 183.497 29.6323 cv
183.497 30.5317 183.675 31.1963 184.029 31.6265 cv
cp
183.388 27.4355 mo
183.916 26.9321 184.565 26.6797 185.336 26.6797 cv
186.109 26.6797 186.76 26.9331 187.288 27.4399 cv
187.86 27.9883 188.146 28.7192 188.146 29.6323 cv
188.146 30.5596 187.851 31.2974 187.259 31.8457 cv
186.728 32.3354 186.087 32.5806 185.336 32.5806 cv
184.531 32.5806 183.864 32.3091 183.333 31.7661 cv
182.795 31.2124 182.525 30.501 182.525 29.6323 cv
182.525 28.7192 182.813 27.9868 183.388 27.4355 cv
cp
f
190.684 31.5322 mo
190.575 31.9028 190.416 32.252 190.206 32.5806 cv
189.985 32.9312 189.691 33.2583 189.322 33.562 cv
189.08 33.7622 188.876 33.9028 188.711 33.9839 cv
188.632 33.8457 li
189.062 33.52 189.376 33.1875 189.574 32.8477 cv
189.926 32.2466 190.102 31.4517 190.102 30.4634 cv
190.102 29.6646 190.021 29.0117 189.858 28.5049 cv
189.633 27.7896 189.224 27.2271 188.632 26.8179 cv
188.74 26.6797 li
189.182 26.9248 189.592 27.2954 189.972 27.7905 cv
190.556 28.5537 190.848 29.4082 190.848 30.355 cv
190.848 30.7695 190.793 31.1621 190.684 31.5322 cv
cp
f
116.938 32.1475 mo
116.019 30.3145 li
115.1 28.4814 li
116.938 28.4814 li
118.776 28.4814 li
117.857 30.3145 li
116.938 32.1475 li
ef
1 lw
0 lj
10 ml
116.938 32.1475 mo
116.019 30.3145 li
115.1 28.4814 li
116.938 28.4814 li
118.776 28.4814 li
117.857 30.3145 li
116.938 32.1475 li
@
116.938 32.1465 mo
116.018 30.314 li
115.099 28.4819 li
116.938 28.4819 li
118.775 28.4819 li
117.856 30.314 li
116.938 32.1465 li
cp
f
.611831 lw
1 lj
14.3 ml
116.938 32.1465 mo
116.018 30.314 li
115.099 28.4819 li
116.938 28.4819 li
118.775 28.4819 li
117.856 30.314 li
116.938 32.1465 li
cp
@
64.1836 100.173 mo
63.2637 98.3413 li
62.3447 96.5083 li
64.1836 96.5083 li
66.0215 96.5083 li
65.1025 98.3413 li
64.1836 100.173 li
ef
64.1826 100.174 mo
63.2632 98.3408 li
62.3438 96.5083 li
64.1826 96.5083 li
66.0205 96.5083 li
65.1011 98.3408 li
64.1826 100.174 li
cp
@
230.972 221.097 mo
230.992 216.89 li
0 .949219 .832031 0 cmyk
@
229.272 216.669 mo
232.47 216.669 li
@
229.425 221.878 mo
232.623 221.878 li
@
231.023 219.362 mo
231.023 221.958 li
@
232.557 219.298 mo
232.557 219.298 li
232.557 220.163 231.841 220.864 230.959 220.864 cv
230.076 220.864 229.359 220.163 229.359 219.298 cv
229.359 218.433 230.076 217.733 230.959 217.733 cv
231.841 217.733 232.557 218.433 232.557 219.298 cv
0 0 0 0 cmyk
ef
232.556 219.298 mo
232.556 219.298 li
232.556 220.163 231.84 220.864 230.958 220.864 cv
230.074 220.864 229.358 220.163 229.358 219.298 cv
229.358 218.433 230.074 217.733 230.958 217.733 cv
231.84 217.733 232.556 218.433 232.556 219.298 cv
cp
0 .949219 .832031 0 cmyk
@
238.207 223.81 mo
238.228 219.36 li
@
236.507 219.126 mo
239.705 219.126 li
@
236.66 224.637 mo
239.857 224.637 li
@
238.259 221.975 mo
238.259 224.721 li
@
239.792 221.908 mo
239.792 221.908 li
239.792 222.823 239.076 223.563 238.193 223.563 cv
237.311 223.563 236.595 222.823 236.595 221.908 cv
236.595 220.994 237.311 220.251 238.193 220.251 cv
239.076 220.251 239.792 220.994 239.792 221.908 cv
0 0 0 0 cmyk
ef
239.79 221.907 mo
239.79 221.907 li
239.79 222.822 239.074 223.563 238.191 223.563 cv
237.31 223.563 236.593 222.822 236.593 221.907 cv
236.593 220.994 237.31 220.251 238.191 220.251 cv
239.074 220.251 239.79 220.994 239.79 221.907 cv
cp
0 .949219 .832031 0 cmyk
@
246.812 223.098 mo
246.833 218.608 li
@
245.238 218.862 mo
248.436 218.862 li
@
245.35 223.56 mo
248.548 223.56 li
@
246.948 220.92 mo
246.948 223.691 li
@
248.481 221.252 mo
248.481 221.252 li
248.481 222.174 247.766 222.922 246.883 222.922 cv
246 222.922 245.283 222.174 245.283 221.252 cv
245.283 220.33 246 219.582 246.883 219.582 cv
247.766 219.582 248.481 220.33 248.481 221.252 cv
0 0 0 0 cmyk
ef
248.479 221.252 mo
248.479 221.252 li
248.479 222.174 247.765 222.922 246.881 222.922 cv
245.999 222.922 245.282 222.174 245.282 221.252 cv
245.282 220.33 245.999 219.582 246.881 219.582 cv
247.765 219.582 248.479 220.33 248.479 221.252 cv
cp
0 .949219 .832031 0 cmyk
@
126.124 170.714 mo
129.801 170.714 li
.422065 .948577 0 0 cmyk
@
236.22 215.522 mo
236.239 211.04 li
0 .949219 .832031 0 cmyk
@
234.521 210.804 mo
237.717 210.804 li
@
234.673 216.354 mo
237.87 216.354 li
@
236.271 213.672 mo
236.271 216.438 li
@
237.805 213.604 mo
237.805 213.604 li
237.805 214.526 237.089 215.272 236.206 215.272 cv
235.322 215.272 234.606 214.526 234.606 213.604 cv
234.606 212.684 235.322 211.937 236.206 211.937 cv
237.089 211.937 237.805 212.684 237.805 213.604 cv
0 0 0 0 cmyk
ef
237.803 213.605 mo
237.803 213.605 li
237.803 214.525 237.087 215.272 236.205 215.272 cv
235.321 215.272 234.605 214.525 234.605 213.605 cv
234.605 212.684 235.321 211.937 236.205 211.937 cv
237.087 211.937 237.803 212.684 237.803 213.605 cv
cp
0 .949219 .832031 0 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
